local colors_array = {
	'MediumOrchid4',
	'MediumOrchid1',
	'MediumOrchid2',
	'MediumOrchid3',
	'medium orchid',
	'MediumOrchid',
	'dark violet',
	'DarkViolet',
	'DarkOrchid1',
	'DarkOrchid2',
	'DarkOrchid3',
	'dark orchid',
	'DarkOrchid',
	'DarkOrchid4',
	'purple',
	'purple2',
	'purple3',
	'purple4',
	'purple1',
	'blue violet',
	'BlueViolet',
	'MediumPurple2',
	'MediumPurple3',
	'MediumPurple1',
	'medium purple',
	'MediumPurple',
	'MediumPurple4',
	'SlateBlue4',
	'SlateBlue2',
	'SlateBlue3',
	'SlateBlue1',
	'medium slate blue',
	'MediumSlateBlue',
	'light slate blue',
	'LightSlateBlue',
	'slate blue',
	'SlateBlue',
	'dark slate blue',
	'DarkSlateBlue',
	'blue',
	'blue1',
	'blue2',
	'blue3',
	'medium blue',
	'MediumBlue',
	'blue4',
	'dark blue',
	'DarkBlue',
	'navy',
	'navy blue',
	'NavyBlue',
	'midnight blue',
	'MidnightBlue',
	'lavender',
	'ghost white',
	'GhostWhite',
	'RoyalBlue4',
	'RoyalBlue2',
	'RoyalBlue1',
	'RoyalBlue3',
	'royal blue',
	'RoyalBlue',
	'cornflower blue',
	'CornflowerBlue',
	'LightSteelBlue2',
	'LightSteelBlue3',
	'LightSteelBlue1',
	'light steel blue',
	'LightSteelBlue',
	'LightSteelBlue4',
	'SlateGray1',
	'SlateGray2',
	'SlateGray4',
	'DodgerBlue4',
	'dodger blue',
	'DodgerBlue',
	'DodgerBlue1',
	'DodgerBlue2',
	'DodgerBlue3',
	'SlateGray3',
	'light slate gray',
	'light slate grey',
	'LightSlateGray',
	'LightSlateGrey',
	'slate gray',
	'slate grey',
	'SlateGray',
	'SlateGrey',
	'alice blue',
	'AliceBlue',
	'SteelBlue3',
	'SteelBlue2',
	'SteelBlue1',
	'steel blue',
	'SteelBlue',
	'SteelBlue4',
	'SkyBlue4',
	'SkyBlue3',
	'SkyBlue1',
	'SkyBlue2',
	'light sky blue',
	'LightSkyBlue',
	'LightSkyBlue1',
	'LightSkyBlue2',
	'LightSkyBlue4',
	'LightSkyBlue3',
	'sky blue',
	'SkyBlue',
	'deep sky blue',
	'DeepSkyBlue',
	'DeepSkyBlue1',
	'DeepSkyBlue2',
	'DeepSkyBlue3',
	'DeepSkyBlue4',
	'LightBlue1',
	'LightBlue2',
	'light blue',
	'LightBlue',
	'LightBlue3',
	'LightBlue4',
	'powder blue',
	'PowderBlue',
	'CadetBlue1',
	'CadetBlue3',
	'CadetBlue2',
	'CadetBlue4',
	'turquoise1',
	'turquoise2',
	'turquoise3',
	'turquoise4',
	'cadet blue',
	'CadetBlue',
	'dark turquoise',
	'DarkTurquoise',
	'cyan',
	'cyan1',
	'cyan2',
	'cyan3',
	'cyan4',
	'dark cyan',
	'DarkCyan',
	'DarkSlateGray3',
	'DarkSlateGray4',
	'DarkSlateGray1',
	'DarkSlateGray2',
	'dark slate gray',
	'dark slate grey',
	'DarkSlateGray',
	'DarkSlateGrey',
	'PaleTurquoise2',
	'PaleTurquoise3',
	'PaleTurquoise1',
	'pale turquoise',
	'PaleTurquoise',
	'PaleTurquoise4',
	'light cyan',
	'LightCyan',
	'LightCyan1',
	'LightCyan2',
	'LightCyan3',
	'LightCyan4',
	'azure',
	'azure1',
	'azure2',
	'azure3',
	'azure4',
	'medium turquoise',
	'MediumTurquoise',
	'light sea green',
	'LightSeaGreen',
	'turquoise',
	'aquamarine2',
	'aquamarine4',
	'aquamarine',
	'aquamarine1',
	'aquamarine3',
	'medium aquamarine',
	'MediumAquamarine',
	'medium spring green',
	'MediumSpringGreen',
	'spring green',
	'SpringGreen',
	'SpringGreen1',
	'SpringGreen2',
	'SpringGreen3',
	'SpringGreen4',
	'mint cream',
	'MintCream',
	'SeaGreen3',
	'SeaGreen2',
	'SeaGreen1',
	'sea green',
	'SeaGreen',
	'SeaGreen4',
	'medium sea green',
	'MediumSeaGreen',
	'green',
	'green1',
	'green2',
	'green3',
	'green4',
	'dark green',
	'DarkGreen',
	'lime green',
	'LimeGreen',
	'forest green',
	'ForestGreen',
	'PaleGreen1',
	'pale green',
	'PaleGreen',
	'light green',
	'LightGreen',
	'PaleGreen2',
	'PaleGreen3',
	'PaleGreen4',
	'DarkSeaGreen1',
	'DarkSeaGreen2',
	'DarkSeaGreen3',
	'DarkSeaGreen4',
	'dark sea green',
	'DarkSeaGreen',
	'honeydew',
	'honeydew1',
	'honeydew2',
	'honeydew3',
	'honeydew4',
	'chartreuse',
	'chartreuse1',
	'lawn green',
	'LawnGreen',
	'chartreuse2',
	'chartreuse3',
	'chartreuse4',
	'green yellow',
	'GreenYellow',
	'DarkOliveGreen2',
	'DarkOliveGreen1',
	'DarkOliveGreen3',
	'DarkOliveGreen4',
	'dark olive green',
	'DarkOliveGreen',
	'OliveDrab1',
	'OliveDrab2',
	'OliveDrab3',
	'yellow green',
	'YellowGreen',
	'OliveDrab4',
	'olive drab',
	'OliveDrab',
	'yellow',
	'yellow1',
	'yellow2',
	'yellow3',
	'yellow4',
	'light goldenrod yellow',
	'LightGoldenrodYellow',
	'light yellow',
	'LightYellow',
	'LightYellow1',
	'LightYellow2',
	'LightYellow3',
	'LightYellow4',
	'beige',
	'ivory',
	'ivory1',
	'ivory2',
	'ivory3',
	'ivory4',
	'khaki2',
	'khaki1',
	'khaki3',
	'khaki4',
	'dark khaki',
	'DarkKhaki',
	'LemonChiffon4',
	'pale goldenrod',
	'PaleGoldenrod',
	'khaki',
	'lemon chiffon',
	'LemonChiffon',
	'LemonChiffon1',
	'LemonChiffon2',
	'LemonChiffon3',
	'gold',
	'gold1',
	'gold2',
	'gold3',
	'gold4',
	'LightGoldenrod1',
	'light goldenrod',
	'LightGoldenrod',
	'LightGoldenrod2',
	'LightGoldenrod3',
	'LightGoldenrod4',
	'cornsilk4',
	'cornsilk2',
	'cornsilk3',
	'cornsilk',
	'cornsilk1',
	'DarkGoldenrod4',
	'DarkGoldenrod1',
	'DarkGoldenrod2',
	'DarkGoldenrod3',
	'dark goldenrod',
	'DarkGoldenrod',
	'goldenrod3',
	'goldenrod2',
	'goldenrod4',
	'goldenrod1',
	'goldenrod',
	'floral white',
	'FloralWhite',
	'orange',
	'orange1',
	'orange2',
	'orange3',
	'orange4',
	'wheat1',
	'wheat',
	'wheat2',
	'wheat3',
	'wheat4',
	'old lace',
	'OldLace',
	'moccasin',
	'papaya whip',
	'PapayaWhip',
	'NavajoWhite2',
	'NavajoWhite4',
	'navajo white',
	'NavajoWhite',
	'NavajoWhite1',
	'NavajoWhite3',
	'blanched almond',
	'BlanchedAlmond',
	'tan',
	'antique white',
	'AntiqueWhite',
	'AntiqueWhite4',
	'burlywood1',
	'burlywood2',
	'burlywood',
	'burlywood3',
	'dark orange',
	'DarkOrange',
	'burlywood4',
	'bisque4',
	'AntiqueWhite1',
	'AntiqueWhite2',
	'bisque',
	'bisque1',
	'bisque2',
	'AntiqueWhite3',
	'bisque3',
	'DarkOrange1',
	'DarkOrange2',
	'DarkOrange3',
	'DarkOrange4',
	'tan2',
	'peru',
	'tan3',
	'linen',
	'tan1',
	'tan4',
	'peach puff',
	'PeachPuff',
	'PeachPuff1',
	'sandy brown',
	'SandyBrown',
	'PeachPuff2',
	'PeachPuff3',
	'PeachPuff4',
	'seashell2',
	'seashell4',
	'seashell3',
	'chocolate4',
	'saddle brown',
	'SaddleBrown',
	'chocolate2',
	'chocolate1',
	'chocolate3',
	'chocolate',
	'seashell',
	'seashell1',
	'sienna4',
	'sienna2',
	'sienna1',
	'sienna3',
	'sienna',
	'LightSalmon4',
	'light salmon',
	'LightSalmon',
	'LightSalmon1',
	'LightSalmon2',
	'LightSalmon3',
	'orange red',
	'OrangeRed',
	'OrangeRed1',
	'OrangeRed2',
	'OrangeRed3',
	'OrangeRed4',
	'coral',
	'dark salmon',
	'DarkSalmon',
	'salmon3',
	'salmon4',
	'salmon1',
	'salmon2',
	'tomato4',
	'coral2',
	'coral1',
	'coral3',
	'coral4',
	'tomato2',
	'tomato',
	'tomato1',
	'tomato3',
	'MistyRose4',
	'salmon',
	'misty rose',
	'MistyRose',
	'MistyRose1',
	'MistyRose2',
	'MistyRose3',
	'red',
	'red1',
	'red2',
	'red3',
	'dark red',
	'DarkRed',
	'red4',
	'firebrick2',
	'firebrick3',
	'firebrick4',
	'firebrick1',
	'firebrick',
	'brown2',
	'brown3',
	'brown1',
	'brown4',
	'brown',
	'IndianRed3',
	'IndianRed1',
	'IndianRed2',
	'IndianRed4',
	'indian red',
	'IndianRed',
	'light coral',
	'LightCoral',
	'RosyBrown1',
	'RosyBrown2',
	'RosyBrown3',
	'RosyBrown4',
	'rosy brown',
	'RosyBrown',
	'snow',
	'snow1',
	'snow2',
	'snow3',
	'snow4',
	'LightPink2',
	'LightPink1',
	'LightPink3',
	'LightPink4',
	'light pink',
	'LightPink',
	'pink',
	'pink3',
	'pink1',
	'pink2',
	'pink4',
	'PaleVioletRed2',
	'PaleVioletRed3',
	'PaleVioletRed1',
	'pale violet red',
	'PaleVioletRed',
	'PaleVioletRed4',
	'lavender blush',
	'LavenderBlush',
	'LavenderBlush1',
	'LavenderBlush3',
	'LavenderBlush2',
	'maroon',
	'LavenderBlush4',
	'HotPink3',
	'VioletRed1',
	'VioletRed2',
	'VioletRed3',
	'VioletRed4',
	'HotPink2',
	'HotPink1',
	'hot pink',
	'HotPink',
	'HotPink4',
	'DeepPink4',
	'DeepPink2',
	'deep pink',
	'DeepPink',
	'DeepPink1',
	'DeepPink3',
	'medium violet red',
	'MediumVioletRed',
	'violet red',
	'VioletRed',
	'maroon3',
	'maroon2',
	'maroon4',
	'maroon1',
	'orchid1',
	'orchid2',
	'orchid3',
	'orchid4',
	'orchid',
	'magenta',
	'magenta1',
	'magenta2',
	'magenta3',
	'dark magenta',
	'DarkMagenta',
	'magenta4',
	'violet',
	'plum',
	'plum2',
	'plum3',
	'plum1',
	'plum4',
	'thistle1',
	'thistle2',
	'thistle',
	'thistle3',
	'thistle4',
	'gray100',
	'grey100',
	'white',
	'gray99',
	'grey99',
	'gray98',
	'grey98',
	'gray97',
	'grey97',
	'gray96',
	'grey96',
	'white smoke',
	'WhiteSmoke',
	'gray95',
	'grey95',
	'gray94',
	'grey94',
	'gray93',
	'grey93',
	'gray92',
	'grey92',
	'gray91',
	'grey91',
	'gray90',
	'grey90',
	'gray89',
	'grey89',
	'gray88',
	'grey88',
	'gray87',
	'grey87',
	'gainsboro',
	'gray86',
	'grey86',
	'gray85',
	'grey85',
	'gray84',
	'grey84',
	'gray83',
	'grey83',
	'light gray',
	'light grey',
	'LightGray',
	'LightGrey',
	'gray82',
	'grey82',
	'gray81',
	'grey81',
	'gray80',
	'grey80',
	'gray79',
	'grey79',
	'gray78',
	'grey78',
	'gray77',
	'grey77',
	'gray76',
	'grey76',
	'gray75',
	'grey75',
	'gray',
	'grey',
	'gray74',
	'grey74',
	'gray73',
	'grey73',
	'gray72',
	'grey72',
	'gray71',
	'grey71',
	'gray70',
	'grey70',
	'gray69',
	'grey69',
	'gray68',
	'grey68',
	'gray67',
	'grey67',
	'dark gray',
	'dark grey',
	'DarkGray',
	'DarkGrey',
	'gray66',
	'grey66',
	'gray65',
	'grey65',
	'gray64',
	'grey64',
	'gray63',
	'grey63',
	'gray62',
	'grey62',
	'gray61',
	'grey61',
	'gray60',
	'grey60',
	'gray59',
	'grey59',
	'gray58',
	'grey58',
	'gray57',
	'grey57',
	'gray56',
	'grey56',
	'gray55',
	'grey55',
	'gray54',
	'grey54',
	'gray53',
	'grey53',
	'gray52',
	'grey52',
	'gray51',
	'grey51',
	'gray50',
	'grey50',
	'gray49',
	'grey49',
	'gray48',
	'grey48',
	'gray47',
	'grey47',
	'gray46',
	'grey46',
	'gray45',
	'grey45',
	'gray44',
	'grey44',
	'gray43',
	'grey43',
	'gray42',
	'grey42',
	'dim gray',
	'dim grey',
	'DimGray',
	'DimGrey',
	'gray41',
	'grey41',
	'gray40',
	'grey40',
	'gray39',
	'grey39',
	'gray38',
	'grey38',
	'gray37',
	'grey37',
	'gray36',
	'grey36',
	'gray35',
	'grey35',
	'gray34',
	'grey34',
	'gray33',
	'grey33',
	'gray32',
	'grey32',
	'gray31',
	'grey31',
	'gray30',
	'grey30',
	'gray29',
	'grey29',
	'gray28',
	'grey28',
	'gray27',
	'grey27',
	'gray26',
	'grey26',
	'gray25',
	'grey25',
	'gray24',
	'grey24',
	'gray23',
	'grey23',
	'gray22',
	'grey22',
	'gray21',
	'grey21',
	'gray20',
	'grey20',
	'gray19',
	'grey19',
	'gray18',
	'grey18',
	'gray17',
	'grey17',
	'gray16',
	'grey16',
	'gray15',
	'grey15',
	'gray14',
	'grey14',
	'gray13',
	'grey13',
	'gray12',
	'grey12',
	'gray11',
	'grey11',
	'gray10',
	'grey10',
	'gray9',
	'grey9',
	'gray8',
	'grey8',
	'gray7',
	'grey7',
	'gray6',
	'grey6',
	'gray5',
	'grey5',
	'gray4',
	'grey4',
	'gray3',
	'grey3',
	'gray2',
	'grey2',
	'gray1',
	'grey1',
	'black',
	'gray0',
	'grey0',
}

local SQUARE_LENGTH = math.floor(1080/math.sqrt(#colors_array))

local NUM_COLS = math.ceil(1080/SQUARE_LENGTH)
local NUM_ROWS = math.ceil(#colors_array/NUM_COLS)

local function get_x_y_from_position(i)
    local x = ( (i-1) % NUM_COLS ) * SQUARE_LENGTH
    local y = ( math.floor((i-1)/NUM_COLS) ) * SQUARE_LENGTH
    return x,y
end

local function rgb_to_hsl(r,g,b)
    r = r/255
    g = g/255
    b = b/255
    local max_color = math.max(r, g, b);
    local min_color = math.min(r, g, b);

    local h,s,l

    l = (max_color+min_color)/2

    if(max_color == min_color) then
        s = 0.0
    else
        if l<0.5 then
            s = (max_color-min_color)/(max_color+min_color)
        else
            s = (max_color-min_color)/(2.0-(max_color-min_color))
        end
    end

    if(max_color == min_color) then
        h = 0
    elseif(r == max_color) then
        h = (g-b)/(max_color-min_color)
    elseif(g == max_color) then
        h = 2.0 + (b-r)/(max_color-min_color)
    else
        h = 4.0 + (r-g)/(max_color-min_color)
    end


    return string.format("%0.0f°",h*60),string.format("%0.0f%%",s*100),string.format("%0.0f%%",l*100)
end

local function rgb_to_hex(r,g,b)
    return string.format("#%02X%02X%02X",r,g,b)
end


local color_grid = Group { x = 2, y = 2}
for i=1,#colors_array do
    local x,y = get_x_y_from_position(i)
    color_grid:add(Rectangle { name = colors_array[i], color = colors_array[i], x = x, y = y, width = SQUARE_LENGTH, height = SQUARE_LENGTH })
end

screen:add(Rectangle { color = "red", size = { NUM_COLS*SQUARE_LENGTH+5, NUM_ROWS*SQUARE_LENGTH+4 } })
screen:add(color_grid)
screen:show()

local info_color_label = Text { name = "label", font = "Blue Highway 48px", text = "Color name:", x = 0, y = 0, color = "white" }
local info_color_name = Text { name = "color_name", font = "Blue Highway 90px", text = '"'..colors_array[1]..'"', x = 0, y = 40, color = "white" }

local info_color_r_label = Text { name = "label", font = "Blue Highway 48px", text = "Red", x = 0, y = 140, color = "white" }
local info_color_g_label = Text { name = "label", font = "Blue Highway 48px", text = "Green", x = 180, y = 140, color = "white" }
local info_color_b_label = Text { name = "label", font = "Blue Highway 48px", text = "Blue", x = 360, y = 140, color = "white" }
local info_color_r = Text { name = "color_r", font = "Blue Highway 90px", text = "123", x = 0, y = 170, color = "white" }
local info_color_g = Text { name = "color_g", font = "Blue Highway 90px", text = "123", x = 180, y = 170, color = "white" }
local info_color_b = Text { name = "color_b", font = "Blue Highway 90px", text = "123", x = 360, y = 170, color = "white" }

local info_color_h_label = Text { name = "label", font = "Blue Highway 48px", text = "Hue", x = 0, y = 270, color = "white" }
local info_color_s_label = Text { name = "label", font = "Blue Highway 48px", text = "Saturation", x = 180, y = 270, color = "white" }
local info_color_l_label = Text { name = "label", font = "Blue Highway 48px", text = "Luminance", x = 360, y = 270, color = "white" }
local info_color_h = Text { name = "color_h", font = "Blue Highway 90px", text = "123", x = 0, y = 300, color = "white" }
local info_color_s = Text { name = "color_s", font = "Blue Highway 90px", text = "123", x = 180, y = 300, color = "white" }
local info_color_l = Text { name = "color_l", font = "Blue Highway 90px", text = "123", x = 360, y = 300, color = "white" }

local info_color_rgb_label = Text { name = "label", font = "Blue Highway 48px", text = "RGB Hex", x = 0, y = 400, color = "white" }
local info_color_rgb = Text { name = "color_rgb", font = "Blue Highway 90px", text = "#aabbcc", x = 0, y = 430, color = "white" }

local info_display = Group {
                                name = "Info display",
                                x = 1180, y = 100,
                            }
info_color_r.text, info_color_g.text, info_color_b.text = unpack(color_grid:find_child(colors_array[1]).color)
info_color_h.text, info_color_s.text, info_color_l.text = rgb_to_hsl(unpack(color_grid:find_child(colors_array[1]).color))
info_color_rgb.text = rgb_to_hex(unpack(color_grid:find_child(colors_array[1]).color))

info_display:add(info_color_label,info_color_name)
info_display:add(info_color_r_label,info_color_g_label,info_color_b_label,info_color_r,info_color_g,info_color_b)
info_display:add(info_color_h_label,info_color_s_label,info_color_l_label,info_color_h,info_color_s,info_color_l)
info_display:add(info_color_rgb_label,info_color_rgb)
screen:add(info_display)

local CURSOR_SIZE = 8
local cursor_highlight = Group {
                                    name = "cursor",
                                    children = {
                                        Rectangle { color = "white", width = CURSOR_SIZE, height = CURSOR_SIZE, x = SQUARE_LENGTH/2-CURSOR_SIZE, y = SQUARE_LENGTH/2-CURSOR_SIZE },
                                        Rectangle { color = "black", width = CURSOR_SIZE, height = CURSOR_SIZE, x = SQUARE_LENGTH/2, y = SQUARE_LENGTH/2-CURSOR_SIZE },
                                        Rectangle { color = "white", width = CURSOR_SIZE, height = CURSOR_SIZE, x = SQUARE_LENGTH/2, y = SQUARE_LENGTH/2 },
                                        Rectangle { color = "black", width = CURSOR_SIZE, height = CURSOR_SIZE, x = SQUARE_LENGTH/2-CURSOR_SIZE, y = SQUARE_LENGTH/2 },
                                    },
                                    x = 0, y = 0, z = 1,
                                }
color_grid:add(cursor_highlight)

local current_position = 1
function screen:on_key_down(key)
    if(key == keys.Up) then
        if current_position - NUM_COLS >= 1 then
            current_position = current_position - NUM_COLS
        end
    elseif(key == keys.Down) then
        if current_position + NUM_COLS <= #colors_array then
            current_position = current_position + NUM_COLS
        end
    elseif(key == keys.Left) then
        if current_position > 1 then
            current_position = current_position - 1
        end
    elseif(key == keys.Right) then
        if current_position < #colors_array then
            current_position = current_position + 1
        end
    end
    cursor_highlight.x, cursor_highlight.y = get_x_y_from_position(current_position)
    info_color_name.text = '"'..colors_array[current_position]..'"'
    info_color_r.text, info_color_g.text, info_color_b.text = unpack(color_grid:find_child(colors_array[current_position]).color)
    info_color_h.text, info_color_s.text, info_color_l.text = rgb_to_hsl(unpack(color_grid:find_child(colors_array[current_position]).color))
    info_color_rgb.text = rgb_to_hex(unpack(color_grid:find_child(colors_array[current_position]).color))
end
