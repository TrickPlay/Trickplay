
set( ENGINE_SRC		${PROJECT_SOURCE_DIR}/engine )
set( LB_GENERATOR       ${ENGINE_SRC}/lb/bin/lb.py )

#------------------------------------------------------------------------------
# Include directories
#------------------------------------------------------------------------------

TP_FIND_INCLUDE( expat.h 				ENGINE_INCLUDE_DIRS )
TP_FIND_INCLUDE( curl/curl.h 				ENGINE_INCLUDE_DIRS )
TP_FIND_INCLUDE( glib-2.0 glib.h 			ENGINE_INCLUDE_DIRS )
TP_FIND_LIB_INCLUDE( glib-2.0 glibconfig.h		ENGINE_INCLUDE_DIRS )
TP_FIND_INCLUDE( cairo cairo.h				ENGINE_INCLUDE_DIRS )
TP_FIND_INCLUDE( pango-1.0 pango/pango.h		ENGINE_INCLUDE_DIRS )
TP_FIND_INCLUDE( clutter-1.0 clutter/clutter.h 		ENGINE_INCLUDE_DIRS )
TP_FIND_INCLUDE( lua5.1 lua.h				ENGINE_INCLUDE_DIRS )
TP_FIND_INCLUDE( avahi-core core.h			ENGINE_INCLUDE_DIRS )
TP_FIND_INCLUDE( avahi-glib glib-watch.h		ENGINE_INCLUDE_DIRS )
TP_FIND_INCLUDE( avahi-common watch.h			ENGINE_INCLUDE_DIRS )
TP_FIND_INCLUDE( fontconfig fontconfig.h                ENGINE_INCLUDE_DIRS )
TP_FIND_INCLUDE( FreeImage.h                            ENGINE_INCLUDE_DIRS )

TP_ORDER_PATHS( ENGINE_INCLUDE_DIRS include )

include_directories(
    
    ${ENGINE_SRC}/public/include
    ${ENGINE_SRC}/source
    ${ENGINE_SRC}/lb/include
    
    ${ENGINE_INCLUDE_DIRS}    
)

#------------------------------------------------------------------------------
# Libraries
#------------------------------------------------------------------------------

set(
    ENGINE_LIBRARY_NAMES
    
    #--------------
    # glib
    #--------------

    gthread-2.0 gobject-2.0 gmodule-2.0 glib-2.0 gio-2.0
    
    #--------------
    # expat
    #--------------
    
    expat
    
    #--------------
    # pango/cairo/fontconfig
    #--------------
    
    cairo pango-1.0 pangocairo-1.0 fontconfig

    #--------------
    # curl
    #--------------
    
    ssl crypto cares curl

    #--------------
    # tokyo
    #--------------
    
    tokyocabinet
    
    #--------------
    # avahi
    #--------------
        
    avahi-core avahi-common avahi-glib
    
    #--------------
    # sqlite
    #--------------
    
    sqlite3
    
    #--------------
    # lua
    #--------------
    
    lua5.1
    lua
    
    #--------------
    # FreeImage
    #--------------
    
    freeimage
)

#------------------------------------------------------------------------------
# Use the right clutter libraries based on the backend used

if (TP_CLUTTER_BACKEND_EGL)

    list(
        APPEND ENGINE_LIBRARY_NAMES
        
        clutter-eglnative-1.0
    )

else (TP_CLUTTER_BACKEND_EGL)

    list(
        APPEND ENGINE_LIBRARY_NAMES
        
        clutter-glx-1.0 GL X11 Xext Xdamage Xcomposite Xfixes
    )

endif (TP_CLUTTER_BACKEND_EGL)

#------------------------------------------------------------------------------

foreach( LIB ${ENGINE_LIBRARY_NAMES} )
    TP_FIND_LIBRARY( ${LIB} ENGINE_LIBRARIES )
endforeach( LIB )

#------------------------------------------------------------------------------
# all warnings
#------------------------------------------------------------------------------

set(CMAKE_CXX_FLAGS "-Wall -Wno-unused-variable")

#------------------------------------------------------------------------------
# log domain for glib log functions
#------------------------------------------------------------------------------

add_definitions( -DG_LOG_DOMAIN="TrickPlay" ) 

#------------------------------------------------------------------------------
# Add a -D for the clutter backend
#------------------------------------------------------------------------------

if (TP_CLUTTER_BACKEND_EGL)

    add_definitions( -DTP_CLUTTER_BACKEND_EGL=1)

endif (TP_CLUTTER_BACKEND_EGL)

#------------------------------------------------------------------------------
# Files generated by LB
#------------------------------------------------------------------------------

set( BINDINGS_SRC ${ENGINE_SRC}/bindings )

set(

    LB_FILES
    
    ${BINDINGS_SRC}/timer.lb
    ${BINDINGS_SRC}/url_request.lb
    ${BINDINGS_SRC}/local_hash.lb
    ${BINDINGS_SRC}/globals.lb
    ${BINDINGS_SRC}/app.lb
    ${BINDINGS_SRC}/system.lb
    ${BINDINGS_SRC}/settings.lb
    ${BINDINGS_SRC}/profile.lb
    ${BINDINGS_SRC}/xml.lb
    ${BINDINGS_SRC}/restricted.lb
    ${BINDINGS_SRC}/apps.lb
    ${BINDINGS_SRC}/controllers.lb
    ${BINDINGS_SRC}/mediaplayer.lb
    ${BINDINGS_SRC}/clutter.lb
)

foreach( LB_FILE ${LB_FILES} )

	get_filename_component( LB_FILE_NAME ${LB_FILE} NAME )

	list( APPEND GENERATED_FILES ${LB_FILE_NAME}.cpp )
        
	file( TO_NATIVE_PATH ${LB_FILE} NATIVE_LB_FILE )
	
	add_custom_command( 
		OUTPUT ${LB_FILE_NAME}.cpp
		COMMAND ${LB_GENERATOR} -l ${NATIVE_LB_FILE}
		DEPENDS ${LB_FILE} ${LB_GENERATOR} )

endforeach( LB_FILE )

set_source_files_properties( ${GENERATED_FILES} PROPERTIES GENERATED TRUE )

#------------------------------------------------------------------------------

add_library(
    
    tpcore
    
    SHARED
    
    ${ENGINE_SRC}/source/notify.cpp
    ${ENGINE_SRC}/source/context.cpp
    ${ENGINE_SRC}/source/app.cpp    
    ${ENGINE_SRC}/source/network.cpp
    ${ENGINE_SRC}/source/storage.cpp
    ${ENGINE_SRC}/source/console.cpp
    ${ENGINE_SRC}/source/db.cpp
    ${ENGINE_SRC}/source/sysdb.cpp
    ${ENGINE_SRC}/source/mdns.cpp
    ${ENGINE_SRC}/source/controllers.cpp
    ${ENGINE_SRC}/source/keys.cpp
    ${ENGINE_SRC}/source/mediaplayers.cpp
    ${ENGINE_SRC}/source/server.cpp
    ${ENGINE_SRC}/source/images.cpp    
    ${ENGINE_SRC}/source/signal_collector.cpp    

    ${GENERATED_FILES}
    ${ENGINE_SRC}/lb/src/lb.c
)

set_target_properties(
    
    tpcore
    
    PROPERTIES
    LINK_INTERFACE_LIBRARIES tpcore
    COMPILE_FLAGS -fvisibility=hidden
)


target_link_libraries(

    tpcore
    
    ${ENGINE_LIBRARIES}
    m
    dl    
)



