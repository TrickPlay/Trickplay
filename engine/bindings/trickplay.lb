[[
#include <cstdlib>

#include "util.h"
#include "versions.h"
#include "app.h"
#include "context.h"
#include "sysdb.h"
]]

/*
    Global: trickplay
    
    The trickplay global variable stores information associated with the TrickPlay Engine.
*/

global trickplay [[void*]]
{
    /*
        Property: version

        The version property is a string containing the TrickPlay Engine version number in the format "MM.mm.pp", where MM is the major version, mm is the minor version, and pp is the patch version.
        
        *See Also:* the <build> property
    */

    readonly string version
        [[
            String v( Util::format( "%d.%d.%d", TP_MAJOR_VERSION, TP_MINOR_VERSION, TP_PATCH_VERSION ) );

            version = v.c_str();
        ]];
        
    /*
        Property: build
        
        The build property is a string containing the TrickPlay Engine build number. The build number comprises the Engine's <version> number followed by additional identification data. The additional data is uninterpretable; for this reason, applications should use the version stored in the version property.
        
        *See Also:* the <version> property
    */        

    readonly string build
        [[
            build = TP_GIT_VERSION;
        ]];

    /*
       Property: production
       
       The production property is a boolean flag indicating whether the TrickPlay Engine is a production or a debug release (true=production).
    */

    readonly bool production
        [[
#ifdef TP_PRODUCTION
            production = true;
#else
            production = false;
#endif
        ]];

    /*
        Property: profiling
        
        The profiling property is a boolean flag indicating whether or not the TrickPlay Engine was built with application profiling enabled (true=profiling enabled).
    */

    readonly bool profiling
        [[
#ifdef TP_PROFILING
            profiling = true;
#else
            profiling = false;
#endif
        ]];

    /*
        Property: libraries
        
        The libraries property is a table that contains the version numbers in string format for many of the libraries incorporated into the TrickPlay Engine.
        
        *Code Example:* Output to the TrickPlay Console the version numbers of the TrickPlay Engine's libraries
        
        	(code)
        	dumptable( trickplay.libraries )
        	(end)
    */

    readonly table libraries
        [[
            lua_newtable( L );
            int t = lua_gettop( L );

            VersionMap v = get_versions();

            for ( VersionMap::iterator it = v.begin(); it != v.end(); ++it )
            {
                lua_newtable( L );
                int vt = lua_gettop( L );
                int i = 1;

                for ( StringVector::iterator vit = it->second.begin(); vit != it->second.end(); ++vit , ++i )
                {
                    lua_pushstring( L , vit->c_str() );
                    lua_rawseti( L , vt , i );
                }

                lua_setfield( L , t , it->first.c_str() );
            }
        ]];

    /*
        Property: config
        
        In debug versions of the TrickPlay Engine, the config property is a table that contains the Engine's configuration parameters as key/value pairs, where key is the string configuration key and value is the configuration key's setting in string format.
        
        In production versions of the Engine, configuration keys are considered private, so the config property is an empty table.
        
        To determine whether the TrickPlay Engine is a production or debug version, refer to the <production> property.
        
        *Code Example:* Output to the TrickPlay Console the table of configuration keys
        
        	(code)
        	dumptable( trickplay.config )
        	(end)

		*See Also:* the <production> property
    */

    readonly table config
        [[
            lua_newtable( L );

            // In production, we return an empty table, since config is a bit
            // private and could reveal paths to an app.

#ifndef TP_PRODUCTION

            StringMap config( App::get( L )->get_context()->get_config() );

            for ( StringMap::const_iterator it = config.begin(); it != config.end(); ++it )
            {
                lua_pushstring( L , it->first.c_str() );
                lua_pushstring( L , it->second.c_str() );
                lua_rawset( L , -3 );
            }

#endif

        ]];

    /*
       	Property: system
       
       	The system property is a table that contains information about the system the TrickPlay Engine is running on.
       
       	The table is formatted as key/value pairs, where key is one of the strings listed below, and value is the key's setting in string format. The table will contain all the following keys, but individual settings may be empty strings.
       
       		"name" - system's name
       		"version" - system's version number in string format
       		"country" - system's country code
       		"language" - system's language code
       		"uuid" - system's Universal Unique ID string
       
		*Code Example:* Output to the TrickPlay Console the contents of the system table

			(code)
			dumptable( trickplay.system )
			(end)
    */

    readonly table system
        [[
            lua_newtable( L );

            TPContext * ctx = App::get( L )->get_context();

            lua_pushstring( L , "name" );
            lua_pushstring( L , ctx->get( TP_SYSTEM_NAME , "" ) );
            lua_rawset( L , -3 );

            lua_pushstring( L , "version" );
            lua_pushstring( L , ctx->get( TP_SYSTEM_VERSION , "" ) );
            lua_rawset( L , -3 );

            lua_pushstring( L , "country" );
            lua_pushstring( L , ctx->get( TP_SYSTEM_COUNTRY , "" ) );
            lua_rawset( L , -3 );

            lua_pushstring( L , "language" );
            lua_pushstring( L , ctx->get( TP_SYSTEM_LANGUAGE , "" ) );
            lua_rawset( L , -3 );

            lua_pushstring( L , "uuid" );
            lua_pushstring( L , ctx->get_db()->get_string( TP_DB_UUID , "" ).c_str() );
            lua_rawset( L , -3 );
        ]];

    /*
        Property: fonts
        
        The fonts property is a table that contains the family names of the fonts available to the application.
        
		*Code Example:* Output to the TrickPlay Console the list of available fonts
        
        	(code)
        	dumptable( trickplay.fonts )
        	(end)
    */
    
    readonly table fonts
        [[
            StringSet names;
            PangoFontFamily ** families;
            int n_families;
            PangoFontMap *fontmap = clutter_get_font_map();

            pango_font_map_list_families ( fontmap, & families, & n_families );

            for ( int i = 0; i < n_families; ++i )
            {
                PangoFontFamily * family = families[i];

                const char * family_name = pango_font_family_get_name ( family );

                names.insert( family_name );
            }

            g_free( families );

            lua_newtable( L );
            
            int i = 1;
            
            for ( StringSet::const_iterator it = names.begin(); it != names.end(); ++it , ++i )
            {
                lua_pushstring( L , it->c_str() );
                lua_rawseti( L , -2 , i );
            }
            
        ]];
    
    /*
        Function: check_version
        
        The check_version() function checks whether or not the current TrickPlay Engine version is equal to or later than a specified version (true=equal or later).
        
        *Argument:*
        
        	version - string version number to compare to current Engine version. Format should be "MM.mm.pp" where MM is the major version, mm is the minor version, and pp is the patch version.
        	
        *Return Value:* If current Engine version is equal to or later than specified version, returns true. Else returns false.
        
        *Code Example:* Check that appropriate Engine version is running
        
        	(code)
			if( trickplay:check_version( "1.24.0" ) == false )then
				print( "This program requires TrickPlay Engine version 1.24.0 or later" )
        		exit();
        	end
        	(end)
    */

    bool check_version( string version )
        [[
            int major = 0;
            int minor = 0;
            int micro = 0;

            gchar * * parts = g_strsplit( version , "." , 3 );

            guint count = g_strv_length( parts );

            if ( count >= 1 )
            {
                major = atoi( parts[ 0 ] );

                if ( count >= 2 )
                {
                    minor = atoi( parts[ 1 ] );

                    if ( count >= 3 )
                    {
                        micro = atoi( parts[ 2 ] );
                    }
                }
            }

            g_strfreev( parts );

            result = ( TP_MAJOR_VERSION > (major) ||
             (TP_MAJOR_VERSION == (major) && TP_MINOR_VERSION > (minor)) ||
             (TP_MAJOR_VERSION == (major) && TP_MINOR_VERSION == (minor) && TP_PATCH_VERSION >= (micro)));
        ]];

}
