[[
#include "context.h"

void profile_changing_handler(const char *,void * l);
void profile_changed_handler(const char *,void * l);
]]

# Global: profile
# Contains information about the current profile and events to know when it is
# about to change or has changed.

global profile [[TPContext*]]
{
    profile()
        [[
            *self=TPContext::get_from_lua(L);
            (*self)->add_notification_handler(TP_NOTIFICATION_PROFILE_CHANGING,profile_changing_handler,L);
            (*self)->add_notification_handler(TP_NOTIFICATION_PROFILE_CHANGED,profile_changed_handler,L);            
        ]];
        
    ~profile()
        [[
        ]];

    # Property: id
    # The ID of the current profile
    
    readonly int id
        [[id=self->get_int(PROFILE_ID);]];
    
    # Property: name
    # The name of the current profile
    
    readonly string name
        [[name=self->get(PROFILE_NAME);]];
        
    # Event: on_changing
    # This callback is invoked immediately before the current profile is changed.
    
    callback on_changing;
    
    # Event: on_changed
    # This callback is invoked once the current profile has changed.
    
    callback on_changed;
}

[[
void profile_changing_handler(const char *,void * l)
{
    lua_State * L=(lua_State*)l;
    invoke_profile_on_changing(L,TPContext::get_from_lua(L),0,0);
}

void profile_changed_handler(const char *,void * l)
{
    lua_State * L=(lua_State*)l;
    invoke_profile_on_changed(L,TPContext::get_from_lua(L),0,0);
}
]]