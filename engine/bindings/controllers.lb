
[[
#include "controller_delegates.h"
]]

#==============================================================================
/*
	Global: controllers

	The TrickPlay SDK libraries enable a program to access external devices, such as a TV remote control and keyboard. Access to a connected iPhone and iPad is also available.

	Access to connected devices is provided by the controllers global variable. A program can have the controllers variable notify the program when a new device connects to the system by hooking the controller's <on_controller_connected> event handler. The controllers variable also enables a program to enumerate the list of all connected devices by accessing its <connected> property.

*/

global controllers [[ControllerListDelegate*]]
{
    controllers()
        [[
            self=lb_construct( ControllerListDelegate , new ControllerListDelegate(L) );
        ]];

    ~controllers()
        [[
            delete self;
        ]];

    /*
    	Property: connected

    	The connected property maintains a table of connected external devices. Each entry in the table is a <Controller> object. The connected table can be retrieved, but entries cannot be added or removed from it.

    	*Code Example:* Output the name of each connected device

    	(code)
    	-- Iterate through each connected external device
    	print( "Connected devices:" )
    	for i, device in ipairs( controllers.connected ) do
    		print( "   ", device.name )
    	end
    	(end)

    	*See Also:* the <Controller> interface
    */

    readonly table connected
        [[
            self->push_connected();
        ]];

    /*
       Function: start_pointer

       The start_pointer() function instructs all connected devices to start sending pointer events if such events are applicable to the device, such as with a mouse. Events will be directed to objects, such as a Rectangle or Image, provided the object has its <UIElement.reactive> property set to true. Pointer events include <UIElement.on_button_down>, <UIElement.on_motion>, <UIElement.on_enter> and many others. Refer to the event handlers described in the <UIElement> section for complete details.

		*Arguments:* None

		*Return Value:* None

		*Code Example:* Instruct connected devices to send pointer events. Handle the on_enter() and on_leave() events to output a simple message.

		(code)
		-- Define on_enter() event handler
		-- Both rectangles will use this handler
		function hookOnEnter( self, x, y )
			-- Device pointer has entered the object's display space
			print( "Pointer is over ", self.name )
		end

		-- Define on_leave() event handler; used by both rectangles
		function hookOnLeave( self, x, y )
			-- Device pointer has left the object's display space
			print( "Pointer has left ", self.name )
		end

		-- Define two rectangles of different colors
		goldRect = Rectangle( { name = "GoldRect",
		                        position = { 100, 100 },
		                        color = "Gold",
		                        size = { 100, 100 },
		                        reactive = true,
		                        on_enter = hookOnEnter,   -- hooks into the event handlers
		                        on_leave = hookOnLeave,
		                      } )
		blueRect = Rectangle( { name = "BlueRect",
		                        position = { 400, 100 },
		                        color = "DodgerBlue",
		                        size = { 100, 100 },
		                        reactive = true,
		                        on_enter = hookOnEnter,
		                        on_leave = hookOnLeave,
		                      } )

		-- Add the rectangles to the screen and show the screen
		screen:add( goldRect, blueRect )
		screen:show()

		-- Enable pointer events
		controllers:start_pointer()
		(end)
    */

    start_pointer()
        [[
            self->start_pointer();
        ]];

    /*
    	Event Handler: on_controller_connected

    	The on_controller_connected event handler is invoked whenever a new device connects to the system.

    	*Prototype:*

    		(code)
    		void on_controller_connected( controllers, controller )
    		(end)

    	*Arguments:*

    		controllers - the <controllers> global variable
    		controller - the connected <Controller> object

    	*Return Value:* None

    	*Code Example:* Print a message whenever a new device connects to the system

    		(code)
    		-- Define the event handler
    		function hookOnConnected( controllers, controller )
    			print( "The ", controller.name, " controller has connected." )
    		end

    		-- Hook the handler into controllers
    		controllers.on_controller_connected = hookOnConnected()
    		(end)

    	*See Also:* the <Controller> interface
    */

    function on_controller_connected
        [[
            return UserData::get( L )->get_last_callback( (char*) "on_controller_connected" , L );
        ]]
        [[
            UserData::get( L )->set_last_callback( (char*) "on_controller_connected" , L );
        ]];

    int add_oncontrollerconnected_listener( function f )
        [[
            result = UserData::get( L )->add_callback( (char*) "on_controller_connected" , L );
        ]];

    remove_oncontrollerconnected_listener( int ref )
        [[
            UserData::get( L )->remove_callback( (char*) "on_controller_connected" , L );
        ]];
}

#==============================================================================

[[

]]

#==============================================================================
