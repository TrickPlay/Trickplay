
module controllers_module;

[[
#include "app.h"    
#include "context.h"
#include "controller_list.h"
]]

#==============================================================================

[[

class ControllerListDelegate;

class ControllerDelegate : public Controller::Delegate
{
public:
    
    ControllerDelegate(lua_State * _L,Controller * _controller,ControllerListDelegate * _list);
    ~ControllerDelegate();
    
    inline Controller * get_controller()
    {
        return controller;
    }
    
    inline bool has_cap(unsigned int cap)
    {
        return controller->get_capabilities()&cap;        
    }
    
    //.........................................................................
    // Delegate functions
    
    virtual void disconnected();
    virtual void key_down(unsigned int key_code,unsigned long int unicode);
    virtual void key_up(unsigned int key_code,unsigned long int unicode);
    virtual void accelerometer(double x,double y,double z);
    virtual void click(int x,int y);
    virtual void touch_down(int x,int y);
    virtual void touch_move(int x,int y);  
    virtual void touch_up(int x,int y);    
    virtual void ui_event(const String & parameters);
    
private:
    
    lua_State *                 L;
    Controller *                controller;
    ControllerListDelegate *    list;
};

]]

#==============================================================================

[[

class ControllerListDelegate : public ControllerList::Delegate
{
public:
    
    ControllerListDelegate(lua_State * l);
    ~ControllerListDelegate();

    //.........................................................................
    // Delegate function
    
    virtual void connected(Controller * controller);
    
    void push_connected();
    
    void proxy_destroyed(ControllerDelegate * proxy);
    
private:

    lua_State *         L;
    ControllerList *    list;
    
    typedef std::set<ControllerDelegate*> ProxySet;
    
    ProxySet            proxies;
};
    

]]


#==============================================================================

interface controller [[ControllerDelegate*]]
{
    controller()
        [[
            *self=(ControllerDelegate*)lua_touserdata(L,-2);
        ]];
        
    ~controller()
        [[
            delete self;    
        ]];
        
    readonly bool is_connected
        [[
            is_connected=self->get_controller()->is_connected();    
        ]];
        
    readonly string name
        [[
            String s(self->get_controller()->get_name());
            name=s.c_str();    
        ]];
        
    readonly bool has_keys
        [[
            has_keys=self->has_cap(TP_CONTROLLER_HAS_KEYS);    
        ]];

    readonly bool has_accelerometer
        [[
            has_accelerometer=self->has_cap(TP_CONTROLLER_HAS_ACCELEROMETER);
        ]];
        
    readonly bool has_clicks
        [[
            has_clicks=self->has_cap(TP_CONTROLLER_HAS_CLICKS);
        ]];
        
    readonly bool has_touches
        [[
            has_touches=self->has_cap(TP_CONTROLLER_HAS_TOUCHES);    
        ]];
        
    readonly bool has_multiple_choice
        [[
            has_multiple_choice=self->has_cap(TP_CONTROLLER_HAS_MULTIPLE_CHOICE); 
        ]];
        
    readonly bool has_sound
        [[
            has_sound=self->has_cap(TP_CONTROLLER_HAS_SOUND);    
        ]];
        
    readonly bool has_ui
        [[
            has_ui=self->has_cap(TP_CONTROLLER_HAS_UI);
        ]];
        
    readonly bool has_text_entry
        [[
            has_text_entry=self->has_cap(TP_CONTROLLER_HAS_TEXT_ENTRY);
        ]];
        
    readonly table ui_size
        [[
            unsigned int w;
            unsigned int h;
            
            self->get_controller()->get_ui_size(w,h);
            
            lua_newtable(L);
            lua_pushinteger(L,w);
            lua_rawseti(L,-2,1);
            lua_pushinteger(L,h);
            lua_rawseti(L,-2,2);
        ]];
        
    readonly table input_size
        [[
            unsigned int w;
            unsigned int h;
            
            self->get_controller()->get_input_size(w,h);
            
            lua_newtable(L);
            lua_pushinteger(L,w);
            lua_rawseti(L,-2,1);
            lua_pushinteger(L,h);
            lua_rawseti(L,-2,2);
        ]];
    
        
    bool reset()
        [[
            result=self->get_controller()->reset();    
        ]];
        
    bool start_accelerometer(string filter,double interval)
        [[
            Controller::AccelerometerFilter f=Controller::NONE;
            
            if (filter)
            {
                if (*filter=='L'||*filter=='l')
                {
                    f=Controller::LOW;
                }
                else if (*filter=='H'||*filter=='h')
                {
                    f=Controller::HIGH;
                }
            }

            result=self->get_controller()->start_accelerometer(f,interval);
        ]];
        
    bool stop_accelerometer()
        [[
            result=self->get_controller()->stop_accelerometer();    
        ]];
        
    bool start_clicks()
        [[
            result=self->get_controller()->start_clicks();
        ]];
        
    bool stop_clicks()
        [[
            result=self->get_controller()->stop_clicks();
        ]];
        
    bool start_touches()
        [[
            result=self->get_controller()->start_touches();
        ]];
        
    bool stop_touches()
        [[
            result=self->get_controller()->stop_touches();
        ]];

    # Deprecated, use the other one
    
    bool show_multiple_choice_ui()
        [[
            g_warning("DEPRECATED CALL TO controller:show_multiple_choice_ui");
            result=false;
        ]];
        
    bool show_multiple_choice(string label,...)
        [[
            StringPairList list;
            
            int count=lua_gettop(L);
            
            for (int i=3;i+1<=count;i+=2)
            {
                const char * id=lua_tostring(L,i);
                const char * choice=lua_tostring(L,i+1);                

                if (id && choice)
                    list.push_back(StringPair(String(id),String(choice)));
            }
            
            result=list.empty()?false:self->get_controller()->show_multiple_choice(label,list);
        ]];

    bool clear_ui()
        [[
            result=self->get_controller()->clear_ui();    
        ]];
    
    # Deprecated, use the other one
    
    bool set_background(string resource)
        [[
            g_warning("DEPRECATED CALL TO controller:set_background");            
            result=false;
        ]];

    bool set_ui_background(string resource,string mode="CENTER")
        [[
            Controller::UIBackgroundMode m=Controller::CENTER;
            
            if (mode)
            {
                if (*mode=='S'||*mode=='s')
                {
                    m=Controller::STRETCH;
                }
                else if (*mode=='T'||*mode=='t')
                {
                    m=Controller::TILE;
                }
            }
            
            result=self->get_controller()->set_ui_background(resource,m);
        ]];
        
    bool set_ui_image(string resource,int x,int y,int width,int height)
        [[
            result=self->get_controller()->set_ui_image(resource,x,y,width,height);    
        ]];

    bool play_sound(string resource, int loop)
        [[
            result=self->get_controller()->play_sound(resource,loop);
        ]];

    bool stop_sound()
        [[
            result=self->get_controller()->stop_sound();
        ]];


    bool declare_resource(string resource, string url)
        [[
            result=false;
            
            bool is_uri=false;
            
            gchar * path=App::get(L)->normalize_path(url,&is_uri);
            
            if (path)
            {
                String final_uri(path);
                g_free(path);
                
                if (!is_uri)
                {
                    final_uri="file://"+final_uri;
                }
                
                result=self->get_controller()->declare_resource(resource,final_uri);
            }
        ]];
        
    bool enter_text(string label,string text)
        [[
            result=self->get_controller()->enter_text(label,text);    
        ]];
	
    callback on_disconnected;
    
    callback on_key_down;
    
    callback on_key_up;
    
    callback on_accelerometer;
    
    callback on_click;
    
    callback on_touch_down;
    
    callback on_touch_move;
    
    callback on_touch_up;

    callback on_ui_event;
}

#==============================================================================

[[

//.........................................................................

ControllerDelegate::ControllerDelegate(lua_State * _L,Controller * _controller,ControllerListDelegate * _list)
:
    L(_L),
    controller(_controller),
    list(_list)
{
    controller->ref();
    controller->add_delegate(this);        
}

//.........................................................................

ControllerDelegate::~ControllerDelegate()
{
    controller->remove_delegate(this);
    controller->unref();
    
    list->proxy_destroyed(this);
}

//.........................................................................
// Delegate functions

void ControllerDelegate::disconnected()
{   
    invoke_controller_on_disconnected(L,this,0,0);
    detach_controller(L,this);
}

void ControllerDelegate::key_down(unsigned int key_code,unsigned long int unicode)
{
    lua_pushnumber(L,key_code);
    lua_pushnumber(L,unicode);
    invoke_controller_on_key_down(L,this,2,0);
}

void ControllerDelegate::key_up(unsigned int key_code,unsigned long int unicode)
{
    lua_pushnumber(L,key_code);
    lua_pushnumber(L,unicode);
    invoke_controller_on_key_up(L,this,2,0);
}

void ControllerDelegate::accelerometer(double x,double y,double z)
{
    lua_pushnumber(L,x);
    lua_pushnumber(L,y);
    lua_pushnumber(L,z);    
    invoke_controller_on_accelerometer(L,this,3,0);    
}

void ControllerDelegate::click(int x,int y)
{
    lua_pushnumber(L,x);
    lua_pushnumber(L,y);
    invoke_controller_on_click(L,this,2,0);        
}

void ControllerDelegate::touch_down(int x,int y)
{   
    lua_pushnumber(L,x);
    lua_pushnumber(L,y);
    invoke_controller_on_touch_down(L,this,2,0);        
}

void ControllerDelegate::touch_move(int x,int y)
{
    lua_pushnumber(L,x);
    lua_pushnumber(L,y);
    invoke_controller_on_touch_move(L,this,2,0);            
}

void ControllerDelegate::touch_up(int x,int y)
{
    lua_pushnumber(L,x);
    lua_pushnumber(L,y);
    invoke_controller_on_touch_up(L,this,2,0);            
}

void ControllerDelegate::ui_event(const String & parameters)
{
    lua_pushstring(L,parameters.c_str());
    invoke_controller_on_ui_event(L,this,1,0);
}

]]

#==============================================================================

global controllers [[ControllerListDelegate*]]
{
    controllers()
        [[
            *self=new ControllerListDelegate(L);            
        ]];
        
    ~controllers()
        [[
            delete self;
        ]];
        
    readonly table connected
        [[
            self->push_connected();
        ]];
        
    callback on_controller_connected;    
}

#==============================================================================

[[

//.........................................................................

ControllerListDelegate::ControllerListDelegate(lua_State * l)
:
    L(l)
{
    list=App::get(L)->get_context()->get_controller_list();
    list->add_delegate(this);
}

//.........................................................................

ControllerListDelegate::~ControllerListDelegate()
{
    list->remove_delegate(this);
}

//.........................................................................
// Delegate function

void ControllerListDelegate::connected(Controller * controller)
{
    ControllerDelegate * d=new ControllerDelegate(L,controller,this);
    
    proxies.insert(d);
    
    lua_pushlightuserdata(L,d);
    
    new_controller(L);
    
    lua_remove(L,-2);
    
    invoke_controllers_on_controller_connected(L,this,1,0);
}

//.........................................................................

void ControllerListDelegate::proxy_destroyed(ControllerDelegate * proxy)
{
    proxies.erase(proxy);
}

//.........................................................................

void ControllerListDelegate::push_connected()
{
    lua_newtable(L);
    
    // These exist as Lua objects, so we should be able to find instances
    // for all of them. However, the proxies may not be connected
    
    int i=1;
    
    ControllerList::ControllerSet found;
    
    for(ProxySet::iterator it=proxies.begin();it!=proxies.end();++it)
    {
        if (!(*it)->get_controller()->is_connected())
            continue;
        
        int is_new=wrap_controller(L,(*it));
        g_assert(!is_new);
        lua_rawseti(L,-2,i++);
        
        found.insert((*it)->get_controller());
    }
    
    // These may not exist as Lua objects but they are definitely connected
    
    ControllerList::ControllerSet controllers(list->get_controllers());
        
    for(ControllerList::ControllerSet::iterator it=controllers.begin();
        it!=controllers.end();++it)
    {
        if (found.find(*it)!=found.end())
        {
            continue;
        }
        
        ControllerDelegate * d=new ControllerDelegate(L,*it,this);
        
        proxies.insert(d);
        
        lua_pushlightuserdata(L,d);
        
        new_controller(L);
        
        lua_remove(L,-2);
        
        lua_rawseti(L,-2,i++);
    }
}

]]

#==============================================================================
