
module http_module;

[[
#include <upnp/upnp.h>
#include "http_server.h"
#include "app.h"
#include "context.h"
#include "app_resource.h"

class MyHandler : public HttpServer::RequestHandler
{
public:

    MyHandler( lua_State * _L )
    :
        L( _L )
    {
        App * app = App::get( L );

        server = app->get_context()->get_http_server();

        path = "/app/";
        path += Util::random_string( 6 );

        server->register_handler( path , this );
    }

    virtual ~MyHandler()
    {
        server->unregister_handler( path );
    }

    virtual void handle_http_request( const HttpServer::Request & request , HttpServer::Response & response )
    {
        lua_newtable( L );

        int t = lua_gettop( L );

        lua_pushliteral( L , "method" );
        switch( request.get_method() )
        {
            case HttpServer::Request::HTTP_GET:
                lua_pushliteral( L , "GET" );
                break;
            case HttpServer::Request::HTTP_POST:
                lua_pushliteral( L , "POST" );
                break;
            case HttpServer::Request::HTTP_PUT:
                lua_pushliteral( L , "PUT" );
                break;
            case HttpServer::Request::HTTP_DELETE:
                lua_pushliteral( L , "DELETE" );
                break;
            case HttpServer::Request::HTTP_HEAD:
                lua_pushliteral( L , "HEAD" );
                break;
            default:
                lua_pushliteral( L , "" );
                break;
        }
        lua_rawset( L , t );

        lua_pushliteral( L , "uri" );

        HttpServer::URI u( request.get_uri() );

        lua_newtable( L );
        if ( ! u.scheme.empty() )
        {
            lua_pushliteral( L , "scheme" );
            lua_pushstring( L , u.scheme.c_str() );
            lua_rawset( L , -3 );
        }
        if ( ! u.user.empty() )
        {
            lua_pushliteral( L , "user" );
            lua_pushstring( L , u.user.c_str() );
            lua_rawset( L , -3 );
        }
        if ( ! u.password.empty() )
        {
            lua_pushliteral( L , "password" );
            lua_pushstring( L , u.password.c_str() );
            lua_rawset( L , -3 );
        }
        if ( ! u.host.empty() )
        {
            lua_pushliteral( L , "host" );
            lua_pushstring( L , u.host.c_str() );
            lua_rawset( L , -3 );
        }
        if ( ! u.path.empty() )
        {
            lua_pushliteral( L , "path" );
            lua_pushstring( L , u.path.c_str() );
            lua_rawset( L , -3 );
        }
        if ( ! u.query.empty() )
        {
            lua_pushliteral( L , "query" );
            lua_pushstring( L , u.query.c_str() );
            lua_rawset( L , -3 );
        }
        if ( ! u.fragment.empty() )
        {
            lua_pushliteral( L , "fragment" );
            lua_pushstring( L , u.fragment.c_str() );
            lua_rawset( L , -3 );
        }
        lua_pushliteral( L , "port" );
        lua_pushinteger( L , u.port );
        lua_rawset( L , -3 );

        lua_rawset( L , t );

        StringMultiMap headers( request.get_headers() );

        lua_pushliteral( L , "headers" );
        lua_newtable( L );
        int h = lua_gettop( L );
        int i = 1;

        for ( StringMultiMap::const_iterator it = headers.begin(); it != headers.end(); ++it , ++i )
        {
            lua_newtable( L );
            lua_pushstring( L , it->first.c_str() );
            lua_rawseti( L , -2 , 1 );
            lua_pushstring( L , it->second.c_str() );
            lua_rawseti( L , -2 , 2 );

            lua_rawseti( L , h , i );
        }
        lua_rawset( L , t );

        const HttpServer::Request::Body & body( request.get_body() );

        if ( body.get_length() > 0 )
        {
            lua_pushliteral( L , "body" );
            lua_pushlstring( L , body.get_data() , body.get_length() );
            lua_rawset( L , t );
        }

        //---------------------------------------------------------------------

        if ( UserData::invoke_callback( this , "on_request" , 1 , 1 , L ) )
        {
            // The response is a table that can have various fields set.

            if ( lua_type( L , -1 ) == LUA_TTABLE )
            {
                int t = lua_gettop( L );

                //--------------------------------------------------------------
                // "status" can be either a number or a table with a number at 1
                // and a string at 2 (for the reason phrase)

                lua_getfield( L , t , "status" );

                if ( lua_isnumber( L , -1 ) )
                {
                    response.set_status( HttpServer::ServerStatus( lua_tonumber( L , -1 ) ) );
                }
                else if ( lua_type( L , -1 ) == LUA_TTABLE )
                {
                    lua_rawgeti( L , -1 , 1 );
                    lua_rawgeti( L , -2 , 2 );

                    int code = lua_tonumber( L , -2 );
                    const char * msg = lua_tostring( L , -1 );

                    response.set_status( HttpServer::ServerStatus( code ) , msg ? msg : "" );

                    lua_pop( L , 2 );
                }
                lua_pop( L , 1 );

                //--------------------------------------------------------------
                // "content_type" is a string. This is a shortcut to specify
                // the content type.

                lua_getfield( L , t , "content_type" );
                if ( lua_isstring( L , -1 ) )
                {
                    const char * ct = lua_tostring( L , -1 );
                    if ( ct )
                    {
                        response.set_content_type( ct );
                    }
                }
                lua_pop( L , 1 );

                //--------------------------------------------------------------
                // "headers" is a table with the key as the header name and the
                // value as the header value.

                lua_getfield( L , t , "headers" );
                if ( lua_type( L , -1 ) == LUA_TTABLE )
                {
                    lua_pushnil( L );
                    while( lua_next( L , -2 ) )
                    {
                        if ( lua_really_isstring( L , -2 ) && lua_isstring( L , -1 ) )
                        {
                            const char * name = lua_tostring( L , -2 );
                            const char * value = lua_tostring( L , -1 );

                            if ( name && value )
                            {
                                response.set_header( name , value );
                            }
                        }
                        lua_pop( L , 1 );
                    }
                }
                lua_pop( L , 1 );

                //--------------------------------------------------------------
                // "body" is an lstring.

                lua_getfield( L , t , "body" );
                if ( lua_isstring( L , -1 ) )
                {
                    size_t length = 0;
                    const char * body = lua_tolstring( L , -1 , & length );

                    if ( body )
                    {
                        response.set_response( response.get_content_type() , body , length );
                    }
                }
                lua_pop( L , 1 );

                //--------------------------------------------------------------
                // "file" tells us to serve a file.

                lua_getfield( L , t , "file" );
                if ( lua_isstring( L , -1 ) )
                {
                    if ( const char * file = lua_tostring( L , -1 ) )
                    {
                        if ( AppResource r = AppResource( L , file , AppResource::URI_NOT_ALLOWED ) )
                        {
                            response.respond_with_file_contents( r.get_uri() , response.get_content_type() );
                        }
                    }
                }
                lua_pop( L , 1 );
            }
            lua_pop( L , 1 );
        }
    }

    const String & get_path() const
    {
        return path;
    }

    int get_port() const
    {
        return server->get_port();
    }

private:

    lua_State *     L;
    HttpServer *    server;
    String          path;

};
]]

global http [[MyHandler*]]
{
    http()
        [[
            self = lb_construct( MyHandler , new MyHandler( L ) );
        ]];

    ~http()
        [[
            delete self;
        ]];

    readonly int port
        [[
            port = self->get_port();
        ]];

    readonly string path
        [[
            path = self->get_path().c_str();
        ]];

    callback on_request;
}
