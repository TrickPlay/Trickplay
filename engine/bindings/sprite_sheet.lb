module sprite_sheet;

[[
#include <glib.h>
#include "spritesheet.h"
#include "clutter_util.h"
#include <string.h>
#include "bitmap.h"
#include "bitmap.lb.h"
#include "json.h"
#include "app_resource.h"
#include "util.h"
]]

[[

//------------------------------------------------------------------------
// Emit signal "later"
/*
class EmitLoadedSignalLater : public Action
{

public:
    EmitLoadedSignalLater( SpriteSheet * self, const char * error_message )
    {
        this->self = self;
        this->error_message = error_message;
    }

protected:
    bool run()
    {
        g_signal_emit_by_name( self->extra, "load-finished", error_message );
        return false;
    }

private:
    SpriteSheet * self;
    const char  * error_message;
};
*/
//------------------------------------------------------------------------
// Helper functions

typedef void (* LFunc) ( lua_State * L, int index, gpointer user_data );
typedef SpriteSheet::Source Source;

void foreach_in_table ( lua_State * L, int index, LFunc func, gpointer user_data )
{
    index = index > 0 ? index : lua_gettop( L ) + index + 1;

    lua_pushnil( L );
    while ( lua_next( L, index ) )
    {
        func( L, lua_gettop( L ), user_data );
        lua_pop( L, 1 );
    }
}

void spritesheet_add_lua_sprite ( lua_State * L, int index, Source * source )
{
    LSG;

    if ( !lua_istable( L, index ) )
    {
        g_warning( "Couldn't understand that sprite definition." );
        return;
    }

    lua_getfield( L, index, "x" );
    lua_getfield( L, index, "y" );
    lua_getfield( L, index, "w" );
    lua_getfield( L, index, "h" );
    lua_getfield( L, index, "id" );

    source->sheet->add_sprite( source,
        strdup( (char *) lua_tostring( L, -1 ) ),
        (int) lua_tointeger( L, -5 ),
        (int) lua_tointeger( L, -4 ),
        (int) lua_tointeger( L, -3 ),
        (int) lua_tointeger( L, -2 )
    );

    lua_pop( L, 5 );

    LSG_END( 0 );
}

void spritesheet_add_lua_map ( lua_State * L, int index, SpriteSheet * self )
{
    if ( !lua_istable( L, index ) )
    {
        g_warning( "Map subsheet is not a table" );
        return;
    }

    Bitmap * bitmap;
    Source * source = self->add_source();


    lua_getfield( L, index, "img" );
    int img = lua_gettop( L );

    if ( lua_isstring( L, img ) )
    {
        source->set_source( lua_tostring( L, img ) );
    }
    else if (( bitmap = LB_GET_BITMAP( L, img ) ))
    {
        source->set_source( bitmap->get_image() );
    }
    else
    {
        g_warning( "Source image is not a URI or Bitmap" );
    }

    lua_pop( L, 1 );


    lua_getfield( L, index, "sprites" );
    int sprites = lua_gettop( L );

    if ( lua_istable( L, sprites ) )
    {
        foreach_in_table( L, sprites, (LFunc) spritesheet_add_lua_sprite, source );
    }
    else
    {
        g_warning( "List of sprites is not a table" );
    }

    lua_pop( L, 1 );
}
void SpriteSheet_on_loaded( GObject * extra, gpointer error, lua_State * L );

]]

/***************************************
	Class: SpriteSheet

	The SpriteSheet data type enables multiple images to be stored within a single image file, similar to a sheet of paper having multiple images printed on it. Each image is called a "sprite." Each sprite's location on the sheet and its size are specified in either a JSON map file or Lua source code. In addition, each sprite is assigned a unique ID which is subsequently used to access the sprite for image manipulation or display on the screen. Individual sprites in the SpriteSheet are accessed by using the <Sprite> or <NineSlice> data types.

	The SpriteSheet and Sprite classes provide an efficient alternative to the loading and processing of multiple <Image> or <Clone> objects.

	A SpriteSheet object may contain multiple sheets/files, and each sheet may contain multiple sprites.

	The SpriteSheet "map" specifies the location, size and string ID of each sprite contained on a sheet. Maps are defined in either an external JSON text file or in Lua code statements. The structure of the map information is similar in both formats; only the syntax varies.

	Each SpriteSheet map includes a table of sprite definitions and the name of the file that contains the sprites/images. A sprite/image file can be loaded from local storage or a URL. The table of sprite definitions are specified in a property called "sprites"; the image filename property is "img". A sample SpriteSheet map in JSON is shown below.

		(code)
		... JSON SpriteSheet Map ...
		... Filename: animationFrames.json ...
		[
			{
				"sprites": [
					{ "x":  0, "y": 0, "w": 16, "h": 16, "id": "frame1" },
					{ "x": 16, "y": 0, "w": 16, "h": 16, "id": "frame2" },
					... Additional sprite definitions can be added here ...
				]
				"img": "animationFrames.png"
			},
			... Additional maps for other sheets/files can be defined here ...
		]
		(end)

	As the JSON map defined above shows, each definition in the "sprites" property is a table containing the following required fields.

		x - X coordinate position on the sheet of the sprite's top-left corner
		y - Y coordinate position on the sheet of the sprite's top-left corner
		w - sprite's width in pixels
		h - sprite's height in pixels
		id - sprite's unique string ID. IDs must be unique within the SpriteSheet object.

	The "img" property recognizes filenames and URI references. *Note:* For filenames, the specified file location is relative to the JSON file's location.

	To load the JSON map in a TrickPlay application, simply specify the JSON filename in the SpriteSheet constructor's "map" property as shown below.

		(code)
		spriteMap = SpriteSheet( { map = "animationFrames.json" } )
		(end)

	SpriteSheet maps can also be defined using Lua. Below is Lua code that defines a SpriteSheet map equivalent to the earlier JSON-defined map.

		(code)
		-- Lua SpriteSheet Map
		spriteMap = SpriteSheet( {
			map = {
				{
					sprites = {
						{ x =  0, y = 0, w = 16, h = 16, id = "frame1" },
						{ x = 16, y = 0, w = 16, h = 16, id = "frame2" },
						-- Additional sprite definitions can be added here
					},
					img = Bitmap( { src = "animationFrames.png" } )
				},
				-- Additional maps for other sheets/files can be defined here
			}
		} )
		(end)

	Notice in the Lua version that the "img" property is defined as a <Bitmap> object. In addition, the specified file location is relative to the application's app bundle. These are differences from the earlier JSON syntax, but all the remaining differences between the two formats are syntax-related.

    *See Also:* the <Sprite> and <NineSlice> classes
*/

class SpriteSheet [[SpriteSheet*]]
{

/***************************************
    Constructor: SpriteSheet

    The SpriteSheet() constructor creates a new SpriteSheet object.

    *Arguments:*

		props - table defining the map of the sheets/files contained in the object. For details, refer to the discussion at the top of this page.

    *Properties:*

		map - Lua table or JSON file specification containing the map definition of the sheets/files contained in the object.
		async - Optional boolean flag indicating whether a remote JSON map file should be loaded synchronously or asynchronously. Default: false, i.e., load synchronously. The async argument is relevant only when a *remote* JSON file is used to define the map; local JSON files are always loaded synchronously. When an asynchronous remote JSON load has finished, an <on_loaded> event is fired. Note: <Sprite> and <NineSlice> objects must not be created from the SpriteSheet until the map definition has loaded. This is not an issue when defining the map in a Lua table or a JSON file loaded synchronously; when loading the map from an asynchronously-loaded remote JSON file, Sprite and NineSlice objects must not be created until the on_loaded event is fired.

    *Return Value:* reference to the constructed SpriteSheet object

	*See Also:* the discussion at the top of this page and the <on_loaded> event
*/

    SpriteSheet( table props = 0 )
        [[
            LSG;
            self = lb_construct( SpriteSheet, new SpriteSheet() );

            g_signal_connect_data( self->extra, "load-finished",
                (GCallback) SpriteSheet_on_loaded,
                L, 0, GConnectFlags( 0 ) );

            self->app = App::get( L );

            if ( props )
            {
                ClutterUtil::set_props_from_table( L, props );

                lua_getfield( L, 1, "async" );
                lua_getfield( L, 1, "map" );

                self->async = lua_toboolean( L, -2 );

                if ( lua_isstring( L, -1 ) )
                {
                    self->load_json( lua_tostring( L, -1 ) );
                }
                else if ( lua_istable( L, -1 ) )
                {
                    foreach_in_table( L, -1, (LFunc) spritesheet_add_lua_map, self );
                    self->loaded = true;
                    self->emit_signal( NULL );
                }
                else
                {
                    luaL_error( L, "Key 'map' was not a table or URI string." );
                }

                lua_pop( L, 2 );
            }
            else
            {
                luaL_error( L, "Must pass a table to SpriteSheet constructor." );
            }

            LSG_END( 0 );
        ]];

    ~SpriteSheet()
        [[
        ]];

/***************************************
    Property: map_uri

	The map_uri property contains the file specification of the JSON file used to define the object's sprite map. If the sprite map was defined in Lua code statements, the property contains a nil value.

	*Default Setting:* nil
*/

    readonly string map_uri
        [[
            map_uri = self->get_json_path();
        ]];

/***************************************
    Property: loaded

	The loaded property is a boolean flag indicating the success or failure of the synchronous loading of a JSON map file (true=success).

	Note: The loaded property cannot be used to determine the result or status of an asynchonously-loaded map file. To receive status notification of an asynchronously-loaded map file, register an <on_loaded> event handler.

    *Default Setting:* false

    *See Also:* the <map_uri> property
*/

    readonly bool loaded
        [[
            loaded = self->loaded;
        ]];

/***************************************
    Function: get_ids

	The get_ids() function returns a table listing all the sprite IDs defined in the object. Each sprite defined in the SpriteSheet object must have a string ID that is unique for that SpriteSheet. For additional information, refer to the discussion at the top of this page.

	*Return Value:* table of sprite string IDs
*/

    table get_ids()
        [[
            std::list< std::string > * ids = self->get_ids();

            lua_createtable( L, 0, ids->size() );
            int table = lua_gettop( L );

            for ( std::list< std::string >::iterator id = ids->begin(); id != ids->end(); ++id )
            {
                lua_pushboolean( L, true );
                lua_setfield( L, table, id->c_str() );
            }

            delete ids;
        ]];

/***************************************
    Function: add_onloaded_listener

    The add_onloaded_listener() function registers a handler function for <on_loaded> events.

    *Arguments*

        f - reference to handler function. The function prototype is described below.

    *Return Value:* Handle to the registered handler. Pass this handle to the <remove_onloaded_listener> function to unregister the handler.

    *Handler Prototype:*

		(code)
		f( loadedSheet, failed )
		(end)

    *Handler Arguments:*

        loadedSheet - the SpriteSheet object that has finished loading
        failed - boolean value indicating failure or success of the load operation (true=failure)

    *Handler Return Value:* None

    *See Also:* the <on_loaded> event and the <remove_onloaded_listener> function
*/

    int add_onloaded_listener( function f )
        [[
            result = UserData::get( L )->add_callback( (char *) "on_loaded" , L );
        ]];

/***************************************
    Function: remove_onloaded_listener

    The remove_onloaded_listener() function unregisters the specified event handler.

    *Arguments:*

        ref - handle for event handler to unregister. This handle is returned by the <add_onloaded_listener> function.

    *Return Value:* None

    *See Also:* the <add_onloaded_listener> function
*/

    remove_onloaded_listener( int ref )
        [[
            UserData::get( L )->remove_callback( (char *) "on_loaded" , L );
        ]];

/***************************************
    Event: on_loaded

    The on_loaded event occurs when an asynchronously-loaded JSON map has finished loading. Note: The on_loaded event refers only to the loading of the JSON map file and not to any image files referenced within the file.

    *See Also:* the <add_onloaded_listener> function
*/

    function on_loaded
        [[
            return UserData::get( L )->get_last_callback( (char *) "on_loaded" , L );
        ]]
        [[
            UserData::get( L )->set_last_callback( (char *) "on_loaded" , L );
        ]];

/***************************************

*/

}

[[

void SpriteSheet_on_loaded( GObject * extra, gpointer error, lua_State * L )
{
    SpriteSheet * self = (SpriteSheet *) g_object_get_data( extra, "tp-sheet" );

    if ( self->async )
    {
        lua_pushboolean( L, error ? 1 : 0 );
        UserData::invoke_callbacks( self, "on_loaded", 1, 0, L);
    }
}

]]
