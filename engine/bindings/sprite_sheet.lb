module sprite_sheet;

[[
#include "spritesheet.h"
#include <glib.h>
#include <string.h>
#include "bitmap.h"
#include "json.h"
#include "app_resource.h"
]]

[[

int get_image_bitmap( lua_State * L , Image ** image , gchar ** error_message )
{
    lua_getfield( L , 1 , "img" );

    if ( lua_isnil( L , -1 ) )
    {
        *error_message = (char*) "SpriteSheet initialization error: Key 'img' not found.";
        lua_pop( L , 1 );
        return 0;
    }

    if ( ! lua_isuserdata( L , -1 ) )
    {
        *error_message = (char*) "SpriteSheet initialization error: Property 'img' must be a Bitmap.";
        lua_pop( L , 1 );
        return 0;
    }

    if ( ! luaL_getmetafield( L , -1 , "type" ) )
    {
        *error_message = (char*) "SpriteSheet initialization error: Property 'img' must be a Bitmap.";
        lua_pop( L , 1 );
        return 0;
    }

    if ( strcmp( lua_tostring( L , -1 ) , "Bitmap" ) != 0 )
    {
        *error_message = (char*) "SpriteSheet initialization error: Property 'img' must be a Bitmap.";
        lua_pop( L , 2 );
        return 0;
    }

    lua_pop( L , 1 );

    Bitmap * bitmap_image = (Bitmap*) UserData::get_client( L , -1 );

    Image * image_tmp = bitmap_image->get_image();

    if ( ! image_tmp )
    {
        *error_message = (char*) "SpriteSheet initialization error: Bitmap must have an associated Image.";
        return 0;
    }

    *image = image_tmp;

    lua_pop( L , 1 );

    return 1;
}

int map_sprites_from_lua_table( lua_State * L , SpriteSheet * sheet , char ** error_message )
{
    lua_getfield( L , -1 , "sprites" );

    if ( lua_isnil( L , -1 ) )
    {
        *error_message = (char*) "SpriteSheet initialization error: Map must contain the key 'sprites'.";
        lua_pop( L , 1 );
        return 0;
    }

    if ( ! lua_istable( L , -1 ) )
    {
        *error_message = (char*) "SpriteSheet initialization error: Map key 'sprites' must have a table value.";
        lua_pop( L , 1 );
        return 0;
    }

    lua_pushnil( L );

    while ( lua_next( L , -2 ) )
    {
        if ( lua_istable ( L , -1 ) )
        {
            lua_getfield( L , -1 , "id" );
            lua_getfield( L , -2 , "x" );
            lua_getfield( L , -3 , "y" );
            lua_getfield( L , -4 , "w" );
            lua_getfield( L , -5 , "h" );

            int h = lua_tointeger( L , -1 );
            int w = lua_tointeger( L , -2 );
            int y = lua_tointeger( L , -3 );
            int x = lua_tointeger( L , -4 );

            const gchar * id = strdup( lua_tostring( L , -5 ) );

            lua_pop( L , 5 );

            if ( id )
            {
                sheet->map_subtexture( id , x , y , w , h );
            }
        }

        lua_pop( L , 1 );
    }

    lua_pop( L , 1 );
    return 1;
}
]]

class SpriteSheet [[SpriteSheet*]]
{
    SpriteSheet(table props = 0 )
        [[
            LSG;

            App * app = App::get( L );
            gchar * error_message = 0;
            SpriteSheet * sheet = 0;
            Image * image = 0;

            if ( props )
            {
                lua_getfield( L , 1 , "map" );

                if ( lua_isnil( L , -1 ) )
                {
                    lua_pop( L , 1 );
                    self = lb_construct( SpriteSheet , 0 );
                    luaL_error( L , "SpriteSheet initialization error: Key 'map' not found." );
                }

                if ( lua_type( L , -1 ) == LUA_TSTRING )
                {
                    const char * json_file = lua_tostring( L , -1 );
                    lua_pop( L , 1 );

                    AppResource resource( App::get( L ) , json_file );

                    if ( ! resource.good() )
                    {
                        self = lb_construct( SpriteSheet , 0 );
                        luaL_error( L , "SpriteSheet initialization error: JSON file %s does not exist." , json_file );
                    }

                    gchar * contents;

                    if ( resource.is_http() )
                    {
                        Network::Request request( app->get_user_agent() , resource.get_uri() );
                        Network::Response response = app->get_network()->perform_request( request, app->get_cookie_jar() );

                        if ( response.failed || response.body->len == 0 )
                        {
                            self = lb_construct( SpriteSheet , 0 );
                            luaL_error( L , "SpriteSheet initialization error: Could not download file '%s'." , json_file );
                        }

                        guint8 null = '\0';
                        contents = strdup( (char*) g_byte_array_append( response.body, &null , 1 )->data );
                    }
                    else if ( resource.is_native() )
                    {
                        const char * path = resource.get_native_path().c_str();
                        if ( ! g_file_test( path, G_FILE_TEST_IS_REGULAR ) )
                        {
                            self = lb_construct( SpriteSheet , 0 );
                            luaL_error( L , "SpriteSheet initialization error: JSON file '%s' does not exist." , path );
                        }

                        GError * error;
                        if ( ! g_file_get_contents( path , &contents , NULL , &error ) )
                        {
                            self = lb_construct( SpriteSheet , 0 );
                            luaL_error( L , "SpriteSheet initialization error: Unable to open JSON file '%s'." , path );
                        }
                    }

                    if ( ! contents )
                    {
                        self = lb_construct( SpriteSheet , 0 );
                        luaL_error( L , "SpriteSheet initialization error: Unable to open JSON file '%s'." , json_file );
                    }

                    JSON::parse( L , contents );

                    if ( lua_isnil( L , -1 ) || ! lua_istable( L , -1 ) )
                    {
                        lua_pop( L , 1 );
                        self = lb_construct( SpriteSheet , 0 );
                        luaL_error( L , "SpriteSheet initialization error: Unable to parse JSON file '%s' with contents: \n%s" , json_file , contents );
                    }

                    lua_getfield( L , -1 , "image" );

                    if ( lua_isnil( L , -1 ) || ! lua_isstring( L , -1 ) )
                    {
                        lua_pop( L , 2 );
                        self = lb_construct( SpriteSheet , 0 );
                        luaL_error( L , "SpriteSheet initialization error: Invalid image path." );
                    }

                    const char * image_src = lua_tostring( L , -1 );

                    lua_pop( L , 1 );

                    image = app->load_image( image_src , false );

                    if ( ! image )
                    {
                        lua_pop( L , 1 );
                        self = lb_construct( SpriteSheet , 0 );
                        luaL_error( L , "SpriteSheet initialization error: Image '%s' does not exist." , image_src );
                    }

                    g_free( contents );
                }

                if ( lua_type( L , -1 ) == LUA_TTABLE )
                {
                    if ( ! image && ! get_image_bitmap( L , &image , &error_message ) )
                    {
                        lua_pop( L , 1 );
                        self = lb_construct( SpriteSheet , 0 );
                        luaL_error( L , error_message );
                    }

                    ClutterTexture * imageClutterTexture = CLUTTER_TEXTURE(clutter_texture_new());
                    Images::load_texture( imageClutterTexture , image );

                    sheet = new SpriteSheet( clutter_texture_get_cogl_texture( imageClutterTexture ) );

                    if ( ! map_sprites_from_lua_table( L , sheet , &error_message ) )
                    {
                        lua_pop( L , 1 );
                        self = lb_construct( SpriteSheet , 0 );
                        luaL_error( L , error_message );
                    }

                    lua_pop( L , 1 );
                }
                else
                {
                    lua_pop( L , 1 );
                    self = lb_construct( SpriteSheet , 0 );
                    luaL_error( L , "SpriteSheet map must be a Lua table or a String location of a JSON file." );
                }

            } else {
                self = lb_construct( SpriteSheet , NULL );
                luaL_error( L , "SpriteSheet initialization error: Must pass a table to SpriteSheet constructor." );
            }

            self = lb_construct( SpriteSheet , sheet );

            LSG_END(0);
        ]];

    table get_ids()
        [[
            GList * iter = self->get_ids();

            int index = 1;

            lua_newtable( L );

            for ( ; iter ; iter = iter->next )
            {
                lua_pushstring( L , (char*) iter->data );
                lua_rawseti( L , -2 , index );
                ++index;
            }
        ]];

    ~SpriteSheet()
        [[
        ]];

    dump()
        [[
            self->dump();
        ]];


}
