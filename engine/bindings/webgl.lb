
module webgl;

[[
#ifdef GLAPIENTRY
#error "GL IS ALREADY INCLUDED"
#endif

#define GL_GLEXT_PROTOTYPES 1
#include <GL/gl.h>
]]

interface WebGLRenderingContext [[void*]]
{
    /* ClearBufferMask */
    const int DEPTH_BUFFER_BIT               = 0x00000100;
    const int STENCIL_BUFFER_BIT             = 0x00000400;
    const int COLOR_BUFFER_BIT               = 0x00004000;

    /* BeginMode */
    const int POINTS                         = 0x0000;
    const int LINES                          = 0x0001;
    const int LINE_LOOP                      = 0x0002;
    const int LINE_STRIP                     = 0x0003;
    const int TRIANGLES                      = 0x0004;
    const int TRIANGLE_STRIP                 = 0x0005;
    const int TRIANGLE_FAN                   = 0x0006;

    /* AlphaFunction (not supported in ES20) */
    /*      NEVER */
    /*      LESS */
    /*      EQUAL */
    /*      LEQUAL */
    /*      GREATER */
    /*      NOTEQUAL */
    /*      GEQUAL */
    /*      ALWAYS */

    /* BlendingFactorDest */
    const int ZERO                           = 0;
    const int ONE                            = 1;
    const int SRC_COLOR                      = 0x0300;
    const int ONE_MINUS_SRC_COLOR            = 0x0301;
    const int SRC_ALPHA                      = 0x0302;
    const int ONE_MINUS_SRC_ALPHA            = 0x0303;
    const int DST_ALPHA                      = 0x0304;
    const int ONE_MINUS_DST_ALPHA            = 0x0305;

    /* BlendingFactorSrc */
    /*      ZERO */
    /*      ONE */
    const int DST_COLOR                      = 0x0306;
    const int ONE_MINUS_DST_COLOR            = 0x0307;
    const int SRC_ALPHA_SATURATE             = 0x0308;
    /*      SRC_ALPHA */
    /*      ONE_MINUS_SRC_ALPHA */
    /*      DST_ALPHA */
    /*      ONE_MINUS_DST_ALPHA */

    /* BlendEquationSeparate */
    const int FUNC_ADD                       = 0x8006;
    const int BLEND_EQUATION                 = 0x8009;
    const int BLEND_EQUATION_RGB             = 0x8009;   /* same as BLEND_EQUATION */
    const int BLEND_EQUATION_ALPHA           = 0x883D;

    /* BlendSubtract */
    const int FUNC_SUBTRACT                  = 0x800A;
    const int FUNC_REVERSE_SUBTRACT          = 0x800B;

    /* Separate Blend Functions */
    const int BLEND_DST_RGB                  = 0x80C8;
    const int BLEND_SRC_RGB                  = 0x80C9;
    const int BLEND_DST_ALPHA                = 0x80CA;
    const int BLEND_SRC_ALPHA                = 0x80CB;
    const int CONSTANT_COLOR                 = 0x8001;
    const int ONE_MINUS_CONSTANT_COLOR       = 0x8002;
    const int CONSTANT_ALPHA                 = 0x8003;
    const int ONE_MINUS_CONSTANT_ALPHA       = 0x8004;
    const int BLEND_COLOR                    = 0x8005;

    /* Buffer Objects */
    const int ARRAY_BUFFER                   = 0x8892;
    const int ELEMENT_ARRAY_BUFFER           = 0x8893;
    const int ARRAY_BUFFER_BINDING           = 0x8894;
    const int ELEMENT_ARRAY_BUFFER_BINDING   = 0x8895;

    const int STREAM_DRAW                    = 0x88E0;
    const int STATIC_DRAW                    = 0x88E4;
    const int DYNAMIC_DRAW                   = 0x88E8;

    const int BUFFER_SIZE                    = 0x8764;
    const int BUFFER_USAGE                   = 0x8765;

    const int CURRENT_VERTEX_ATTRIB          = 0x8626;

    /* CullFaceMode */
    const int FRONT                          = 0x0404;
    const int BACK                           = 0x0405;
    const int FRONT_AND_BACK                 = 0x0408;

    /* DepthFunction */
    /*      NEVER */
    /*      LESS */
    /*      EQUAL */
    /*      LEQUAL */
    /*      GREATER */
    /*      NOTEQUAL */
    /*      GEQUAL */
    /*      ALWAYS */

    /* EnableCap */
    /* TEXTURE_2D */
    const int CULL_FACE                      = 0x0B44;
    const int BLEND                          = 0x0BE2;
    const int DITHER                         = 0x0BD0;
    const int STENCIL_TEST                   = 0x0B90;
    const int DEPTH_TEST                     = 0x0B71;
    const int SCISSOR_TEST                   = 0x0C11;
    const int POLYGON_OFFSET_FILL            = 0x8037;
    const int SAMPLE_ALPHA_TO_COVERAGE       = 0x809E;
    const int SAMPLE_COVERAGE                = 0x80A0;

    /* ErrorCode */
    const int NO_ERROR                       = 0;
    const int INVALID_ENUM                   = 0x0500;
    const int INVALID_VALUE                  = 0x0501;
    const int INVALID_OPERATION              = 0x0502;
    const int OUT_OF_MEMORY                  = 0x0505;

    /* FrontFaceDirection */
    const int CW                             = 0x0900;
    const int CCW                            = 0x0901;

    /* GetPName */
    const int LINE_WIDTH                     = 0x0B21;
    const int ALIASED_POINT_SIZE_RANGE       = 0x846D;
    const int ALIASED_LINE_WIDTH_RANGE       = 0x846E;
    const int CULL_FACE_MODE                 = 0x0B45;
    const int FRONT_FACE                     = 0x0B46;
    const int DEPTH_RANGE                    = 0x0B70;
    const int DEPTH_WRITEMASK                = 0x0B72;
    const int DEPTH_CLEAR_VALUE              = 0x0B73;
    const int DEPTH_FUNC                     = 0x0B74;
    const int STENCIL_CLEAR_VALUE            = 0x0B91;
    const int STENCIL_FUNC                   = 0x0B92;
    const int STENCIL_FAIL                   = 0x0B94;
    const int STENCIL_PASS_DEPTH_FAIL        = 0x0B95;
    const int STENCIL_PASS_DEPTH_PASS        = 0x0B96;
    const int STENCIL_REF                    = 0x0B97;
    const int STENCIL_VALUE_MASK             = 0x0B93;
    const int STENCIL_WRITEMASK              = 0x0B98;
    const int STENCIL_BACK_FUNC              = 0x8800;
    const int STENCIL_BACK_FAIL              = 0x8801;
    const int STENCIL_BACK_PASS_DEPTH_FAIL   = 0x8802;
    const int STENCIL_BACK_PASS_DEPTH_PASS   = 0x8803;
    const int STENCIL_BACK_REF               = 0x8CA3;
    const int STENCIL_BACK_VALUE_MASK        = 0x8CA4;
    const int STENCIL_BACK_WRITEMASK         = 0x8CA5;
    const int VIEWPORT                       = 0x0BA2;
    const int SCISSOR_BOX                    = 0x0C10;
    /*      SCISSOR_TEST */
    const int COLOR_CLEAR_VALUE              = 0x0C22;
    const int COLOR_WRITEMASK                = 0x0C23;
    const int UNPACK_ALIGNMENT               = 0x0CF5;
    const int PACK_ALIGNMENT                 = 0x0D05;
    const int MAX_TEXTURE_SIZE               = 0x0D33;
    const int MAX_VIEWPORT_DIMS              = 0x0D3A;
    const int SUBPIXEL_BITS                  = 0x0D50;
    const int RED_BITS                       = 0x0D52;
    const int GREEN_BITS                     = 0x0D53;
    const int BLUE_BITS                      = 0x0D54;
    const int ALPHA_BITS                     = 0x0D55;
    const int DEPTH_BITS                     = 0x0D56;
    const int STENCIL_BITS                   = 0x0D57;
    const int POLYGON_OFFSET_UNITS           = 0x2A00;
    /*      POLYGON_OFFSET_FILL */
    const int POLYGON_OFFSET_FACTOR          = 0x8038;
    const int TEXTURE_BINDING_2D             = 0x8069;
    const int SAMPLE_BUFFERS                 = 0x80A8;
    const int SAMPLES                        = 0x80A9;
    const int SAMPLE_COVERAGE_VALUE          = 0x80AA;
    const int SAMPLE_COVERAGE_INVERT         = 0x80AB;

    /* GetTextureParameter */
    /*      TEXTURE_MAG_FILTER */
    /*      TEXTURE_MIN_FILTER */
    /*      TEXTURE_WRAP_S */
    /*      TEXTURE_WRAP_T */

    const int NUM_COMPRESSED_TEXTURE_FORMATS = 0x86A2;
    const int COMPRESSED_TEXTURE_FORMATS     = 0x86A3;

    /* HintMode */
    const int DONT_CARE                      = 0x1100;
    const int FASTEST                        = 0x1101;
    const int NICEST                         = 0x1102;

    /* HintTarget */
    const int GENERATE_MIPMAP_HINT            = 0x8192;

    /* DataType */
    const int BYTE                           = 0x1400;
    const int UNSIGNED_BYTE                  = 0x1401;
    const int SHORT                          = 0x1402;
    const int UNSIGNED_SHORT                 = 0x1403;
    const int INT                            = 0x1404;
    const int UNSIGNED_INT                   = 0x1405;
    const int FLOAT                          = 0x1406;

    /* PixelFormat */
    const int DEPTH_COMPONENT                = 0x1902;
    const int ALPHA                          = 0x1906;
    const int RGB                            = 0x1907;
    const int RGBA                           = 0x1908;
    const int LUMINANCE                      = 0x1909;
    const int LUMINANCE_ALPHA                = 0x190A;

    /* PixelType */
    /*      UNSIGNED_BYTE */
    const int UNSIGNED_SHORT_4_4_4_4         = 0x8033;
    const int UNSIGNED_SHORT_5_5_5_1         = 0x8034;
    const int UNSIGNED_SHORT_5_6_5           = 0x8363;

    /* Shaders */
    const int FRAGMENT_SHADER                  = 0x8B30;
    const int VERTEX_SHADER                    = 0x8B31;
    const int MAX_VERTEX_ATTRIBS               = 0x8869;
    const int MAX_VERTEX_UNIFORM_VECTORS       = 0x8DFB;
    const int MAX_VARYING_VECTORS              = 0x8DFC;
    const int MAX_COMBINED_TEXTURE_IMAGE_UNITS = 0x8B4D;
    const int MAX_VERTEX_TEXTURE_IMAGE_UNITS   = 0x8B4C;
    const int MAX_TEXTURE_IMAGE_UNITS          = 0x8872;
    const int MAX_FRAGMENT_UNIFORM_VECTORS     = 0x8DFD;
    const int SHADER_TYPE                      = 0x8B4F;
    const int DELETE_STATUS                    = 0x8B80;
    const int LINK_STATUS                      = 0x8B82;
    const int VALIDATE_STATUS                  = 0x8B83;
    const int ATTACHED_SHADERS                 = 0x8B85;
    const int ACTIVE_UNIFORMS                  = 0x8B86;
    const int ACTIVE_ATTRIBUTES                = 0x8B89;
    const int SHADING_LANGUAGE_VERSION         = 0x8B8C;
    const int CURRENT_PROGRAM                  = 0x8B8D;

    /* StencilFunction */
    const int NEVER                          = 0x0200;
    const int LESS                           = 0x0201;
    const int EQUAL                          = 0x0202;
    const int LEQUAL                         = 0x0203;
    const int GREATER                        = 0x0204;
    const int NOTEQUAL                       = 0x0205;
    const int GEQUAL                         = 0x0206;
    const int ALWAYS                         = 0x0207;

    /* StencilOp */
    /*      ZERO */
    const int KEEP                           = 0x1E00;
    const int REPLACE                        = 0x1E01;
    const int INCR                           = 0x1E02;
    const int DECR                           = 0x1E03;
    const int INVERT                         = 0x150A;
    const int INCR_WRAP                      = 0x8507;
    const int DECR_WRAP                      = 0x8508;

    /* StringName */
    const int VENDOR                         = 0x1F00;
    const int RENDERER                       = 0x1F01;
    const int VERSION                        = 0x1F02;

    /* TextureMagFilter */
    const int NEAREST                        = 0x2600;
    const int LINEAR                         = 0x2601;

    /* TextureMinFilter */
    /*      NEAREST */
    /*      LINEAR */
    const int NEAREST_MIPMAP_NEAREST         = 0x2700;
    const int LINEAR_MIPMAP_NEAREST          = 0x2701;
    const int NEAREST_MIPMAP_LINEAR          = 0x2702;
    const int LINEAR_MIPMAP_LINEAR           = 0x2703;

    /* TextureParameterName */
    const int TEXTURE_MAG_FILTER             = 0x2800;
    const int TEXTURE_MIN_FILTER             = 0x2801;
    const int TEXTURE_WRAP_S                 = 0x2802;
    const int TEXTURE_WRAP_T                 = 0x2803;

    /* TextureTarget */
    const int TEXTURE_2D                     = 0x0DE1;
    const int TEXTURE                        = 0x1702;

    const int TEXTURE_CUBE_MAP               = 0x8513;
    const int TEXTURE_BINDING_CUBE_MAP       = 0x8514;
    const int TEXTURE_CUBE_MAP_POSITIVE_X    = 0x8515;
    const int TEXTURE_CUBE_MAP_NEGATIVE_X    = 0x8516;
    const int TEXTURE_CUBE_MAP_POSITIVE_Y    = 0x8517;
    const int TEXTURE_CUBE_MAP_NEGATIVE_Y    = 0x8518;
    const int TEXTURE_CUBE_MAP_POSITIVE_Z    = 0x8519;
    const int TEXTURE_CUBE_MAP_NEGATIVE_Z    = 0x851A;
    const int MAX_CUBE_MAP_TEXTURE_SIZE      = 0x851C;

    /* TextureUnit */
    const int TEXTURE0                       = 0x84C0;
    const int TEXTURE1                       = 0x84C1;
    const int TEXTURE2                       = 0x84C2;
    const int TEXTURE3                       = 0x84C3;
    const int TEXTURE4                       = 0x84C4;
    const int TEXTURE5                       = 0x84C5;
    const int TEXTURE6                       = 0x84C6;
    const int TEXTURE7                       = 0x84C7;
    const int TEXTURE8                       = 0x84C8;
    const int TEXTURE9                       = 0x84C9;
    const int TEXTURE10                      = 0x84CA;
    const int TEXTURE11                      = 0x84CB;
    const int TEXTURE12                      = 0x84CC;
    const int TEXTURE13                      = 0x84CD;
    const int TEXTURE14                      = 0x84CE;
    const int TEXTURE15                      = 0x84CF;
    const int TEXTURE16                      = 0x84D0;
    const int TEXTURE17                      = 0x84D1;
    const int TEXTURE18                      = 0x84D2;
    const int TEXTURE19                      = 0x84D3;
    const int TEXTURE20                      = 0x84D4;
    const int TEXTURE21                      = 0x84D5;
    const int TEXTURE22                      = 0x84D6;
    const int TEXTURE23                      = 0x84D7;
    const int TEXTURE24                      = 0x84D8;
    const int TEXTURE25                      = 0x84D9;
    const int TEXTURE26                      = 0x84DA;
    const int TEXTURE27                      = 0x84DB;
    const int TEXTURE28                      = 0x84DC;
    const int TEXTURE29                      = 0x84DD;
    const int TEXTURE30                      = 0x84DE;
    const int TEXTURE31                      = 0x84DF;
    const int ACTIVE_TEXTURE                 = 0x84E0;

    /* TextureWrapMode */
    const int REPEAT                         = 0x2901;
    const int CLAMP_TO_EDGE                  = 0x812F;
    const int MIRRORED_REPEAT                = 0x8370;

    /* Uniform Types */
    const int FLOAT_VEC2                     = 0x8B50;
    const int FLOAT_VEC3                     = 0x8B51;
    const int FLOAT_VEC4                     = 0x8B52;
    const int INT_VEC2                       = 0x8B53;
    const int INT_VEC3                       = 0x8B54;
    const int INT_VEC4                       = 0x8B55;
    const int BOOL                           = 0x8B56;
    const int BOOL_VEC2                      = 0x8B57;
    const int BOOL_VEC3                      = 0x8B58;
    const int BOOL_VEC4                      = 0x8B59;
    const int FLOAT_MAT2                     = 0x8B5A;
    const int FLOAT_MAT3                     = 0x8B5B;
    const int FLOAT_MAT4                     = 0x8B5C;
    const int SAMPLER_2D                     = 0x8B5E;
    const int SAMPLER_CUBE                   = 0x8B60;

    /* Vertex Arrays */
    const int VERTEX_ATTRIB_ARRAY_ENABLED        = 0x8622;
    const int VERTEX_ATTRIB_ARRAY_SIZE           = 0x8623;
    const int VERTEX_ATTRIB_ARRAY_STRIDE         = 0x8624;
    const int VERTEX_ATTRIB_ARRAY_TYPE           = 0x8625;
    const int VERTEX_ATTRIB_ARRAY_NORMALIZED     = 0x886A;
    const int VERTEX_ATTRIB_ARRAY_POINTER        = 0x8645;
    const int VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 0x889F;

    /* Shader Source */
    const int COMPILE_STATUS                 = 0x8B81;

    /* Shader Precision-Specified Types */
    const int LOW_FLOAT                      = 0x8DF0;
    const int MEDIUM_FLOAT                   = 0x8DF1;
    const int HIGH_FLOAT                     = 0x8DF2;
    const int LOW_INT                        = 0x8DF3;
    const int MEDIUM_INT                     = 0x8DF4;
    const int HIGH_INT                       = 0x8DF5;

    /* Framebuffer Object. */
    const int FRAMEBUFFER                    = 0x8D40;
    const int RENDERBUFFER                   = 0x8D41;

    const int RGBA4                          = 0x8056;
    const int RGB5_A1                        = 0x8057;
    const int RGB565                         = 0x8D62;
    const int DEPTH_COMPONENT16              = 0x81A5;
    const int STENCIL_INDEX                  = 0x1901;
    const int STENCIL_INDEX8                 = 0x8D48;
    const int DEPTH_STENCIL                  = 0x84F9;

    const int RENDERBUFFER_WIDTH             = 0x8D42;
    const int RENDERBUFFER_HEIGHT            = 0x8D43;
    const int RENDERBUFFER_INTERNAL_FORMAT   = 0x8D44;
    const int RENDERBUFFER_RED_SIZE          = 0x8D50;
    const int RENDERBUFFER_GREEN_SIZE        = 0x8D51;
    const int RENDERBUFFER_BLUE_SIZE         = 0x8D52;
    const int RENDERBUFFER_ALPHA_SIZE        = 0x8D53;
    const int RENDERBUFFER_DEPTH_SIZE        = 0x8D54;
    const int RENDERBUFFER_STENCIL_SIZE      = 0x8D55;

    const int FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE           = 0x8CD0;
    const int FRAMEBUFFER_ATTACHMENT_OBJECT_NAME           = 0x8CD1;
    const int FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL         = 0x8CD2;
    const int FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 0x8CD3;

    const int COLOR_ATTACHMENT0              = 0x8CE0;
    const int DEPTH_ATTACHMENT               = 0x8D00;
    const int STENCIL_ATTACHMENT             = 0x8D20;
    const int DEPTH_STENCIL_ATTACHMENT       = 0x821A;

    const int NONE                           = 0;

    const int FRAMEBUFFER_COMPLETE                      = 0x8CD5;
    const int FRAMEBUFFER_INCOMPLETE_ATTACHMENT         = 0x8CD6;
    const int FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 0x8CD7;
    const int FRAMEBUFFER_INCOMPLETE_DIMENSIONS         = 0x8CD9;
    const int FRAMEBUFFER_UNSUPPORTED                   = 0x8CDD;

    const int FRAMEBUFFER_BINDING            = 0x8CA6;
    const int RENDERBUFFER_BINDING           = 0x8CA7;
    const int MAX_RENDERBUFFER_SIZE          = 0x84E8;

    const int INVALID_FRAMEBUFFER_OPERATION  = 0x0506;

    /* WebGL-specific enums */
    const int UNPACK_FLIP_Y_WEBGL                   = 0x9240;
    const int UNPACK_PREMULTIPLY_ALPHA_WEBGL        = 0x9241;
    const int CONTEXT_LOST_WEBGL                    = 0x9242;
    const int UNPACK_COLORSPACE_CONVERSION_WEBGL    = 0x9243;
    const int BROWSER_DEFAULT_WEBGL                 = 0x9244;

    typedef int             WebGLProgram;
    typedef int             WebGLShader;
    typedef int             WebGLBuffer;
    typedef int             WebGLFramebuffer;
    typedef int             WebGLRenderbuffer;
    typedef int             WebGLTexture;

    typedef table           WebGLActiveInfo;

    typedef int             GLenum;
    typedef bool            GLboolean;
    typedef int             GLbitfield;
    typedef int             GLbyte;
    typedef int             GLshort;
    typedef int             GLint;
    typedef int             GLsizei;
    typedef int             GLintptr;
    typedef int             GLsizeiptr;
    typedef int             GLubyte;
    typedef int             GLushort;
    typedef int             GLuint;
    typedef double          GLfloat;
    typedef double          GLclampf;

    typedef string          DOMString;

    readonly HTMLCanvasElement canvas
        [[
            lua_pushnil( L );
        ]];

    readonly int drawingBufferWidth
        [[
            drawingBufferWidth = 0;
        ]];

    readonly int drawingBufferHeight
        [[
            drawingBufferHeight = 0;
        ]];

    WebGLContextAttributes getContextAttributes()
        [[
            lua_pushnil( L );
        ]];

    bool isContextLost()
        [[
            result = false;
        ]];

    table getSupportedExtensions()
        [[
            lua_newtable( L );
        ]];

    object getExtension( DOMString name )
        [[
            lua_pushnil( L );
        ]];

    activeTexture( GLenum texture )
        [[
            glActiveTexture( texture );
        ]];

    attachShader( WebGLProgram program , WebGLShader shader )
        [[
            glAttachShader( program , shader );
        ]];

    bindAttribLocation( WebGLProgram program , GLuint index , DOMString name )
        [[
            glBindAttribLocation( program , index , name );
        ]];

    bindBuffer( GLenum target , WebGLBuffer buffer )
        [[
            glBindBuffer( target , buffer );
        ]];

    bindFramebuffer( GLenum target , WebGLFramebuffer framebuffer )
        [[
            glBindFramebuffer( target , framebuffer );
        ]];

    bindRenderbuffer(GLenum target, WebGLRenderbuffer renderbuffer )
        [[
            glBindRenderbuffer( target , renderbuffer );
        ]];

    bindTexture(GLenum target, WebGLTexture texture )
        [[
            glBindTexture( target , texture );
        ]];

    blendColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha )
        [[
            glBlendColor( red , green , blue , alpha );
        ]];

    blendEquation(GLenum mode )
        [[
            glBlendEquation( mode );
        ]];

    blendEquationSeparate(GLenum modeRGB, GLenum modeAlpha )
        [[
            glBlendEquationSeparate( modeRGB , modeAlpha );
        ]];

    blendFunc(GLenum sfactor, GLenum dfactor )
        [[
            glBlendFunc( sfactor , dfactor );
        ]];

    void blendFuncSeparate(GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha )
        [[
            glBlendFuncSeparate( srcRGB , dstRGB , srcAlpha , dstAlpha );
        ]];

    void bufferData(GLenum target, GLsizeiptr size, GLenum usage )
        [[
            // TODO: Spec says that it should be initialized to zero -
            // does that mean we allocate an area of memory, fill it
            // with zeros and pass it to glBufferData?

            glBufferData( target , size , 0 , usage );
        ]];
/*
    void bufferData(GLenum target, ArrayBufferView data, GLenum usage )
    [[
    ]];

    void bufferData(GLenum target, ArrayBuffer data, GLenum usage )
    [[
    ]];
*/
    void bufferSubData(GLenum target, GLintptr offset, ArrayBufferView data )
    [[
    ]];
/*
    void bufferSubData(GLenum target, GLintptr offset, ArrayBuffer data )
    [[
    ]];
*/
    GLenum checkFramebufferStatus(GLenum target )
        [[
            result = glCheckFramebufferStatus( target );
        ]];

    clear( GLbitfield mask )
        [[
            glClear( mask );
        ]];

    clearColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha )
        [[
            glClearColor( red , green , blue , alpha );
        ]];

    clearDepth(GLclampf depth )
        [[
            glClearDepth( depth );
        ]];

    clearStencil(GLint s )
        [[
            glClearStencil( s );
        ]];

    colorMask(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha )
        [[
            glColorMask( red , green , blue , alpha );
        ]];

    compileShader(WebGLShader shader )
        [[
            glCompileShader( shader );
        ]];

    copyTexImage2D(GLenum target, GLint level, GLenum internalformat,
                        GLint x, GLint y, GLsizei width, GLsizei height,
                        GLint border )
        [[
            glCopyTexImage2D( target , level , internalformat , x , y , width , height , border );
        ]];

    void copyTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset,
                           GLint x, GLint y, GLsizei width, GLsizei height )
        [[
            glCopyTexSubImage2D( target , level , xoffset , yoffset , x , y , width , height );
        ]];


    WebGLBuffer createBuffer( )
        [[
            GLuint buffer;
            glGenBuffers( 1 , & buffer );
            result = buffer;
        ]];

    WebGLFramebuffer createFramebuffer( )
        [[
            GLuint buffer;
            glGenFramebuffers( 1 , & buffer );
            result = buffer;
        ]];

    WebGLProgram createProgram( )
        [[
            result = glCreateProgram();
        ]];

    WebGLRenderbuffer createRenderbuffer( )
        [[
            GLuint buffer;
            glGenRenderbuffers( 1 , & buffer );
            result = buffer;
        ]];

    WebGLShader createShader( int type )
        [[
            result = glCreateShader( type );
        ]];

    WebGLTexture createTexture( )
        [[
            GLuint texture;
            glGenTextures( 1 , & texture );
            result = texture;
        ]];

    cullFace(GLenum mode )
        [[
            glCullFace( mode );
        ]];

    deleteBuffer(WebGLBuffer buffer )
        [[
            GLuint b = buffer;
            glDeleteBuffers( 1 , & b );
        ]];

    deleteFramebuffer(WebGLFramebuffer framebuffer )
        [[
            GLuint b = framebuffer;
            glDeleteFramebuffers( 1 , & b );
        ]];

    deleteProgram(WebGLProgram program )
        [[
            GLuint p = program;
            glDeleteProgram( p );
        ]];

    deleteRenderbuffer(WebGLRenderbuffer renderbuffer )
        [[
            GLuint b = renderbuffer;
            glDeleteRenderbuffers( 1 , & b );
        ]];

    deleteShader(WebGLShader shader )
        [[
            GLuint s = shader;
            glDeleteShader( s );
        ]];

    deleteTexture(WebGLTexture texture )
        [[
            GLuint t = texture;
            glDeleteTextures( 1 , & t );
        ]];

    depthFunc(GLenum func )
        [[
            glDepthFunc( func );
        ]];

    depthMask(GLboolean flag )
        [[
            glDepthMask( flag );
        ]];

    depthRange(GLclampf zNear, GLclampf zFar )
        [[
            glDepthRange( zNear , zFar );
        ]];

    detachShader(WebGLProgram program, WebGLShader shader )
        [[
            glDetachShader( program , shader );
        ]];

    disable(GLenum cap )
        [[
            glDisable( cap );
        ]];

    disableVertexAttribArray(GLuint index )
        [[
            glDisableVertexAttribArray( index );
        ]];

    drawArrays(GLenum mode, GLint first, GLsizei count )
        [[
            glDrawArrays( mode , first , count );
        ]];

    drawElements(GLenum mode, GLsizei count, GLenum type, GLintptr offset )
        [[
            // TODO:
            // I don't understand this one. I'm not sure where the pointer to
            // the indices should be coming from.

          glDrawElements( mode , count , type , (GLvoid*) offset );
        ]];


    enable(GLenum cap )
        [[
            glEnable( cap );
        ]];

    enableVertexAttribArray(GLuint index )
        [[
            glEnableVertexAttribArray( index );
        ]];

    finish( )
        [[
            glFinish();
        ]];

    flush( )
        [[
            glFlush();
        ]];

    framebufferRenderbuffer(GLenum target, GLenum attachment,
                                 GLenum renderbuffertarget,
                                 WebGLRenderbuffer renderbuffer )
        [[
            glFramebufferRenderbuffer( target , attachment , renderbuffertarget , renderbuffer );
        ]];

    framebufferTexture2D(GLenum target, GLenum attachment, GLenum textarget,
                              WebGLTexture texture, GLint level )
        [[
            glFramebufferTexture2D( target , attachment , textarget , texture , level );
        ]];

    frontFace(GLenum mode )
        [[
            glFrontFace( mode );
        ]];


    generateMipmap(GLenum target )
        [[
            glGenerateMipmap( target );
        ]];

    WebGLActiveInfo getActiveAttrib(WebGLProgram program, GLuint index )
        [[
            GLint longest_name;
            glGetProgramiv( program , GL_ACTIVE_ATTRIBUTE_MAX_LENGTH , & longest_name );

            if ( longest_name == 0 )
            {
                longest_name = 64;
            }

            char * name = new char[ longest_name ];

            GLint size;
            GLenum type;

            glGetActiveAttrib( program , index , longest_name , 0 , & size , & type , name );

            lua_newtable( L );

            lua_pushstring( L , "size" );
            lua_pushinteger( L , size );
            lua_rawset( L , -3 );

            lua_pushstring( L , "type" );
            lua_pushinteger( L , type );
            lua_rawset( L , -3 );

            lua_pushstring( L , "name" );
            lua_pushstring( L , name );
            lua_rawset( L , -3 );

            delete [] name;
        ]];

    WebGLActiveInfo getActiveUniform(WebGLProgram program, GLuint index )
        [[
            GLint longest_name;
            glGetProgramiv( program , GL_ACTIVE_UNIFORM_MAX_LENGTH , & longest_name );

            if ( longest_name == 0 )
            {
              longest_name = 64;
            }

            char * name = new char[ longest_name ];

            GLint size;
            GLenum type;

            glGetActiveUniform( program , index , longest_name , 0 , & size , & type , name );

            lua_newtable( L );

            lua_pushstring( L , "size" );
            lua_pushinteger( L , size );
            lua_rawset( L , -3 );

            lua_pushstring( L , "type" );
            lua_pushinteger( L , type );
            lua_rawset( L , -3 );

            lua_pushstring( L , "name" );
            lua_pushstring( L , name );
            lua_rawset( L , -3 );

            delete [] name;
        ]];

    /*WebGLShader[ ]*/ table getAttachedShaders(WebGLProgram program )
        [[
            GLint count = 0;

            glGetProgramiv( program , GL_ATTACHED_SHADERS , & count );

            lua_newtable( L );

            if ( count > 0 )
            {
                GLuint * shaders = new GLuint[ count ];

                glGetAttachedShaders( program , count , 0 , shaders );

                for ( GLint i = 0; i < count; ++i )
                {
                    lua_pushinteger( L , shaders[ i ] );
                    lua_rawseti( L , -2 , i + 1 );
                }

                delete [] shaders;
            }
        ]];

    GLint getAttribLocation(WebGLProgram program, DOMString name )
        [[
            result = glGetAttribLocation( program , name );
        ]];


    any getParameter(GLenum pname )
    [[
    ]];

    any getBufferParameter(GLenum target, GLenum pname )
    [[
    ]];

    GLenum getError( )
    [[
    ]];

    any getFramebufferAttachmentParameter(GLenum target, GLenum attachment,
                                          GLenum pname )
    [[
    ]];

    any getProgramParameter(WebGLProgram program, GLenum pname )
    [[
    ]];

    DOMString getProgramInfoLog(WebGLProgram program )
    [[
    ]];

    any getRenderbufferParameter(GLenum target, GLenum pname )
    [[
    ]];

    any getShaderParameter(WebGLShader shader, GLenum pname )
    [[
    ]];

    DOMString getShaderInfoLog(WebGLShader shader )
    [[
    ]];

    DOMString getShaderSource(WebGLShader shader )
    [[
    ]];

    any getTexParameter(GLenum target, GLenum pname )
    [[
    ]];

    any getUniform(WebGLProgram program, WebGLUniformLocation location )
    [[
    ]];

    WebGLUniformLocation getUniformLocation(WebGLProgram program, DOMString name )
    [[
    ]];

    any getVertexAttrib(GLuint index, GLenum pname )
    [[
    ]];

    GLsizeiptr getVertexAttribOffset(GLuint index, GLenum pname )
    [[
    ]];

    void hint(GLenum target, GLenum mode )
    [[
    ]];

    GLboolean isBuffer(WebGLBuffer buffer )
    [[
    ]];

    GLboolean isEnabled(GLenum cap )
    [[
    ]];

    GLboolean isFramebuffer(WebGLFramebuffer framebuffer )
    [[
    ]];

    GLboolean isProgram(WebGLProgram program )
    [[
    ]];

    GLboolean isRenderbuffer(WebGLRenderbuffer renderbuffer )
    [[
    ]];

    GLboolean isShader(WebGLShader shader )
    [[
    ]];

    GLboolean isTexture(WebGLTexture texture )
    [[
    ]];

    void lineWidth(GLfloat width )
    [[
    ]];

    void linkProgram(WebGLProgram program )
    [[
    ]];

    void pixelStorei(GLenum pname, GLint param )
    [[
    ]];

    void polygonOffset(GLfloat factor, GLfloat units )
    [[
    ]];

    void readPixels(GLint x, GLint y, GLsizei width, GLsizei height,
                    GLenum format, GLenum type, ArrayBufferView pixels )
    [[
    ]];

    void renderbufferStorage(GLenum target, GLenum internalformat,
                             GLsizei width, GLsizei height )
    [[
    ]];

    void sampleCoverage(GLclampf value, GLboolean invert )
    [[
    ]];

    void scissor(GLint x, GLint y, GLsizei width, GLsizei height )
    [[
    ]];

    void shaderSource(WebGLShader shader, DOMString source )
    [[
    ]];

    void stencilFunc(GLenum func, GLint ref, GLuint mask )
    [[
    ]];

    void stencilFuncSeparate(GLenum face, GLenum func, GLint ref, GLuint mask )
    [[
    ]];

    void stencilMask(GLuint mask )
    [[
    ]];

    void stencilMaskSeparate(GLenum face, GLuint mask )
    [[
    ]];

    void stencilOp(GLenum fail, GLenum zfail, GLenum zpass )
    [[
    ]];

    void stencilOpSeparate(GLenum face, GLenum fail, GLenum zfail, GLenum zpass )
    [[
    ]];


    void texImage2D(GLenum target, GLint level, GLenum internalformat,
                    GLsizei width, GLsizei height, GLint border, GLenum format,
                    GLenum type, ArrayBufferView pixels )
    [[
    ]];
/*
    void texImage2D(GLenum target, GLint level, GLenum internalformat,
                    GLenum format, GLenum type, ImageData pixels )
    [[
    ]];

    void texImage2D(GLenum target, GLint level, GLenum internalformat,
                    GLenum format, GLenum type, HTMLImageElement image )
    [[
    ]];

    void texImage2D(GLenum target, GLint level, GLenum internalformat,
                    GLenum format, GLenum type, HTMLCanvasElement canvas )
    [[
    ]];

    void texImage2D(GLenum target, GLint level, GLenum internalformat,
                    GLenum format, GLenum type, HTMLVideoElement video )

    [[
    ]];
*/
    void texParameterf(GLenum target, GLenum pname, GLfloat param )
    [[
    ]];

    void texParameteri(GLenum target, GLenum pname, GLint param )
    [[
    ]];


    void texSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset,
                       GLsizei width, GLsizei height,
                       GLenum format, GLenum type, ArrayBufferView pixels )
    [[
    ]];
/*
    void texSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset,
                       GLenum format, GLenum type, ImageData pixels )
    [[
    ]];

    void texSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset,
                       GLenum format, GLenum type, HTMLImageElement image )
    [[
    ]];

    void texSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset,
                       GLenum format, GLenum type, HTMLCanvasElement canvas )
    [[
    ]];

    void texSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset,
                       GLenum format, GLenum type, HTMLVideoElement video )
    [[
    ]];
*/
    void uniform1f(WebGLUniformLocation location, GLfloat x )
    [[
    ]];

    void uniform1fv(WebGLUniformLocation location, Float32Array v )
    [[
    ]];
/*
    void uniform1fv(WebGLUniformLocation location, float[] v )
    [[
    ]];
*/
    void uniform1i(WebGLUniformLocation location, GLint x )
    [[
    ]];

    void uniform1iv(WebGLUniformLocation location, Int32Array v )
    [[
    ]];
/*
    void uniform1iv(WebGLUniformLocation location, long[] v )
    [[
    ]];
*/
    void uniform2f(WebGLUniformLocation location, GLfloat x, GLfloat y )
    [[
    ]];

    void uniform2fv(WebGLUniformLocation location, Float32Array v )
    [[
    ]];
/*
    void uniform2fv(WebGLUniformLocation location, float[] v )
    [[
    ]];
*/
    void uniform2i(WebGLUniformLocation location, GLint x, GLint y )
    [[
    ]];

    void uniform2iv(WebGLUniformLocation location, Int32Array v )
    [[
    ]];
/*
    void uniform2iv(WebGLUniformLocation location, long[] v )
    [[
    ]];
*/
    void uniform3f(WebGLUniformLocation location, GLfloat x, GLfloat y, GLfloat z )
    [[
    ]];

    void uniform3fv(WebGLUniformLocation location, Float32Array v )
    [[
    ]];
/*
    void uniform3fv(WebGLUniformLocation location, float[] v )
    [[
    ]];
*/
    void uniform3i(WebGLUniformLocation location, GLint x, GLint y, GLint z )
    [[
    ]];

    void uniform3iv(WebGLUniformLocation location, Int32Array v )
    [[
    ]];
/*
    void uniform3iv(WebGLUniformLocation location, long[] v )
    [[
    ]];
*/
    void uniform4f(WebGLUniformLocation location, GLfloat x, GLfloat y, GLfloat z, GLfloat w )
    [[
    ]];

    void uniform4fv(WebGLUniformLocation location, Float32Array v )
    [[
    ]];
/*
    void uniform4fv(WebGLUniformLocation location, float[] v )
    [[
    ]];
*/
    void uniform4i(WebGLUniformLocation location, GLint x, GLint y, GLint z, GLint w )
    [[
    ]];

    void uniform4iv(WebGLUniformLocation location, Int32Array v )
    [[
    ]];
/*
    void uniform4iv(WebGLUniformLocation location, long[] v )
    [[
    ]];
*/

    void uniformMatrix2fv(WebGLUniformLocation location, GLboolean transpose,
                          Float32Array value )
    [[
    ]];
/*
    void uniformMatrix2fv(WebGLUniformLocation location, GLboolean transpose,
                          float[] value )
    [[
    ]];
*/
    void uniformMatrix3fv(WebGLUniformLocation location, GLboolean transpose,
                          Float32Array value )
    [[
    ]];
/*
    void uniformMatrix3fv(WebGLUniformLocation location, GLboolean transpose,
                          float[] value )
    [[
    ]];
*/
    void uniformMatrix4fv(WebGLUniformLocation location, GLboolean transpose,
                          Float32Array value )
    [[
    ]];
/*
    void uniformMatrix4fv(WebGLUniformLocation location, GLboolean transpose,
                          float[] value )
    [[
    ]];

*/
    void useProgram(WebGLProgram program )
    [[
    ]];

    void validateProgram(WebGLProgram program )
    [[
    ]];


    void vertexAttrib1f(GLuint indx, GLfloat x )
    [[
    ]];

    void vertexAttrib1fv(GLuint indx, Float32Array values )
    [[
    ]];
/*
    void vertexAttrib1fv(GLuint indx, float[] values )
    [[
    ]];
*/
    void vertexAttrib2f(GLuint indx, GLfloat x, GLfloat y )
    [[
    ]];

    void vertexAttrib2fv(GLuint indx, Float32Array values )
    [[
    ]];
/*
    void vertexAttrib2fv(GLuint indx, float[] values )
    [[
    ]];
*/
    void vertexAttrib3f(GLuint indx, GLfloat x, GLfloat y, GLfloat z )
    [[
    ]];

    void vertexAttrib3fv(GLuint indx, Float32Array values )
    [[
    ]];
/*
    void vertexAttrib3fv(GLuint indx, float[] values )
    [[
    ]];
*/
    void vertexAttrib4f(GLuint indx, GLfloat x, GLfloat y, GLfloat z, GLfloat w )
    [[
    ]];

    void vertexAttrib4fv(GLuint indx, Float32Array values )
    [[
    ]];
/*
    void vertexAttrib4fv(GLuint indx, float[] values )
    [[
    ]];
*/
    void vertexAttribPointer(GLuint indx, GLint size, GLenum type,
                             GLboolean normalized, GLsizei stride, GLintptr offset )
    [[
    ]];


    void viewport(GLint x, GLint y, GLsizei width, GLsizei height )
    [[
    ]];
}
