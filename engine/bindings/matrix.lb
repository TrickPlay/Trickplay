module matrix;

[[
#include "clutter_util.h"
]]

class Matrix [[CoglMatrix*]]
{
    Matrix()
        [[
            self = lb_construct( CoglMatrix , g_slice_new0( CoglMatrix ) );
            cogl_matrix_init_identity( self );
        ]];

    ~Matrix()
        [[
            g_slice_free( CoglMatrix , self );
        ]];

    table table
        [[
            lua_newtable( L );

            const float * a = cogl_matrix_get_array( self );

            for ( int i = 0; i < 16; ++i , ++a )
            {
                lua_pushnumber( L , * a );
                lua_rawseti( L , -2 , i + 1 );
            }
        ]]
        [[
            float m[16];

            lua_pushnil( L );
            int i = 0;
            while( lua_next( L , 2 ) )
            {
                if ( i == 16 )
                {
                    lua_pop( L , 2 );
                    break;
                }
                if ( lua_isnumber( L , -1 ) )
                {
                    m[ i ] = lua_tonumber( L , -1 );
                    ++i;
                }
                lua_pop( L , 1 );
            }
            cogl_matrix_init_from_array( self , m );
        ]];

    Matrix identity()
        [[
            cogl_matrix_init_identity( self );
            lua_pushvalue( L , 1 );
        ]];

    Matrix frustum( double left , double right , double bottom , double top , double z_near , double z_far )
        [[
            cogl_matrix_frustum( self , left , right , bottom , top , z_near , z_far );
            lua_pushvalue( L , 1 );
        ]];

    Matrix ortho( double left , double right , double bottom , double top , double z_near , double z_far )
        [[
            cogl_matrix_ortho( self , left , right , bottom , top , z_near , z_far );
            lua_pushvalue( L , 1 );
        ]];

    Matrix perspective( double fov_y , double aspect , double z_near , double z_far )
        [[
            cogl_matrix_perspective( self , fov_y , aspect , z_near , z_far );
            lua_pushvalue( L , 1 );
        ]];

    Matrix multiply( Matrix a , Matrix b )
        [[
            CoglMatrix * ma = ( CoglMatrix * ) UserData::get_client( L , a );
            CoglMatrix * mb = ( CoglMatrix * ) UserData::get_client( L , b );

            if ( ma && mb )
            {
                cogl_matrix_multiply( self , ma , mb );
            }

            lua_pushvalue( L , 1 );
        ]];

    Matrix rotate( double angle , double x , double y , double z )
        [[
            cogl_matrix_rotate( self , angle , x , y , z );
            lua_pushvalue( L , 1 );
        ]];

    Matrix translate( double x , double y , double z )
        [[
            cogl_matrix_translate( self , x , y , z );
            lua_pushvalue( L , 1 );
        ]];

    Matrix scale( double sx , double sy , double sz )
        [[
            cogl_matrix_scale( self , sx , sy , sz );
            lua_pushvalue( L , 1 );
        ]];

    # Returns a new one

    Matrix inverse()
        [[
            CoglMatrix * m = g_slice_new( CoglMatrix );
            cogl_matrix_get_inverse( self , m );

            UserData * ud = UserData::make( L , "Matrix" );
            luaL_getmetatable( L , MATRIX_METATABLE );
            lua_setmetatable( L , -2 );
            ud->initialize_with_client( m );
        ]];

    # Returns a new one

    Matrix copy()
        [[
            CoglMatrix * m = g_slice_new( CoglMatrix );
            cogl_matrix_init_from_array( m , cogl_matrix_get_array( self ) );

            UserData * ud = UserData::make( L , "Matrix" );
            luaL_getmetatable( L , MATRIX_METATABLE );
            lua_setmetatable( L , -2 );
            ud->initialize_with_client( m );
        ]];

    table transform_point( table point )
        [[
            float p[4] = { 0 , 0 , 0 , 0 };

            lua_pushnil( L );

            int i = 0;

            while ( lua_next( L , point ) )
            {
                if ( i == 4 )
                {
                    lua_pop( L , 2 );
                    break;
                }
                if ( lua_isnumber( L , -1 ) )
                {
                    p[i] = lua_tonumber( L , -1 );
                    ++i;
                }
                lua_pop( L , 1 );
            }

            cogl_matrix_transform_point( self , &p[0] , &p[1] , &p[2] , &p[3] );

            lua_newtable( L );
            for ( i = 0; i < 4; ++i )
            {
                lua_pushnumber( L , p[i] );
                lua_rawseti( L , -2 , i + 1 );
            }
        ]];

    Matrix set( Matrix other )
        [[
            CoglMatrix * source = ( CoglMatrix * ) UserData::get_client( L , other );

            cogl_matrix_init_from_array( self , cogl_matrix_get_array( source ) );

            lua_pushvalue( L , 1 );
        ]];
}
