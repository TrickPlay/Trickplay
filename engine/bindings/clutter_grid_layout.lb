module clutter_grid_layout;

[[
#include "tp-clutter.h"

#include "util.h"
#include "clutter_util.h"
]]


class GridLayout [[ClutterActor*]] actor, container
{
    GridLayout(table props = 0 )
        [[
            self = lb_construct_gobject( ClutterActor , ClutterUtil::make_actor( clutter_actor_new ) );
            ClutterUtil::initialize_actor(L,self,GRIDLAYOUT_METATABLE);
            ClutterUtil::set_props_from_table(L,props);
            g_object_unref( self );

            ClutterLayoutManager *grid_layout;
            grid_layout = clutter_grid_layout_new ();
            clutter_grid_layout_set_row_homogeneous(CLUTTER_GRID_LAYOUT(grid_layout), FALSE);
            clutter_grid_layout_set_column_homogeneous(CLUTTER_GRID_LAYOUT(grid_layout), FALSE);
            clutter_actor_set_layout_manager (self, grid_layout);
        ]];

    ~GridLayout()
        [[
        ]];

    add_at_index( UIElement child, int row_index, int column_index, bool x_expand, bool y_expand )
        [[
            ClutterActor * c = ClutterUtil::user_data_to_actor(L,child);

            clutter_actor_set_x_expand (c, FALSE);
            clutter_actor_set_y_expand (c, TRUE);
            clutter_actor_set_x_align(c, CLUTTER_ACTOR_ALIGN_CENTER);
            clutter_actor_set_y_align(c, CLUTTER_ACTOR_ALIGN_CENTER);

            g_debug("set Expand (x,y) is (%d,%d)",
             clutter_actor_get_x_expand(c), clutter_actor_get_y_expand(c));

            clutter_grid_layout_attach (
                CLUTTER_GRID_LAYOUT (
                    clutter_actor_get_layout_manager (self)
                ),
                c,column_index, row_index, 1, 1
            );

            g_debug("add Expand (x,y) is (%d,%d)",
             clutter_actor_get_x_expand(c), clutter_actor_get_y_expand(c));

            g_debug("GRID SIZE (%f,%f)", clutter_actor_get_width(self), clutter_actor_get_height(self));
        ]];

    UIElement get_child_at( int row_index, int column_index )
        [[
            ClutterUtil::wrap_concrete_actor(
                L,
                clutter_grid_layout_get_child_at (
                    CLUTTER_GRID_LAYOUT (clutter_actor_get_layout_manager (self)),
                    column_index, row_index
                )
            );
        ]];

    insert_row( int row_index)
        [[
            clutter_grid_layout_insert_row(
                CLUTTER_GRID_LAYOUT (
                    clutter_actor_get_layout_manager (self)
                ), row_index
            );
        ]];
    insert_column( int column_index)
        [[
            clutter_grid_layout_insert_column(
                CLUTTER_GRID_LAYOUT (clutter_actor_get_layout_manager (self)),
                column_index
            );
        ]];

    table homogeneous
        [[

            ClutterLayoutManager *grid_layout = clutter_actor_get_layout_manager (self);
            bool homogeneous_rows = clutter_grid_layout_get_row_homogeneous(
                CLUTTER_GRID_LAYOUT (grid_layout)
            );
            bool homogeneous_columns = clutter_grid_layout_get_column_homogeneous(
                CLUTTER_GRID_LAYOUT (grid_layout)
            );

            lua_newtable(L);
            lua_pushboolean(L,homogeneous_rows);
            lua_rawseti(L,-2,1);
            lua_pushboolean(L,homogeneous_columns);
            lua_rawseti(L,-2,2);
        ]]
        [[
            luaL_checktype(L,2,LUA_TTABLE);
            lua_rawgeti(L,2,1);
            lua_rawgeti(L,2,2);
            ClutterLayoutManager *grid_layout = clutter_actor_get_layout_manager (self);
            clutter_grid_layout_set_row_homogeneous(
                CLUTTER_GRID_LAYOUT (grid_layout) ,
                lua_toboolean(L,-2)
            );
            clutter_grid_layout_set_column_homogeneous(
                CLUTTER_GRID_LAYOUT (grid_layout) ,
                lua_toboolean(L,-1)
            );
            lua_pop(L,2);

        ]];

    table spacing
        [[

            ClutterLayoutManager *grid_layout = clutter_actor_get_layout_manager (self);
            double row_spacing = clutter_grid_layout_get_row_spacing(
                CLUTTER_GRID_LAYOUT (grid_layout)
            );
            double column_spacing = clutter_grid_layout_get_column_spacing(
                CLUTTER_GRID_LAYOUT (grid_layout)
            );

            lua_newtable(L);
            lua_pushnumber(L,row_spacing);
            lua_rawseti(L,-2,1);
            lua_pushnumber(L,column_spacing);
            lua_rawseti(L,-2,2);
        ]]
        [[
            luaL_checktype(L,2,LUA_TTABLE);
            lua_rawgeti(L,2,1);
            lua_rawgeti(L,2,2);
            ClutterLayoutManager *grid_layout = clutter_actor_get_layout_manager (self);
            clutter_grid_layout_set_row_spacing(
                CLUTTER_GRID_LAYOUT (grid_layout) ,
                lua_tonumber(L,-2)
            );
            clutter_grid_layout_set_column_spacing(
                CLUTTER_GRID_LAYOUT (grid_layout) ,
                lua_tonumber(L,-1)
            );
            lua_pop(L,2);

        ]];

    string orientation
        [[
            switch(clutter_grid_layout_get_orientation(
                    CLUTTER_GRID_LAYOUT(
                        clutter_actor_get_layout_manager (self)
                    )
                ))
            {
                case CLUTTER_ORIENTATION_VERTICAL:
                    orientation = "VERTICAL";
                    break;
                default:
                    orientation = "HORIZONTAL";
            }
        ]]
        [[
            ClutterOrientation o = CLUTTER_ORIENTATION_HORIZONTAL;
            if(!strcmp(orientation,"HORIZONTAL"))
                o = CLUTTER_ORIENTATION_HORIZONTAL;
            else if(!strcmp(orientation,"VERTICAL"))
                o = CLUTTER_ORIENTATION_VERTICAL;
            else
                luaL_error(L,"Invalid orientation '%s'",orientation);
            clutter_grid_layout_set_orientation(
                CLUTTER_GRID_LAYOUT (
                    clutter_actor_get_layout_manager(self)
                ),o
            );
        ]];
}
