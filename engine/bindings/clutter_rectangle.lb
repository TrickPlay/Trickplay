module clutter_rectangle;

[[
#include "clutter/clutter.h"

#include "util.h"
#include "clutter_util.h"
]]

/*
    Class: Rectangle

	The Rectangle object is a simple four-cornered rectangle. It implements 
	all the <UIElement> methods and properties. Additionally, a Rectangle
	object is able to specify a color and a border.
    
*/

class Rectangle [[ClutterActor*]] actor
{
    Rectangle(table props = 0)
        [[
        	// This call adds an extra ref to the created actor.
        	// We do this to avoid triggering the toggle ref a bunch of
        	// times during construction.
        	
            self = lb_construct_gobject( ClutterActor , ClutterUtil::make_actor( clutter_rectangle_new ) );
	    	ClutterUtil::initialize_actor(L,self,RECTANGLE_METATABLE);
	    	ClutterUtil::set_props_from_table(L,props);
	    	g_object_unref( self );
        ]];
	
    ~Rectangle()
		[[
		]];
        
    /*
    	Property: color
    	
		The color property is a series of numeric RGB (Red/Green/Blue) and 
		alpha (transparency) values that define the fill color of the object's
		rectangle. The format of the RGB and alpha settings is specified in 
		<RGB/Alpha Color Formats>.

		*Default Setting:* RGB( 255, 255, 255 )/white with an alpha of 
		255/opaque
		
		*Example:* Set rectangle's color using a table
		
		>r.color = { 255, 0, 255 }		-- RGB values with default/opaque alpha
		>r.color = { 255, 0, 255, 100 }	-- RGB with explicit alpha
		
		*Example:* Set rectangle's color using a string
		
		>r.color = "FF00FF"		-- RGB values with default 0xFF/opaque alpha
		>r.color = "FF00FF40"	-- RGB values with explicit alpha
		>r.color = "#FF00FF"	-- RGB values, default alpha, ignored "#" prefix

    */
    
    table color
        [[
            ClutterColor color;
            clutter_rectangle_get_color(CLUTTER_RECTANGLE(self),&color);
            ClutterUtil::push_clutter_color(L,&color);
        ]]
        [[
            ClutterColor color;
            ClutterUtil::to_clutter_color(L,2,&color);
            clutter_rectangle_set_color(CLUTTER_RECTANGLE(self),&color);            
        ]];
    
    /*
    	Property: border_width
    	
    	The border_width property specifies the Rectangle's border in pixels.
    	
    	*Default Setting:* A border width of 0 pixels, i.e., no border.
    	
    	*See Also:* the <border_color> property
    	
    */    
    
    int border_width
        [[border_width=clutter_rectangle_get_border_width(CLUTTER_RECTANGLE(self));]]
        [[clutter_rectangle_set_border_width(CLUTTER_RECTANGLE(self),border_width);]];
        
    /*
    	Property: border_color
    	
    	The border_color property specifies the Rectangle's border. The border 
    	color is specified as a series of three numeric RGB (Red/Green/Blue) 
    	values, plus a numeric alpha/transparency value. For information about 
    	the supported formats of the color settings, refer to 
    	<RGB/Alpha Color Formats>.
    	
    	For the border_color property to have an effect, the Rectangle's 
    	border_width property must be greater than 0, i.e., the Rectangle must 
    	have a border.
    	
    	*Default Setting:* RGB( 255, 255, 255 )/white with an alpha of 
    	255/opaque
    	
    	*See Also:* the <border_width> property
    	
    */
    
    table border_color
        [[
            ClutterColor color;
            clutter_rectangle_get_border_color(CLUTTER_RECTANGLE(self),&color);
            ClutterUtil::push_clutter_color(L,&color);
        ]]
        [[
            ClutterColor color;
            ClutterUtil::to_clutter_color(L,2,&color);
            clutter_rectangle_set_border_color(CLUTTER_RECTANGLE(self),&color);
        ]];
}

/*

Section: General Data Structures

Section: RGB/Alpha Color Formats

		Color in the Trickplay Engine is commonly specified as a series of 
		three numeric RGB (Red/Green/Blue) values, plus an alpha (transparency) 
		value. Each value can range from 0 to 255.
		
		The alpha setting can range from 0/transparent to 255/opaque. Values 
		within this range specify percentages of transparency or opaqueness, 
		e.g., a value of 25 is approximately 10% transparent.
		
		The settings are specified in either a table or a string. When setting 
		a color property, either data format can be used, unless described 
		otherwise. When retrieving a color setting, the values are always 
		returned in a table.
		
		When setting a color, the three RGB values must always be specified. 
		The alpha value is optional and defaults to 255/opaque if not specified.

		If the color values are contained in a string, they must be concatenated
	    in a series of hexadecimal values. The string may be prefixed with a "#"
	    character, which will be ignored.
		
		*Default Setting:* Unless described otherwise, the common default 
		setting is RGB( 255, 255, 255 )/white with an alpha of 255/opaque.
		
		*Example:* Set a Rectangle object's color property using a table
		
		>r.color = { 255, 0, 255 }		-- RGB values with default/opaque alpha
		>r.color = { 255, 0, 255, 100 }	-- RGB with explicit alpha
		
		*Example:* Set a Rectangle object's color using a string
		
		>r.color = "FF00FF"		-- RGB values with default 0xFF/opaque alpha
		>r.color = "FF00FF40"	-- RGB values with explicit alpha
		>r.color = "#FF00FF"	-- RGB values, default alpha, ignored "#" prefix

*/

