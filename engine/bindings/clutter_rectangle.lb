module clutter_rectangle;

[[
#include "clutter/clutter.h"

#include "util.h"
#include "clutter_util.h"
]]

/*
    Class: Rectangle
    
    This is a simple rectangle that can have color and a border. It has 
    all the methods and properties of <UIElement>.  
*/

class Rectangle [[ClutterActor*]] actor
{
    Rectangle(table props = 0)
        [[
        	// This call adds an extra ref to the created actor.
        	// We do this to avoid triggering the toggle ref a bunch of
        	// times during construction.
        	
            self = lb_construct_gobject( ClutterActor , ClutterUtil::make_actor( clutter_rectangle_new ) );
	    	ClutterUtil::initialize_actor(L,self,RECTANGLE_METATABLE);
	    	ClutterUtil::set_props_from_table(L,props);
	    	g_object_unref( self );
        ]];
	
    ~Rectangle()
		[[
		]];
        
    /*
    	Property: color
    	
    	The color of the rectangle. This can be set as either a string or a table
    	with 3 or 4 numbers. It is always returned as a table with 4 numbers.
    	
    	When setting it as a string, you should use hex values for red, green, blue
    	and alpha. You can omit alpha, which will default to fully opaque. You can
    	also include a "#" as the first character, which will be ignored.
    	
    	(code)
    		r.color = "#FF0000"
    		r.color = "FF0000"
    		r.color = "FF0000FF"
    	(end)
    	
    	When setting it as a table, you pass a table with 3 or 4 integers, up to 255 each
    	for red, green blue and alpha. If you pass only 3, alpha is assumed to be 
    	255 (fully opaque).
    	
    	(code)
    		r.color = { 255, 0 , 0 }
    		r.color = { 255, 0 , 0, 255 }
    	(end)
    */
    
    table color
        [[
            ClutterColor color;
            clutter_rectangle_get_color(CLUTTER_RECTANGLE(self),&color);
            ClutterUtil::push_clutter_color(L,&color);
        ]]
        [[
            ClutterColor color;
            ClutterUtil::to_clutter_color(L,2,&color);
            clutter_rectangle_set_color(CLUTTER_RECTANGLE(self),&color);            
        ]];
    
    /*
    	Property: border_width
    	
    	The width of the rectangle's border.
    */    
    
    int border_width
        [[border_width=clutter_rectangle_get_border_width(CLUTTER_RECTANGLE(self));]]
        [[clutter_rectangle_set_border_width(CLUTTER_RECTANGLE(self),border_width);]];
        
    /*
    	Property: border_color
    	
    	The color of the rectangle's border.
    */
    
    table border_color
        [[
            ClutterColor color;
            clutter_rectangle_get_border_color(CLUTTER_RECTANGLE(self),&color);
            ClutterUtil::push_clutter_color(L,&color);
        ]]
        [[
            ClutterColor color;
            ClutterUtil::to_clutter_color(L,2,&color);
            clutter_rectangle_set_border_color(CLUTTER_RECTANGLE(self),&color);
        ]];
}

