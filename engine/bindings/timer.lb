module timer;

[[
#include "glib.h"
#include "common.h"

/*
    You can create a timer in two ways:

    Timer( interval , callback )
    Timer{ interval = interval , callback = callback }

    If the callback is provided during the constructor, the
    timer will start ticking immediately, otherwise, you
    have to set the callback later and call "start".

    If you change the interval to <= 0, remove the callback, call stop
    or return false from the callback, the timer will stop ticking.

    NOTE: This is a "best effort" timer, which will try and call you back every interval.  However,
    the resolution of the timer may vary from platform to platform, and no guarantee is made about the
    precision of the timing of callbacks, particularly for short intervals.  You may wish to use an animation
    or a Timeline for more precise control under some circumstances, or if you want something to happen with
    relatively low latency, you might want to use an on_idle() handler.
*/

class timer
{
public:

    timer();
    ~timer();
    static gboolean timer_fired( gpointer data );
    void start(UserData * ud);
    void stop();
    void set_interval(UserData * ud,unsigned int new_interval);
    unsigned int get_interval() const;
    void cancel();
    int add_ontimer_listener( UserData * ud , lua_State *L );
    void remove_ontimer_listener( UserData * ud , lua_State *L );

private:

    GSource *   source;
    lua_Number  interval;

};

]]

/***************************************
    Class: Timer

    The Timer class enables a user-defined event to be fired after a specified amount of time has elapsed. A Timer object cycles repeatedly until it is explicitly disabled.
*/

class Timer [[timer*]]
{

/***************************************
    Constructor: Timer

    The Timer() constructor creates a new Timer object.

    *Prototype:*

        (code)
        Timer( properties )
        (end)

    *Arguments:*

		properties - table of Timer properties and settings

    *Return Value:* new Timer object

    *Code Examples:* Two methods of calling the Timer constructor are shown below.

        (code)
		-- Define an on_timer event handler that subsequent Timer objects will use
        function timerHandler( timer )
            print( "In on_timer event handler" )
        end

        -- Create a Timer, set its properties separately, start the timer
        newTimer = Timer()
        newTimer.interval = 5000
        newTimer:add_ontimer_listener( timerHandler )
        newTimer:start()

        -- Create a Timer, defining the interval property in the constructor
        newTimer = Timer( { interval = 5000 } )
        newTimer:add_ontimer_listener( timerHandler )
        newTimer:start()
        (end)

    *See Also:* the <start> and <stop> functions
*/

    Timer( int interval = 0 , function on_timer = 0 )
        [[
            self = lb_construct( timer , new timer );

            if (lua_gettop(L)==2 && lua_istable(L,-2))
            {
                lua_pushvalue(L,-2);
                lb_set_props_from_table(L);
                lua_pop(L,1);
            }
            else
            {
                if (interval>0)
                {
                    (self)->set_interval(__ud__,interval);
                }

                if (on_timer)
                {
                    lua_pushvalue(L,on_timer);
                    __ud__->add_callback( (char*) "on_timer" , L );
                }
            }

            if ( __ud__->callback_attached( (char*) "on_timer" ) )
            self->start(__ud__);
        ]];

    ~Timer()
        [[
            delete self;
        ]];

/***************************************
    Property: interval

    The interval property specifies the integer number of milliseconds to elapse before invoking the object's <on_timer> event. The interval property must be set and an on_timer event handler must be registered before starting the Timer.

    *Default Setting:* 0

    *See Also:* the <on_timer> event and the <start> function
*/

    int interval
        [[interval=self->get_interval();]]
        [[self->set_interval(UserData::get(L),interval);]];

/***************************************
    Function: start

    The start() function begins running the Timer object. Before calling the start() function, the <interval> property must be set and a handler must be registered for <on_timer> events.

    When the number of milliseconds specified in the interval property elapses, the registered on_timer event handlers are invoked. The Timer object cycles repeatedly, calling the event handlers every time the interval time elapses. The Timer can be stopped by either: (1) calling the object's <stop> function, (2) having an on_timer event handler return false, (3) unregistering all on_timer event handlers, or (4) setting the interval property to 0.

    *Arguments:* None

    *Return Value:* None

    *See Also:* the <interval> property, the <on_timer> event and the <stop> function
*/

    start()
        [[
        if ( UserData::get( L )->callback_attached( (char*) "on_timer" ) )
        {
        self->start(UserData::get(L));
        }
    ]];

/***************************************
    Function: stop

    The stop() function stops a running Timer object. A stopped Timer can be restarted by calling the <start> function.

    *Arguments:* None

    *Return Value:* None

    *See Also:* the <start> function
*/


    stop()
    [[self->stop();]];

/***************************************
	Function: add_ontimer_listener

	The add_ontimer_listener() function registers a handler function for <on_timer> events.

	*Arguments:*

		f - reference to handler function. The function prototype is described below.

	*Return Value:* Handle to the registered handler. Pass this handle to the <remove_ontimer_listener> function to unregister the handler.

	*Handler Prototype:*

		(code)
		boolean f( timer )
		(end)

	*Handler Arguments:*

        timer - reference to the Timer object

    *Handler Return Value:* false to stop the Timer, otherwise true

	*See Also:* the <on_timer> event and the <remove_ontimer_listener> function
*/

    int add_ontimer_listener(function f)
    [[
        result = self->add_ontimer_listener( UserData::get( L ) , L );
    ]];

/***************************************
	Function: remove_ontimer_listener

	The remove_ontimer_listener() function unregisters the specified event handler.

	*Arguments:*

		ref - handle for event handler to unregister. This handle is returned by the <add_ontimer_listener> function.

	*Return Value:* None

	*See Also:* the <add_ontimer_listener> function
*/

    remove_ontimer_listener(int ref )
    [[
        UserData * ud = UserData::get( L );
        self->remove_ontimer_listener( ud , L );
        if ( ! ud->callback_attached( (char*) "on_timer" ) )
        {
            self->stop();
        }
    ]];

/***************************************
    Event: on_timer

    The on_timer event occurs after the amount of time specified in the interval property has elapsed.

    *See Also:* the <add_ontimer_listener> function
*/

    function on_timer
    [[ return UserData::get( L )->get_last_callback( (char*) "on_timer" , L ); ]]
    [[
        char * name = (char*) "on_timer";
        UserData * ud = UserData::get( L );
        ud->set_last_callback( name , L );
        if ( ! ud->callback_attached( name ) )
        {
           self->stop();
        }
    ]];

/***************************************

*/

}

[[

timer::timer()
:
    source( NULL ),
    interval( 0 )
{
}

timer::~timer()
{
    cancel();
}

void timer::start( UserData * ud )
{
    if (source)
        return;

    if (interval<=0)
        return;

    source = g_timeout_source_new( interval );

    g_source_set_callback( source , timer_fired , UserData::Handle::make( ud , this ) , UserData::Handle::destroy );
    g_source_set_priority( source , TRICKPLAY_PRIORITY );
    g_source_attach( source , g_main_context_default()  );
}

void timer::stop()
{
    if (!source)
    return;

    g_source_destroy(source);
    g_source_unref(source);
    source=NULL;
}

void timer::set_interval(UserData * ud,unsigned int new_interval)
{
    if (new_interval==interval)
        return;

    interval = new_interval;

    if(source)
    {
        stop();
        start(ud);
    }
}

unsigned int timer::get_interval() const
{
    return interval;
}

void timer::cancel()
{
    stop();
}

gboolean timer::timer_fired(gpointer _handle)
{
    UserData::Handle * handle = UserData::Handle::get( _handle );

    lua_State * L = handle->get_lua_state();

    g_assert( L );

    timer * self = ( timer* ) handle->get_user();

    if ( ! handle->invoke_callbacks( "on_timer" , 1 , 1 ) )
    {
        self->cancel();
        return FALSE;
    }

    if ( lua_isboolean(L,-1) && !lua_toboolean( L, -1 ) )
    {
        self->cancel();
        lua_pop(L,1);
        return FALSE;
    }
    lua_pop(L,1);

    return TRUE;
}

int timer::add_ontimer_listener( UserData * ud , lua_State * L ) {
    return ud->add_callback( (char*) "on_timer" , L );
}

void timer::remove_ontimer_listener(UserData * ud , lua_State * L ) {
    ud->remove_callback( (char*) "on_timer" , L );
}

]]
