module bitmap;

[[
#include "bitmap.h"
]]

class Bitmap [[ Bitmap * ]]
{
    Bitmap( string src , bool async = false )
        [[
            self = lb_construct( Bitmap , new Bitmap( L , src , async ) );
        ]];

    ~Bitmap()
        [[
            self->unref();
        ]];

    readonly int width
        [[
            width = self->width();
        ]];

    readonly int w
        [[
            w = self->width();
        ]];

    readonly int height
        [[
            height = self->height();
        ]];

    readonly int h
        [[
            h = self->height();
        ]];

    readonly bool loaded
        [[
            loaded = self->loaded();
        ]];

    Image Image( table props = 0 , table source_rectangle = 0 )
        [[
            Image * image = self->get_image();

            if ( ! image )
            {
                lua_pushnil( L );
            }
            else
            {
                bool good = true;

                guint x = 0;
                guint y = 0;
                guint w = 0;
                guint h = 0;

                if ( source_rectangle )
                {
                    lua_rawgeti( L , source_rectangle , 1 );
                    lua_rawgeti( L , source_rectangle , 2 );
                    lua_rawgeti( L , source_rectangle , 3 );
                    lua_rawgeti( L , source_rectangle , 4 );

                    x = lua_tointeger( L , -4 );
                    y = lua_tointeger( L , -3 );
                    w = lua_tointeger( L , -2 );
                    h = lua_tointeger( L , -1 );

                    lua_pop( L , 4 );

                    if ( x < 0 ||
                         y < 0 ||
                         w <= 0 ||
                         h <= 0 ||
                         guint( x + w ) > image->width() ||
                         guint( y + h ) > image->height() )
                    {
                        good = false;
                    }
                }

                if ( ! good )
                {
                    lua_pushnil( L );
                }
                else
                {
                    lua_getglobal( L , "Image" );

                    if ( props )
                    {
                        lua_pushvalue( L , props );
                    }

                    lua_call( L , props ? 1 : 0 , 1 );

                    ClutterTexture * t = CLUTTER_TEXTURE( UserData::get( L , lua_gettop( L ) )->get_master() );

                    Images::load_texture( t , image , x , y , w , h );
                }
            }
        ]];

    callback on_loaded( Bitmap bitmap , bool failed );
}
