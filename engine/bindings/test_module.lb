module test_module;

[[
#include "user_data.h"
#include "lua.h"

class TestModule {

public:
    TestModule();
    ~TestModule();
    int add_callback( UserData * ud , lua_State * L );
    void remove_callback( UserData * ud , lua_State * L );
    void remove_last_callback( UserData * ud , lua_State * L );
    void invoke_callbacks( UserData * ud , lua_State * L );

private:

};
]]

class TestModule [[ TestModule * ]]
{

TestModule()
    [[
        self = lb_construct( TestModule , new TestModule() );
        printf( "TestModule loaded correctly\n" );
    ]];
    
~TestModule()
    [[
        printf( "TestModule destroyed\n" );
    ]];
    
int add_callback( function callback )
    [[
        result = self->add_callback( UserData::get( L ) , L );
    ]];
    
remove_last_callback()
    [[
        self->remove_last_callback( UserData::get(L) , L );
    ]];
    
remove_callback( int ref )
    [[
        self->remove_callback( UserData::get(L) , L );
    ]];
    
invoke_callbacks( string s )
    [[
        self->invoke_callbacks( UserData::get(L) , L );
    ]];

}

[[

TestModule::TestModule()
{

}

TestModule::~TestModule()
{

}

int TestModule::add_callback( UserData * ud , lua_State * L )
{
    return ud->add_callback( "onfire" , L );
}

void TestModule::remove_last_callback( UserData * ud , lua_State * L )
{
    ud->remove_last_callback( "onfire" , L );
}

void TestModule::remove_callback( UserData * ud , lua_State * L )
{
    ud->remove_callback( "onfire" , L );
}

void TestModule::invoke_callbacks( UserData * ud , lua_State * L )
{   
    ud->invoke_callbacks( "onfire" , 1 , 0 );
}

]]