
[[
#include "app.h"
#include "context.h"
#include "sysdb.h"
#include "util.h"
]]

/*
    This should only be available to the launcher and the store apps. It lets
    them access the installed apps.
*/

global apps [[TPContext*]]
{
    apps()
        [[
            *self=App::get(L)->get_context();    
        ]];
        
    ~apps()
        [[
            self=NULL;
        ]];
    
    #..........................................................................    
    # Returns a table listing all the apps found in the database
    
    table get_all()
        [[
            SystemDatabase::AppList list=self->get_db()->get_all_apps();
                        
            lua_newtable(L);
            
            for(SystemDatabase::AppList::const_iterator it=list.begin();it!=list.end();++it)
            {
				App::Metadata md;
				if(!App::load_metadata(it->path.c_str(), md)) continue;

                lua_pushstring(L,it->id.c_str());

                lua_newtable(L);
                lua_pushstring(L,it->id.c_str());
                lua_setfield(L,-2,"id");

                // TODO: Not sure the path is necessary, or wanted
                lua_pushstring(L,it->path.c_str());
                lua_setfield(L,-2,"path");

				lua_pushstring(L,  md.name.c_str());
				lua_setfield(L, -2, "name");

                lua_pushstring(L,it->version.c_str());
                lua_setfield(L,-2,"version");

                lua_pushinteger(L,it->release);
                lua_setfield(L,-2,"release");

                lua_settable(L,-3);
            }
        ]];
        
    #..........................................................................
    # Lets the caller load the contents of a file that belongs to any app by
    # passing the app id and a path into its bundle
    
    lstring load_app_file(string app_id,string file_name)
        [[
            result = NULL;
            
            String app_path=self->get_db()->get_app_path(app_id);
            
            if (app_path.empty())
            {
                lua_pushnil(L);
                return 1;
            }
            
            gchar * path=Util::rebase_path(app_path.c_str(),file_name);
            Util::GFreeLater free_path(path);
                
            gchar * contents=NULL;            
            GError * error=NULL;
            gsize length=0;
            
            g_file_get_contents(path,&contents,&length,&error);
            Util::GFreeLater free_contents(contents);
            
            if (error)
            {
                g_warning("FAILED TO LOAD APP FILE '%s' : %s",path,error->message);
                g_clear_error(&error);
            }
            else
            {
                result=contents;
                result_len=length;
            }
        ]];
        
    #..........................................................................
    # Launch an app...if it succeeds, it will never return, because this Lua
    # state will be killed
    
    int launch(string app_id)
        [[
            result=self->launch_app(app_id);    
        ]];
    
}
