[[
#define CLUTTER_VERSION_MIN_REQUIRED CLUTTER_VERSION_CUR_STABLE
#include "clutter/clutter.h"
#include "app.h"
]]

[[
struct idle
{
    idle(lua_State * L)
    :
        source(0),
        lsp(App::get(L)->ref_lua_state_proxy()),
        timer(g_timer_new()),
        limit(0.001)
    {

    }

    ~idle()
    {
        clear();
        lsp->unref();
        g_timer_destroy(timer);
    }

    void set()
    {
        clear();
        source=g_idle_add_full( TRICKPLAY_PRIORITY , on_idle , this , 0 );
        g_timer_start(timer);
    }

    void clear()
    {
        if (source)
        {
            g_source_remove(source);
            source=0;
        }
        g_timer_stop(timer);
    }

    static gboolean on_idle(gpointer data);

    guint           source;
    LuaStateProxy * lsp;
    GTimer *        timer;
    double          limit;
};
]]

/***************************************
    Global: idle

    The idle global variable supports a callback function that is invoked as often as possible when the system is otherwise idle. To enable the callback, register a handler for the <on_idle> event; depending upon the system's workload, the function may be invoked immediately. To disable the callback function, unregister the handler.

    Unlike the <Timer> class, the on_idle event is fired on an irregular basis. During times when the system has little to do, the event fires often; when the system is busy performing other tasks, the event seldom occurs. It's not possible to schedule regular invocations of the on_idle event. For operations that need to be performed on a predictable schedule, use a Timer object.

*/

global idle [[idle*]]
{
    idle()
	[[
	    self=lb_construct( idle , new idle(L) );
	]];

    ~idle()
	[[
	    delete self;
	]];

/***************************************
    Property: limit

	The limit property specifies the minimum number of seconds that must elapse between occurrences of the on_idle event. For example, if limit is set to 1, then 1 second *or more* must elapse between two on_idle events. Note: This does not mean that on_idle events will occur every second; it only means they will occur a *maximum* of once every second. The actual time between invocations depends upon the other tasks the system must perform.

	The smallest value for the limit property is 0.001 seconds (1 millisecond).

	*Default Setting:* 0.001 (1 millisecond)

	*See Also:* the <on_idle> event
*/

    double limit
    [[
        limit = self->limit;
    ]]
    [[
        self->limit = std::max( limit , 0.001 );
    ]];

/***************************************
	Function: add_onidle_listener

	The add_onidle_listener() function registers a handler function for <on_idle> events.

	*Arguments:*

		f - reference to handler function. The function prototype is described below.

	*Return Value:* Handle to the registered handler. Pass this handle to the <remove_onidle_listener> function to unregister the handler.

	*Handler Prototype:*

		(code)
		f( idle, elapsed_seconds )
		(end)

	*Handler Arguments:*

		idle - the idle global variable
		elapsed_seconds - a double value indicating the fractional number of seconds elapsed since the previous on_idle event. This value will be greater than or equal to the variable's limit property.

    *Handler Return Value:* None

	*Code Example:* Define and register an on_idle event handler that is called no more than once every half-second for a maximum of 10 seconds.

		(code)
		MAX_SECONDS  = 10.0
		totalSeconds = 0
		idleHandler  = nil

		-- Define the on_idle event handler
		function whileIdle( idle, numSeconds )
			print( "In on_idle event handler" )

			-- Maintain total elapsed time since start
			totalSeconds = totalSeconds + numSeconds

			-- Have we run for the maximum length?
			if( totalSeconds >= MAX_SECONDS ) then
				-- Yes, stop invocations by unregistering the handler
				idle:remove_onidle_listener( idleHandler )
			end
		end

		-- Fire event no more than once per half-second
		idle.limit = 0.5

		-- Register the on_idle event handler. The handler may begin to be invoked immediately, depending on system workload.
		idleHandler = idle:add_onidle_listener( whileIdle )
		(end)

	*See Also:* the <on_idle> event and the <remove_onidle_listener> function
*/

    int add_onidle_listener( function f )
        [[
            char * name = (char*) "on_idle";
            UserData * ud = UserData::get( L );
            result = ud->add_callback( name , L );
            if ( ud->callback_attached( name ) )
            {
               self->set();
            }
            else
            {
                self->clear();
            }
        ]];

/***************************************
	Function: remove_onidle_listener

	The remove_onidle_listener() function unregisters the specified event handler.

	*Arguments:*

		ref - handle for event handler to unregister. This handle is returned by the <add_onidle_listener> function.

	*Return Value:* None

	*See Also:* the <add_onidle_listener> function
*/

    remove_onidle_listener( int ref )
        [[
            char * name = (char*) "on_idle";
            UserData * ud = UserData::get( L );
            ud->remove_callback( name , L );
            if ( ! ud->callback_attached( name ) )
            {
                self->clear();
            }
        ]];

/***************************************
	Event: on_idle

	The on_idle event occurs as often as possible when the system is idle (and within the restriction of the variable's <limit> property).

	*See Also:* the <add_onidle_listener> function
	*/

    function on_idle
        [[
            return UserData::get( L )->get_last_callback( (char*) "on_idle" , L );
        ]]
        [[
            char * name = (char*) "on_idle";
            UserData * ud = UserData::get( L );

            ud->set_last_callback( name , L );
            if ( ud->callback_attached( name ) )
            {
               self->set();
            }
            else
            {
                self->clear();
            }
        ]];

/***************************************

*/

}

[[
gboolean idle::on_idle(gpointer data)
{
    idle * self = ( idle * ) data;

    if ( lua_State * L = self->lsp->get_lua_state() )
    {
		double elapsed = g_timer_elapsed( self->timer , NULL );

		// If it is less than one ms, we bail

		if ( elapsed < self->limit )
		{
			return TRUE;
		}

		g_timer_start( self->timer );

        lua_pushnumber( L , elapsed );
        lb_invoke_callbacks( L , self , IDLE_METATABLE , "on_idle" , 1 , 0 );
    }

    return TRUE;
}
]]
