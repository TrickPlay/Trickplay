
[[
#include "json.h"
]]

/*
	Global: json
	
	This global object lets you convert JSON strings to Lua objects. 
	You invoke it like this
	
	> local t = json:parse( "<some JSON string>" )
	
	The parser is strict in that it requires the top level JSON element to be either an array
	or an object. 
*/

global json [[void*]]
{
	/*
		Property: null
		
		This property is used to represent a null value. It is not the same as Lua's nil, 
		and is only useful for comparisons. For example:
		
		> local j = json:parse( "[null]" )
		> j[ 1 ] == nil -- False, it is not equal to nil.
		> j[ 1 ] == json.null -- True, this is a JSON null value. 
	*/
		
	readonly lightuserdata null
		[[
			lua_pushlightuserdata( L, JSON::null() );
		]];
		
	/*
		Function: parse
		
		Decodes the JSON string and returns a Lua table, or nil if decoding failed.
		
		Arguments:
		
			json_string - A JSON string to parse
			
		Returns:
		
			A Lua table - If decoding succeeded.
						
			nil - If there was a problem parsing the string.
	*/
	
	table parse( string json_string )
		[[
			JSON::parse( L, json_string );		
		]];
		
	/*	
		Function: stringify
		
		Converts a table to a JSON string. 
		
		Lua tables can have a mixture of 
		numerically indexed entries and key/value entries. This is not possible 
		with JSON; Lua tables that have indexed entries will become JSON arrays
		and those that don't will become JSON objects. JSON objects only support
		string keys, so members of Lua tables that have other types of keys will
		not be present in the output. Functions, user data or other types that 
		cannot be converted to JSON will be represented as nulls.
		
		Arguments:
		
			t - A table to convert to JSON.
			
			pretty - Whether to indent the output and make it more readable.
			
		Returns:
		
			string - A JSON representation of the table.
			
			nil - If there is a problem. 
	*/
	
	lstring stringify( table t, bool pretty = false )
		[[
			String s = JSON::stringify( L, t, pretty );
			
			if ( s.empty() )
			{
				result = NULL;
				result_len = 0;
			}
			else
			{
				result = s.c_str();
				result_len = s.length();
			}
		]];
}
