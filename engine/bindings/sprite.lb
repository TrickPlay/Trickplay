module sprite;

[[
#include "tp-clutter.h"
#include "cogl/cogl.h"
#include "clutter_util.h"
#include "spritesheet.h"
#include "sprite_sheet.lb.h"
#include <glib.h>
]]

[[

struct SpriteBinding
{
    class SignalLoadedLater : public Action
    {
        SpriteBinding * self;

        public: SignalLoadedLater( SpriteBinding * s ) : self( s ) { g_assert( s ); };

        protected: bool run()
        {
            self->signal_loaded();
            self->can_fire = true;
            return false;
        }
    };

    SpriteBinding( ClutterActor * _actor ) : async( false ), loaded( false ), can_fire( true ), constructing( false ),
                                             actor( _actor ), sprite( NULL ), sheet( NULL ), id( NULL ) {}

    ~SpriteBinding()
    {
        if ( id ) {
            g_free( id );
            id = NULL;
        }
        if ( sheet ) {
            RefCounted::unref( sheet );
            sheet = NULL;
        }
        if ( actor ) {
            clutter_actor_destroy( actor );
        }
    }
    
    const char * get_id() { return id; }
    
    void set_id( const char * new_id )
    {
        g_assert( new_id );

        /* TODO: replace strcmp with something safe */
        if ( !id || strcmp( id, new_id ) )
        {
            if ( id ) g_free( id );
            id = new_id ? g_strdup( new_id ) : NULL;
        }

        update_sprite();

    }

    void set_sheet( SpriteSheet * _sheet )
    {
        if ( sheet == _sheet ) return;

        if ( sheet ) {
            RefCounted::unref( sheet );
        }

        sheet = _sheet;

        if ( _sheet ) {
            RefCounted::ref( _sheet );
        }

        update_sprite();
    };

    void update()
    {
        static CoglHandle null_texture = cogl_texture_new_with_size( 1, 1, COGL_TEXTURE_NONE, COGL_PIXEL_FORMAT_A_8 );

        clutter_texture_set_cogl_texture( CLUTTER_TEXTURE( actor ), sprite ? sprite->get_texture() : null_texture );
        clutter_actor_queue_redraw( actor );

        loaded = sprite && sprite->is_real();

        signal_loaded_later();
    }

    void signal_loaded()
    {
        if ( async && id && sheet )
        {
            GError * error = NULL;

            if ( !sprite || sprite->is_failed() || !sprite->is_real() )
            {
                g_set_error( &error, CLUTTER_TEXTURE_ERROR, CLUTTER_TEXTURE_ERROR_BAD_FORMAT, "?" );
            }

            g_signal_emit_by_name( G_OBJECT( actor ), "load-finished", error );
        }
    }

    void signal_loaded_later()
    {
        if ( async && can_fire )
        {
            can_fire = false;
            Action::post( new SignalLoadedLater( this ) );
        }
    }

    void update_sprite()
    {
        if ( sheet && id )
        {
            sprite = sheet->get_sprite( id );

            if ( constructing ) return;

            if ( sprite )
            {
                ping.assign( sprite, SpriteBinding::on_ping, this, !async );
            }
            else
            {
                g_warning( "Spritesheet does not contain the id '%s'", id );
            }
        }
    }

    bool async;
    bool loaded;
    bool can_fire;
    bool constructing;

private:
    static void on_ping( PushTexture * source, void * target )
    {
        SpriteBinding * self = (SpriteBinding *) target;
        self->update();
    };

    PushTexture::PingMe   ping;
    ClutterActor        * actor;

    SpriteSheet::Sprite * sprite;
    SpriteSheet         * sheet;
    char * id;
};

void set_sheet_first( lua_State * L , int table )
{
    assert( table );
    lua_newtable( L );
    lua_getfield( L , table , "sheet" );
    lua_setfield( L , -2, "sheet" );

    ClutterUtil::set_props_from_table( L , lua_gettop( L ) );

    lua_pop( L, 1 );
}

void free_SpriteBinding( void * instance )
{
    delete ( (SpriteBinding *) instance );
}

#define get_binding( self ) ( (SpriteBinding *) g_object_get_data( G_OBJECT( self ), "tp-binding" ) )
#define get_ref( self ) ( (int *) g_object_get_data( G_OBJECT( self ), "tp-sheet-ref" ) )

void Sprite_on_loaded( ClutterTexture * self, gpointer error, lua_State * L );

]]

/***************************************
    Class: Sprite

	The Sprite data type references an image stored in a <SpriteSheet> object. Refer to the description of the <SpriteSheet> data type for additional information on the relationship between Sprite and SpriteSheet objects.

	A Sprite object can reference any image contained in a SpriteSheet. The Sprite references a particular image by setting its <sheet> and <id> properties. The sheet property references a SpriteSheet object and the id property contains the unique string ID that identifies a particular image in the SpriteSheet. By changing the settings of the sheet and id properties, a Sprite object can bounce between multiple images quickly.

	The Sprite data type is similar to the <Image> data type, but can be more efficient in circumstances where a large number of images must be loaded and processed by a TrickPlay application.

    In addition to the properties and functions described on this page, the Sprite data type also supports all the properties and functions defined in the <UIElement> interface.

	*See Also:* the <SpriteSheet> data type
*/

class Sprite [[ClutterActor*]] actor
{

/***************************************
    Constructor: Sprite

    The Sprite() constructor creates and initializes a new Sprite object.

    *Arguments:*

		props - optional table of Sprite property settings.

    *Return Value:* reference to the constructed Sprite object

	*Code Example:* Create a Sprite object and reference various images on various SpriteSheet objects

		(code)
		-- Create a SpriteSheet object
		imageSheet = SpriteSheet( { map = "animationFrames.json" } )

		-- Create a Sprite and initialize it to reference an image on the imageSheet
		mainSprite = Sprite( { sheet = imageSheet,
							   id    = "firstImage" } )

		-- Add the Sprite to the screen so it will be displayed
		-- Note: Only need to do this one time for a Sprite object
		screen:add( mainSprite )

		...
		-- Later in the program, reference another image on the sheet
		-- Note: No need to add the Sprite to the screen again. When the screen
		-- is updated, it will display the newly-referenced image.
		mainSprite.id = "secondImage"

		...
		-- To reference an image on a different SpriteSheet, change the sheet
		-- property, then set the id of the image on that sheet.
		mainSprite.sheet = secondSheet			-- assign the SpriteSheet first
		mainSprite.id    = "firstImage"			-- then set the desired image's ID
		(end)

	*See Also:* the <sheet> and <id> properties
*/

    Sprite( table props = 0 )
        [[
            self = lb_construct_gobject( ClutterActor, ClutterUtil::make_actor( clutter_texture_new ) );
            ClutterUtil::initialize_actor( L, self, SPRITE_METATABLE );

            int *my_sheet_ref = g_new( int, 1 );
            *my_sheet_ref = LUA_REFNIL;
            g_object_set_data( G_OBJECT( self ), "tp-binding", new SpriteBinding( self ) );
            g_object_set_data_full( G_OBJECT( self ), "tp-sheet-ref", my_sheet_ref, g_free );
            * get_ref( self ) = LUA_REFNIL;

            if ( props )
            {
                get_binding(self)->constructing = true;

                set_sheet_first( L, props );

                ClutterUtil::set_props_from_table( L, props );

                get_binding(self)->constructing = false;

                get_binding(self)->update_sprite();
            }

            g_object_unref( self );
        ]];

    ~Sprite()
        [[
            if ( * get_ref( self ) ) lb_strong_unref( L, * get_ref( self ) );

            delete( get_binding( self ) );
        ]];

/***************************************
    Property: sheet

	The sheet property references a <SpriteSheet> object. To reference a particular image in the SpriteSheet, set the Sprite object's <id> property.

	If both the SpriteSheet and the image ID must be changed, modify the SpriteSheet referenced by the sheet property first; afterward, set the id property.

	*Default Setting:* nil

	*See Also:* the <id> property
*/

    SpriteSheet sheet
        [[
            lb_strong_deref( L, * get_ref( self ) );
        ]]
        [[
            SpriteBinding * binding = get_binding( self );
            if ( * get_ref( self ) ) lb_strong_unref( L, * get_ref( self ) );

            SpriteSheet * new_sheet = LB_GET_SPRITESHEET( L, 2 );

            if ( new_sheet )
            {
                binding->set_sheet( new_sheet );
                * get_ref( self ) = lb_strong_ref( L );
            }
            else
            {
                /* TODO: free previously assigned resources */
                g_warning( "Failed to set 'sheet': not a SpriteSheet." );
                binding->set_sheet( NULL );
                * get_ref( self ) = LUA_REFNIL;
            }
        ]];

/***************************************
    Property: id

	The id property specifies the unique string ID of a particular image contained on a SpriteSheet.

	If both the SpriteSheet and the image ID must be changed, modify the SpriteSheet referenced by the sheet property first; afterward, set the id property.

	*Default Setting:* nil

	*See Also:* the <sheet> property
*/

    string id
        [[
            id = get_binding( self )->get_id();
        ]]
        [[
            SpriteBinding * binding = get_binding( self );
            const char * new_id = lua_tostring( L , -1 );

            g_object_set_data_full( G_OBJECT( self ), "tp-src",
                g_strdup_printf( "[Sprite] \"%s\"", new_id ? new_id : "" ), g_free );

            binding->set_id( new_id );
        ]];

/***************************************
    Property: async

    The async property is a boolean value that determines whether the image file associated with the Sprite (as defined by the Sprite object's <sheet> and <id> properties) is loaded synchronously (async=false) or asynchronously (async=true).

    Asynchronously-loaded images enable your application to continue to run while the image is loading. After the image is completely loaded, your application is notified by the firing of an <on_loaded> event.

    After starting one asynchronous load, it is possible for your application to begin a second Sprite-load (synchronous or asynchronous) before the first load completes. There is no guarantee, however, that load operations will complete in the same order in which they were started; it is possible that the second load will finish before the first load. Therefore, your code should not contain any assumptions about the order in which Sprites finish loading.

    To load the Sprite image asynchronously, the async property must be initialized prior to beginning the load operation. The load operation may occur when the Sprite is created or when its sheet or id property changes.

    *Default Setting:* false, i.e., Sprite images are loaded synchronously

    *See Also:* the <on_loaded> event and the <sheet> and <id> properties
*/

    bool async
        [[
            async = get_binding( self )->async;
        ]]
        [[
            get_binding( self )->async = async;
        ]];

/***************************************
    Property: loaded

	The loaded property is a boolean flag indicating the success or failure of the synchronous loading of the image referenced by the object's <sheet> and <id> properties (true=success).

	Note: The loaded property cannot be used to determine the result or status of an asynchonously-loaded image. To receive status notification of an asynchronously-loaded image, register an <on_loaded> event handler.

    *Default Setting:* false

    *See Also:* the <id> property
*/

    readonly bool loaded
        [[
            loaded = get_binding( self )->loaded;
        ]];

/***************************************
    Function: add_onloaded_listener

    The add_onloaded_listener() function registers a handler function for <on_loaded> events.

    *Arguments*

        f - reference to handler function. The function prototype is described below.

    *Return Value:* Handle to the registered handler. Pass this handle to the <remove_onloaded_listener> function to unregister the handler.

    *Handler Prototype:*

		(code)
		f( loadedSprite, failed )
		(end)

    *Handler Arguments:*

        loadedSprite - the Sprite object that has loaded the image
        failed - boolean value indicating failure or success of the load operation (true=failure)

    *Handler Return Value:* None

    *See Also:* the <on_loaded> event and the <remove_onloaded_listener> function
*/

    int add_onloaded_listener( function f )
        [[
            result = UserData::get( L )->add_callback( (char *) "on_loaded" , L );
            UserData::get( L )->connect_signal( "on_loaded",
                "load-finished", (GCallback) Sprite_on_loaded, L );
        ]];

/***************************************
    Function: remove_onloaded_listener

    The remove_onloaded_listener() function unregisters the specified event handler.

    *Arguments:*

        ref - handle for event handler to unregister. This handle is returned by the <add_onloaded_listener> function.

    *Return Value:* None

    *See Also:* the <add_onloaded_listener> function
*/

    remove_onloaded_listener( int ref )
        [[
            UserData::get( L )->remove_callback( (char *) "on_loaded" , L );
        ]];

/***************************************
    Event: on_loaded

    The on_loaded event occurs when an asynchronously-loaded sprite image has finished loading.

    *See Also:* the <add_onloaded_listener> function
*/

    function on_loaded
        [[
            return UserData::get( L )->get_last_callback( (char *) "on_loaded" , L );
        ]]
        [[
            UserData::get( L )->set_last_callback( (char *) "on_loaded" , L );
            UserData::get( L )->connect_signal( "on_loaded",
                "load-finished", (GCallback) Sprite_on_loaded, L );
        ]];

/***************************************


*/

    /*
        This makes sure sheet is set first so that id can be verified.
    */

    UIElement set( table props )
        [[
            luaL_checktype( L, -1, LUA_TTABLE );

            get_binding(self)->constructing = true;

            set_sheet_first( L, props );
            ClutterUtil::set_props_from_table( L, props );

            lua_pushvalue( L, 1 );

            get_binding(self)->constructing = false;

            get_binding(self)->update_sprite();
        ]];
}

[[

void Sprite_on_loaded( ClutterTexture * self, gpointer failed, lua_State * L )
{
    if ( get_binding( self )->async )
    {
        lua_pushboolean( L, !!failed );
        UserData::invoke_callbacks( G_OBJECT( self ), "on_loaded", 1, 0, L );
    }
}

]]
