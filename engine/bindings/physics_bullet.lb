
module physics_bullet;

[[
#include "physics_bullet.h"
#include "clutter_util.h"
]]

interface PBBody [[ void * ]]
{
}

global pb [[ Bullet::World * ]] 
{
    pb()
        [[
            self = lb_construct( Bullet::World , new Bullet::World( L , 64 ) );
        ]];
        
    ~pb()
        [[
            delete self;
        ]];
        
    table gravity
        [[
            lua_newtable( L );
            btVector3 g = self->get_world()->getGravity();
            lua_pushnumber( L , g.x() );
            lua_rawseti( L , -2 , 1 );
            lua_pushnumber( L , g.y() );
            lua_rawseti( L , -2 , 2 );
            lua_pushnumber( L , g.z() );
            lua_rawseti( L , -2 , 3 );
        ]]
        [[
            lua_rawgeti( L , -1 , 1 );
            lua_rawgeti( L , -2 , 2 );
            lua_rawgeti( L , -3 , 3 );
            btVector3 g( lua_tonumber( L , -3 ) , lua_tonumber( L , -2 ) , lua_tonumber( L , -1 ) );
            lua_pop( L , 3 );
            self->get_world()->setGravity( g ); 
        ]];        
        
    step( double time_step = 1.0f/60.0f , int max_sub_steps = 1 , double fixed_time_step = 1.0f/60.0f )
        [[
            self->step( time_step , max_sub_steps , fixed_time_step );
        ]];          
        
    PBBody Body( UIElement element , table properties )
        [[
            lb_check_udata_type( L , element , "actor" );

            int n = self->create_body( element , properties , PBBODY_METATABLE );

            if ( ! n )
            {
                lua_pushnil( L );
            }
            else
            {
                ClutterUtil::set_props_from_table( L , properties );
            }
        ]];               
}