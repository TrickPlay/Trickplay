
module physics_bullet;

[[
#include "physics_bullet.h"
#include "clutter_util.h"
]]

interface PBBody [[ void * ]]
{
}

interface PBShape [[ btCollisionShape * ]]
{
    PBShape()
        [[
            self = lb_construct( btCollisionShape , lua_touserdata( L , -2 ) );
        ]];
        
    ~PBShape()
        [[
            // Not deleted because they are owned by the world
        ]];
}

interface PBBody3d [[ btCollisionObject * ]]
{
    PBBody3d()
        [[
            self = lb_construct( btCollisionObject , lua_touserdata( L , -2 ) );
        ]];
        
    ~PBBody3d()
        [[
            // Not deleted because they are owned by the world
        ]];
        
    readonly int handle
        [[
            handle = GPOINTER_TO_INT( self->getUserPointer() );
        ]];

    Matrix get_transform( Matrix matrix )
        [[
            if ( UserData * ud = UserData::get_check( L , matrix ) )
            {
                // FIXME - NOT CHECKING THE TYPE OF THE UDATA. 
                // BAD-MEMORY CORRUPTION VERY EASILY
                // GOOD-PERFORMANCE
                
                CoglMatrix * matrix = ( CoglMatrix * ) ud->get_client();
        
                float m[16];
        
                btTransform transform( self->getWorldTransform() );
        
                transform.getOpenGLMatrix( m );
        
                cogl_matrix_init_from_array( matrix , m );
            }
            
            lua_pushvalue( L , matrix );
        ]];
}

global pb [[ Bullet::World * ]] 
{
    pb()
        [[
            self = lb_construct( Bullet::World , new Bullet::World( L , 64 ) );
        ]];
        
    ~pb()
        [[
            delete self;
        ]];
        
    table gravity
        [[
            lua_newtable( L );
            btVector3 g = self->get_world()->getGravity();
            lua_pushnumber( L , g.x() );
            lua_rawseti( L , -2 , 1 );
            lua_pushnumber( L , g.y() );
            lua_rawseti( L , -2 , 2 );
            lua_pushnumber( L , g.z() );
            lua_rawseti( L , -2 , 3 );
        ]]
        [[
            lua_rawgeti( L , -1 , 1 );
            lua_rawgeti( L , -2 , 2 );
            lua_rawgeti( L , -3 , 3 );
            btVector3 g( lua_tonumber( L , -3 ) , lua_tonumber( L , -2 ) , lua_tonumber( L , -1 ) );
            lua_pop( L , 3 );
            self->get_world()->setGravity( g ); 
        ]];        
        
    step( double time_step = 1.0f/60.0f , int max_sub_steps = 1 , double fixed_time_step = 1.0f/60.0f )
        [[
            self->step( time_step , max_sub_steps , fixed_time_step );
        ]];
        
    table get_contacts( double max_distance = 0 , PBBody3d body1 = 0 , PBBody3d body2 = 0 )
        [[
            btCollisionObject * co1 = body1 ? ( btCollisionObject * ) UserData::get_client_check( L , body1 ) : 0;
            btCollisionObject * co2 = body2 ? ( btCollisionObject * ) UserData::get_client_check( L , body2 ) : 0;
            
            self->get_contacts( max_distance , co1 , co2 );
        ]];          
        
    PBBody Body( UIElement element , table properties )
        [[
            lb_check_udata_type( L , element , "actor" );

            int n = self->create_body( element , properties , PBBODY_METATABLE );

            if ( ! n )
            {
                lua_pushnil( L );
            }
            else
            {
                ClutterUtil::set_props_from_table( L , properties );
            }
        ]];
        
    PBBody3d Body3d( table properties )
        [[
            if ( ! self->create_body_3d( properties ) )
            {
                lua_pushnil( L );
            }
        ]];
        
/*        
    PBBody3d Sensor3d( table properties )
        [[
            if ( ! self->create_sensor( properties ) )
            {
                lua_pushnil( L );
            }
        ]];
*/

    PBShape BoxShape( double half_width , double half_height , double half_depth )
        [[
            self->create_shape( new btBoxShape( btVector3( half_width , half_height , half_depth ) ) );              
        ]];                 
        
    PBShape StaticPlaneShape( double normal_x , double normal_y , double normal_z , double plane_constant )
        [[
            self->create_shape( new btStaticPlaneShape( btVector3( normal_x , normal_y , normal_z ) , plane_constant ) );
        ]];
        
    PBShape SphereShape( double radius )
        [[
            self->create_shape( new btSphereShape( radius ) );
        ]];
        
    callback on_step( double seconds );
}