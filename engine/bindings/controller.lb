[[
#include "controller_delegates.h"
#include "json.h"
#include "app.h"
]]

#==============================================================================

/*
    Interface: Controller
    
    This interface represents a controller that is connected to TrickPlay. You cannot
    create new Controllers, they are created automatically by TrickPlay when they
    connect.
*/

interface controller [[ControllerDelegate*]]
{
    controller()
        [[
            self=lb_construct( ControllerDelegate , lua_touserdata(L,-2) );
        ]];
        
    ~controller()
        [[
            delete self;    
        ]];
        
    /*
        Property: is_connected
        
        Lets you know if this controller is still connected to TrickPlay. It is possible
        for a controller to disconnect but its object to remain alive in your app.
    */
    
    readonly bool is_connected
        [[
            is_connected=self->get_controller()->is_connected();    
        ]];
    
    /*
        Property: name
        
        The name that the controller reports, which could be something like "Bill's phone".
    */
        
    readonly string name
        [[
            String s(self->get_controller()->get_name());
            name=s.c_str();    
        ]];
        
    /*
        Property: id
        
        A string that identifies this controller. In some cases, this string will be the same
        when a controller connects for a second time.
    */        
    
    readonly string id
        [[
           String s( self->get_controller()->get_id());
           id = s.c_str();
        ]];
        
    /*
        Property: has_keys
        
        This property tells you whether the controller can send key events.
    */
    
    readonly bool has_keys
        [[
            has_keys=self->has_cap(TP_CONTROLLER_HAS_KEYS);    
        ]];

    /*
        Property: has_accelerometer
        
        Whether the controller has an accelerometer.
    */
    
    readonly bool has_accelerometer
        [[
            has_accelerometer=self->has_cap(TP_CONTROLLER_HAS_ACCELEROMETER);
        ]];
        
    readonly bool has_clicks
        [[
            has_clicks=false;
        ]];

    /*
        Property: has_pointer

        Whether the controller can send pointer events.
    */
    
    readonly bool has_pointer
        [[
            has_pointer=self->has_cap(TP_CONTROLLER_HAS_POINTER);
        ]];
    
    /*
        Property: has_touches
        
        Whether the controller can send touch events.
    */    
    
    readonly bool has_touches
        [[
            has_touches=self->has_cap(TP_CONTROLLER_HAS_TOUCHES);    
        ]];
    
    /*
        Property: has_multiple_choice
        
        Whether the controller supports a multiple choice UI.
    */
        
    readonly bool has_multiple_choice
        [[
            has_multiple_choice=self->has_cap(TP_CONTROLLER_HAS_MULTIPLE_CHOICE); 
        ]];
        
    /*
        Property: has_sound
        
        Whether the controller can play sounds.
    */        
    
    readonly bool has_sound
        [[
            has_sound=self->has_cap(TP_CONTROLLER_HAS_SOUND);    
        ]];
    
    /*
        Property: has_ui
        
        Whether the controller supports a user interface display.
    */
        
    readonly bool has_ui
        [[
            has_ui=self->has_cap(TP_CONTROLLER_HAS_UI);
        ]];
        
    /*
        Property: has_text_entry
        
        Whether the controller supports text entry.
    */
           
    readonly bool has_text_entry
        [[
            has_text_entry=self->has_cap(TP_CONTROLLER_HAS_TEXT_ENTRY);
        ]];
    
    /*
        Property: has_images
        
        Whether the controller supports sending images.
    */
           
    readonly bool has_images
        [[
            has_images=self->has_cap(TP_CONTROLLER_HAS_IMAGES);
        ]];
    
    /*
        Property: has_audio_clips
        
        Whether the controller supports sending audio clips.
    */
           
    readonly bool has_audio_clips
        [[
            has_audio_clips=self->has_cap(TP_CONTROLLER_HAS_AUDIO_CLIPS);
        ]];
    
    /*
        Property: has_advanced_ui

        Whether the controller supports advanced UI functions.
    */

    readonly bool has_advanced_ui
        [[
            has_advanced_ui = self->has_cap( TP_CONTROLLER_HAS_ADVANCED_UI );
        ]];
        
    /*
        Property: is_advanced_ui_ready
    */
    
    readonly bool is_advanced_ui_ready
        [[
            is_advanced_ui_ready = self->get_controller()->is_advanced_ui_ready();
        ]];
        
    /*
        Property: has_virtual_remote
        
        Whether the controller supports a virtual remote.
    */        
    
    readonly bool has_virtual_remote
        [[
            has_virtual_remote = self->has_cap( TP_CONTROLLER_HAS_VIRTUAL_REMOTE );
        ]];

    /*
        Property: ui_size
        
        This property returns a table containing the width and height 
        of the controller's UI display area.
    */    
    
    readonly table ui_size
        [[
            unsigned int w;
            unsigned int h;
            
            self->get_controller()->get_ui_size(w,h);
            
            lua_newtable(L);
            lua_pushinteger(L,w);
            lua_rawseti(L,-2,1);
            lua_pushinteger(L,h);
            lua_rawseti(L,-2,2);
        ]];
        
    /*
        Property: input_size
        
        Returns a table containing the width and height of the controller's
        input area - the area for touch and click events.
    */
    
    readonly table input_size
        [[
            unsigned int w;
            unsigned int h;
            
            self->get_controller()->get_input_size(w,h);
            
            lua_newtable(L);
            lua_pushinteger(L,w);
            lua_rawseti(L,-2,1);
            lua_pushinteger(L,h);
            lua_rawseti(L,-2,2);
        ]];
    
    /*
        Function: reset
        
        Resets the controller to its default state. The controller will 
        stop sending all events other than key events and its UI, if any,
        will be cleared.
        
        Returns:
        
            true - If it was successful.
            
            false - Otherwise.
    */
        
    bool reset()
        [[
            result=self->get_controller()->reset();    
        ]];
        
    /*
        Function: start_accelerometer
        
        Tells the controller to start sending accelerometer events.
        
        Arguments:
        
            filter - A string that can be "L" for a low-pass filter
                     or "H" for a high pass filter.
                     
            interval - The interval, in seconds, between events.
        
        Returns:
        
            true - If it was successful.
            
            false - Otherwise.
    */

    bool start_accelerometer(string filter,double interval)
        [[
            Controller::AccelerometerFilter f=Controller::NONE;
            
            if (filter)
            {
                if (*filter=='L'||*filter=='l')
                {
                    f=Controller::LOW;
                }
                else if (*filter=='H'||*filter=='h')
                {
                    f=Controller::HIGH;
                }
            }

            result=self->get_controller()->start_accelerometer(f,interval);
        ]];

    /*
        Function: stop_accelerometer
        
        Tells the controller to stop sending accelerometer events.
        
        Returns:
        
            true - If it was successful.
            
            false - Otherwise.
    */
            
    bool stop_accelerometer()
        [[
            result=self->get_controller()->stop_accelerometer();    
        ]];
        

    /*
        Function: start_pointer

        Tells the controller to start sending pointer events.

        Returns:

            true - If it was successful.

            false - Otherwise.
    */

    bool start_pointer()
        [[
            result=self->get_controller()->start_pointer();
        ]];
        
    /*
        Function: stop_pointer

        Tells the controller to stop sending pointer events.

        Returns:

            true - If it was successful.

            false - Otherwise.
    */

    bool stop_pointer()
        [[
            result=self->get_controller()->stop_pointer();
        ]];
    
    /*
        Function: start_touches
        
        Tells the controller to start sending touch events.
        
        Returns:
        
            true - If it was successful.
            
            false - Otherwise.
    */
        
    bool start_touches()
        [[
            result=self->get_controller()->start_touches();
        ]];
        
    /*
        Function: stop_touches
        
        Stop sending touch events.
            
        Returns:
        
            true - If it was successful.
            
            false - Otherwise.
    */
    
    bool stop_touches()
        [[
            result=self->get_controller()->stop_touches();
        ]];

    # Deprecated, use the other one
    
    bool show_multiple_choice_ui()
        [[
            g_warning("DEPRECATED CALL TO controller:show_multiple_choice_ui");
            result=false;
        ]];
        
    /*
        Function: show_multiple_choice
        
        Tells the controller to show a simple UI with a list of choices. The
        user of the controller will be able to click on the choices and the
        controller will generate an <on_ui_event> with the identifier of the 
        choice.
        
        Note that the controller will not automatically dismiss the multiple
        choice UI when the user makes a choice; you have to call <clear_ui>.
        
        > controller:show_multiple_choice( "Pick a state" , "1" , "California" , "2" , "Texas" )
        
        Arguments:
        
            label - A string that describes the list of choices. The controller 
                    will usually display this label above the list of choices.
                    
            others - After the label, you can pass a number of identifier/label
                     pairs. The controller will display each label as a choice 
                     and will retain its associated identifier to send back 
                     in an <on_ui_event>.
            
        Returns:
        
            true - If it was successful.
            
            false - Otherwise.
    */
            
    bool show_multiple_choice(string label,...)
        [[
            StringPairList list;
            
            int count=lua_gettop(L);
            
            for (int i=3;i+1<=count;i+=2)
            {
                const char * id=lua_tostring(L,i);
                const char * choice=lua_tostring(L,i+1);                

                if (id && choice)
                    list.push_back(StringPair(String(id),String(choice)));
            }
            
            result=list.empty()?false:self->get_controller()->show_multiple_choice(label,list);
        ]];

    /*
        Function: clear_ui
        
        Removes all UI elements from the controller's screen.
                    
        Returns:
        
            true - If it was successful.
            
            false - Otherwise.
    */
    
    bool clear_ui()
        [[
            result=self->get_controller()->clear_ui();    
        ]];
    
    # Deprecated, use the other one
    
    bool set_background(string resource)
        [[
            g_warning("DEPRECATED CALL TO controller:set_background");            
            result=false;
        ]];

    /*
        Function: set_ui_background
        
        Tells the controller to set its background to an image that
        you specify. Images are declared to the controller 
        using <declare_resource>.
        
        Arguments:
        
            resource - Name of the image resource.
            
            mode - One of "CENTER", "TILE" or "STRETCH".

        Returns:
        
            true - If it was successful.
            
            false - Otherwise.
    */
    
    bool set_ui_background(string resource,string mode="STRETCH")
        [[
            Controller::UIBackgroundMode m = Controller::STRETCH;
            
            if (mode)
            {
                if (*mode=='C'||*mode=='c')
                {
                    m=Controller::CENTER;
                }
                else if (*mode=='T'||*mode=='t')
                {
                    m=Controller::TILE;
                }
            }
            
            result=self->get_controller()->set_ui_background(resource,m);
        ]];

    /*
        Function: set_ui_image
        
        Tells the controller to place the given image at the given coordinates
        with the given size.
        
        Arguments:
        
            resource - Name of an image resource declared with <declare_resource>.
            
            x,y - The position of the image.
            
            width,height - The size of the image.

        Returns:
        
            true - If it was successful.
            
            false - Otherwise.
    */
            
    bool set_ui_image(string resource,int x,int y,int width,int height)
        [[
            result=self->get_controller()->set_ui_image(resource,x,y,width,height);    
        ]];

    /*
        Function: play_sound
        
        Tells the controller to play a sound.
        
        Arguments:
        
            resource - Name of a sound resource declared with <declare_resource>.
            
            loop - How many times to play the sound. 

        Returns:
        
            true - If it was successful.
            
            false - Otherwise.
    */
    
    bool play_sound(string resource, int loop)
        [[
            result=self->get_controller()->play_sound(resource,loop);
        ]];

    /*
        Function: stop_sound
        
        Tells the controller to stop playing sounds.
        
        Returns:
        
            true - If it was successful.
            
            false - Otherwise.      
    */
    
    bool stop_sound()
        [[
            result=self->get_controller()->stop_sound();
        ]];

    /*
        Function: declare_resource
        
        This function is used to associate a name with a resource,
        such as an image or a sound file. You can also use a URL
        as the second parameter.
        
        Declaring a resource gives it a name that can be used in
        future calls. The controller may need to download the resource
        before it is used, so it is a good idea to declare resources
        early.
        
        Arguments:
        
            resource - A name for the resource.
            
            url - A path or URL to the resource.
                    
        Returns:
        
            true - If it was successful.
            
            false - Otherwise.      
    */

    bool declare_resource(string resource, string url)
        [[
            result=false;
            
            bool is_uri=false;
            
            App * app = App::get(L);

            gchar * path=app->normalize_path(url,&is_uri);
            
            if (path)
            {
                String final_uri(path);
                g_free(path);
                
                if (!is_uri)
                {
                    final_uri="file://"+final_uri;
                }
                
                result=self->declare_resource(resource,final_uri);
            }
        ]];
        
    /*
        Function: enter_text
        
        Tells the controller to show a text entry UI, such as a keyboard, and 
        allow the user to enter or edit text. Once the text has been entered, it
        will be sent back to your app via <on_ui_event>.
        
        Arguments:
        
            label - A caption for the text.
            
            text - The initial text to edit.
         
        Returns:
        
            true - If it was successful.
            
            false - Otherwise.      
    */
            
    bool enter_text(string label,string text)
        [[
            result=self->get_controller()->enter_text(label,text);    
        ]];

    /*
        Function: request_image
        
        Tells the controller to send an image. The app will receive the image via <on_image>.
        If the user cancels the image selection, the app will receive <on_image_cancelled>.
        
        Arguments:
        
            max_dimensions - An optional table containing two integers. The first is the
                             maximum desired width for the image. The second is the maximum
                             desired height for the image. If they are both zero or not
                             provided, the image will be sent at its original dimensions.

            edit -           If true, the controller may give the user a chance to edit
                             the image before it is submitted.  Default is false

            mask -           This should be the name of an image previously declared as a
                             resource. When it is present, the controller will composite the
                             mask with the image and submit the result.  Pass "" for no mask.

            dialog_label -   This should be a text label to place on the controller's screen
                             as a prompt for the user to select an image or capture a new one.
                             Default value is "Send image to TV".

            cancel_label -   This should be a text label for the "cancel" button.  Default is
                             "Cancel", but you may wish to relabel this depending on how your app
                             will respond to such a cancellation -- "Use default" might be more
                             appropriate if user cancelling will result in a default image being
                             used instead, for example.
         
        Returns:
        
            true - If it was successful.
            
            false - Otherwise.      
    */
            
    bool request_image( table max_dimensions = 0 , bool edit = false , string mask = "", string dialog_label = "SendImageToTV", string cancel_label = "Cancel" )
        [[
            unsigned int max_width = 0;
            unsigned int max_height = 0;

            if ( max_dimensions )
            {
                lua_rawgeti( L , max_dimensions , 1 );
                max_width = lua_tointeger( L , -1 );
                lua_pop( L , 1 );
                lua_rawgeti( L , max_dimensions , 2 );
                max_height = lua_tointeger( L , -1 );
                lua_pop( L , 1 );
            }

            result=self->get_controller()->request_image( max_width , max_height , edit , String( mask ), String( dialog_label ), String( cancel_label ) );
        ]];

    /*
        Function: request_audio_clip
        
        Tells the controller to send an audio clip. The app will receive the audio clip via <on_audio_clip>.
        If the user cancels the audio selection, the app will receive <on_audio_clip_cancelled>.

        Arguments:

            dialog_label -   This should be a text label to place on the controller's screen
                             as a prompt for the user to select an image or capture a new one.
                             Default value is "Send audio to TV".

            cancel_label -   This should be a text label for the "cancel" button.  Default is
                             "Cancel", but you may wish to relabel this depending on how your app
                             will respond to such a cancellation -- "Use default" might be more
                             appropriate if user cancelling will result in a default image being
                             used instead, for example.

        Returns:
        
            true - If it was successful.
            
            false - Otherwise.      
    */
            
    bool request_audio_clip( string dialog_label = "SendAudioToTV", string cancel_label = "Cancel" )
        [[
            result=self->get_controller()->request_audio_clip( String( dialog_label ), String( cancel_label ) );
        ]];

    /*
        Function: advanced_ui
    */
      
    table advanced_ui( table payload )
        [[
            JSON::Value value = JSON::to_json( L , payload );

            if ( ! value.is<JSON::Array>() && ! value.is<JSON::Object>() )
            {
                lua_pushnil( L );
            }
            else
            {
                String response;

                bool result = self->get_controller()->advanced_ui( value.stringify() , response );

                if ( ! result )
                {
                    lua_pushnil( L );
                }
                else
                {
                    JSON::parse( L , response.c_str() );
                }
            }
        ]];
        
    /*
        Function: show_virtual_remote
        
        Instructs the controller to show a virtual remote.

        Returns:
        
            true - If it was successful.
            
            false - Otherwise.      
    */
    
    bool show_virtual_remote()
        [[
            result = self->get_controller()->show_virtual_remote();
        ]];        

    /*
        Function: hide_virtual_remote
        
        Instructs the controller to hide the virtual remote.

        Returns:
        
            true - If it was successful.
            
            false - Otherwise.      
    */
    
    bool hide_virtual_remote()
        [[
            result = self->get_controller()->hide_virtual_remote();
        ]];        

    /*
        Event: on_disconnected
        
        This event is triggered when the controller is disconnected from
        TrickPlay.
        
        Arguments:
        
            controller - The controller that was disconnected.          
    */  
    
    callback on_disconnected;
    
    /*
        Event: on_key_down
        
        A key down event.
        
        Arguments:
        
            controller - The controller that generated the event.
            
            key code - The numeric code of the key.
            
            unicode - The unicode value of the key or 0.
            
        Returns:
        
            false - If you don't want the event to be propagated.
    */
    
    callback on_key_down;
    
    /*
        Event: on_key_up
        
        A key up event.
        
        Arguments:
        
            controller - The controller that generated the event.
            
            key code - The numeric code of the key.
            
            unicode - The unicode value of the key or 0.

        Returns:
        
            false - If you don't want the event to be propagated.
    */

    callback on_key_up;
    
    /*
        Event: on_accelerometer
        
        An accelerometer event.
        
        Arguments:
        
            controller - The controller that generated the event.
            
            x,y,z - The three values of the accelerometer.
    */
    
    callback on_accelerometer;

    /*
        Event: on_pointer_move
        
        A pointer move event.
        
        Arguments:
        
            controller - The controller that generated the event.
            
            x,y - The coordinates of the event.

        Returns:

            false - If you don't want the event to be propagated.
    */
        
    callback on_pointer_move;

    /*
        Event: on_pointer_button_down

        A pointer button was pressed.

        Arguments:

            controller - The controller that generated the event.

            button - The button, starting at 0.

            x,y - The coordinates of the event.

        Returns:

            false - If you don't want the event to be propagated.
    */

    callback on_pointer_button_down;

    /*
        Event: on_pointer_button_up

        A pointer button was released.

        Arguments:

            controller - The controller that generated the event.

            button - The button, starting at 0.

            x,y - The coordinates of the event.

        Returns:

            false - If you don't want the event to be propagated.
    */

    callback on_pointer_button_up;

    /*
        Event: on_touch_down
        
        A touch down event.

        Arguments:
        
            controller - The controller that generated the event.
            
            finger - The finger, starting at 0.

            x,y - The coordinates of the event.
    */
        
    callback on_touch_down;
    
    /*
        Event: on_touch_move
        
        A touch move event.

        Arguments:
        
            controller - The controller that generated the event.
            
            finger - The finger, starting at 0.

            x,y - The coordinates of the event.
    */

    callback on_touch_move;
    
    /*
        Event: on_touch_up
        
        A touch up event.

        Arguments:
        
            controller - The controller that generated the event.
            
            finger - The finger, starting at 0.

            x,y - The coordinates of the event.
    */

    callback on_touch_up;

    /*
        Event: on_ui_event
        
        A UI event. This is sent when you use <show_multiple_choice> or 
        <enter_text>.
        
        Arguments:
        
            controller - The controller that generated the event.
            
            text - The text of the event. Either an identifier for a 
                   multiple choice, or the resulting text of <enter_text>.
    */
    
    callback on_ui_event;


    /*
        Event: on_image
        
        An image event. This is sent when you use <request_image> and the user sends and image from
        the controller.
        
        Arguments:
            controller - The controller that generated the event.
            
            bitmap - The bitmap received from the controller.
            
    */

    callback on_image;

    /*
        Event: on_image_cancelled
        
        This is sent when the user cancels sending an image after you use <request_image>
        
        Arguments:
            controller - The controller that generated the event
    */

    callback on_image_cancelled;

    /*
        Event: on_audio_clip_cancelled
        
        This is sent when the user cancels sending an audio clip after you use <request_audio_clip>
        
        Arguments:
            controller - The controller that generated the event
    */

    callback on_audio_clip_cancelled;

    /*
        Event: on_advanced_ui_ready

        This event lets you know that the controller's advanced UI capabilities
        are ready for use.
    */

    callback on_advanced_ui_ready;


    /*
        Event: on_advanced_ui_event
        
        An advanced UI event has been received.
    */
    
    callback on_advanced_ui_event;
    
    /* TODO:Undocumented. We may want to restrict this one or move it somewhere else */

    bool save_key_map( table map )
        [[

#ifndef TP_PRODUCTION

            Controller::KeyMap km;
    
            lua_pushnil( L );

            while( lua_next( L , map ) )
            {
                if ( lua_isnumber( L , -2 ) && lua_isnumber( L , -1 ) )
                {
                    km.insert( std::make_pair( lua_tonumber( L , -2 ) , lua_tonumber( L , -1 ) ) );
                }
                lua_pop( L , 1 );
            }

            result = self->get_controller()->save_key_map( km );

#else
            result = false;
#endif

        ]];
}


