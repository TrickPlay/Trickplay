
Title: Localization

The strings and images used by a TrickPlay application can be localized for any desired language and country. This section describes the elements and directory organization related to localization. An extended code example is described in the <Localization Sample Application> section.



Group: Defining the Language and Country

The application's language and country are specified in two operating system environment variables: TP_system_language and TP_system_country.

	TP_system_language - string containing the two-character lowercase <ISO-639-1 language code at http://www.loc.gov/standards/iso639-2/php/code_list.php>. The default setting is "en" (English).
	TP_system_country - string containing the two-character uppercase <ISO-3166-1 alpha-2 country code at http://www.iso.org/iso/iso-3166-1_decoding_table>. The default setting is "US" (United States).

	The "export" commands shown below define the two environment variables. The string settings may have to be surrounded by single or double quotation marks, depending upon the Linux shell.

	(code)
	export TP_system_language="ko"
	export TP_system_country="KR"
	(end)

	The language and country can alternatively be specified in the .trickplay configuration file. The .trickplay configuration file is a standard text file stored in the user's home directory. It contains configuration keys to set up the TrickPlay Engine for a particular development environment. Complete details about the .trickplay file are described in the <TrickPlay Configuration Keys> section of the Programmer's Guide.

	When defined in the .trickplay file, the key names are identical to the environment variable names, but without the TP_ prefix. An example .trickplay file is shown below.

	(code)
	-- Configuration keys defined in .trickplay file
	system_language="ko"
	system_country="KR"
	(end)



Group: The Application Bundle Directory Organization

	A TrickPlay application should be organized so all its files are grouped within a single top-level directory called its "application bundle." In an application's bundle, TrickPlay recognizes a special subdirectory called "localized." The "localized" directory can be further organized with subdirectories named after each of the supported languages and countries. A sample directory structure for a program called myApp is shown below.

(see localizationDirStruct.png)

	Each of the language/country directories should have files that contain the application's strings, images and other resources localized for that particular language/country.

	When dealing with strings, a useful technique to follow is to store the localized strings in a table prefaced with a Lua return statement, such as that shown below.

	(code)
	-- File "strings.lua" containing table of localized text strings

	return{
		yes = "oui",
		no = "non"
	}
	(end)

	The application can then load and reference the localized strings by executing the following code statements.

	(code)
	-- Load localized strings
	strings = dofile( "localized:strings.lua" )

	-- Reference localized strings
	print( strings.yes )
	(end)

	When searching for the appropriate strings.lua file to load, TrickPlay searches subdirectories in the application bundle based on the settings of TP_system_language and TP_system_country. The directories are searched in the following order.

	(code)
	myApp/localized/<Language>/<Country>
	myApp/localized/<Language>
	myApp/localized
	myApp
	(end)

	This search order enables a generic or default strings.lua file to be stored in upper directory levels. For example, a strings.lua file to handle both US and British English could be stored in the /localized/en directory. For all languages/countries not supported with dedicated localization files, a strings.lua file containing localized strings in a default language could be stored in the /localized or the myApp directories. In all these situations, the single Lua dofile() statement shown above loads the appropriate file automatically, based upon the current language/country settings.



Group: Localized Image Files

	Localized image files can be handled using a table in the same manner as strings, but there is a more convenient method available. When referencing the file's name, simply precede the name with the "localized:" prefix. When resolving the file specification, the application bundle's subdirectories are searched in the same order as that shown above for strings. For example, if localized versions of a "splash.png" splash-screen image were stored in each of the supported language/country directories, the following code statement would load the appropriate file based upon the current language/country settings.

	(code)
	splashImage = Image( src = "localized:splash.png" )
	(end)



Group: Localized Code Execution

	In addition to localized text and images, localized code can also be organized following the described directory structure. As an example, an application may perform special initialization depending upon the language/country. Such code might be stored in files called "init.lua" with each supported language/country directory containing its own init.lua file, each file containing the unique initialization operations necessary for the particular language/country. The code statement shown below would run the appropriate init.lua file based on the current language/country settings.

	(code)
	dofile( "localized:init.lua" )
	(end)

