
Title: Getting Started

Group: The App Bundle

The first step in writing a new app is to create a directory for it. Your app's
directory is called its *app bundle* - it contains metadata, source code and any
resources your app needs, such as images.

There are only two strict requirements for an app bundle::

- It must have a metadata file called "app"
- It must have its main source code in a file called "main.lua"

You may optionally also include an icon file called "launcher-icon.png" or "launcher-icon.jpg", which should be sized as 480x270 pixels.  This icon, if present, will be used by the application launcher.  If you do not provide such an icon, then a generic icon will be used instead.

Topic: Metadata

Metadata is information that describes your app. There are only a few pieces of
information that are strictly required - because they are important.

To set your app's metadata, create an empty text file called "app" and enter
the information like this:

(code)
app=
{
    id          = "com.trickplay.examples.hello-world",
    release     = "1",
    version     = "1.0",
    name        = "Hello World",
    author      = "Pablo Pissanetzky",
    copyright   = "Trickplay Inc."
}
(end)

The app metadata file uses regular Lua syntax; the only requirement is that you
create a table called "app" which contains fields for the various bits
of information.

Required fields:

id -        This is a unique identifier for you app. It is recommended that you use Reverse-DNS
            notation as seen above. This does not have to be a real URL. You can only use
            ASCII characters A-Z, a-z, 0-9, period, minus and underscore. The id can be at most
            64 characters long.
        
release -   This is a single integer that should be incremented every time you release a
            a new version of your app. This number is never seen by users of your app, but is
            very important to handle updates from the app store.

version -   This is a traditional version string that users will see.

name -      The name of your app.

Optional fields:

author -    Who wrote the app?

copyright - Copyright information.

description - A brief description of your app.


Topic: Main

This is where your app begins executing. The main file is always called "main.lua"
and must be present at the root of your app bundle. To complete the classic example,
create a text file called "main.lua" with the following contents:

(code)
print("Hello World!")
(end)

When you run your app, you should see "Hello World!" printed in the console.


Group: Running Your App

Run Trickplay and pass it the path to your app.

(code)
trickplay /path/to/the/app
(end)

TrickPlay will first look for the app metadata file and then read and validate its contents.
If all is well, it will then execute your app's main file ("main.lua").

Since our hello world app does not have a user interface, no additional windows are
opened; only the TrickPlay console.


Topic: The Console

The console lets you interact with your app. It not only shows debugging output
and anything you print from your app, but also executes Lua on the fly. You can try
it out by typing something like this:

(code)
print("Hello from the console!")
(end)

You can use "print" to inspect variables, but you can also use "return",
like this:

(code)
a=12
return a
(end)

This code sets a global variable "a" with a value of 12. The second line returns
the value of a to the console, which prints it.

You can also use the console to run TrickPlay commands, which are prefixed with
a slash. The most common one is "/exit". You can try "/config" which shows
you details about the configuration of TrickPlay.


Topic: Configuring TrickPlay

You can change what TrickPlay knows. This can be done in several ways, but the
easiest is to create a text file called ".trickplay" in a directory where you
run the TrickPlay executable or your home directory. This is a Lua file that 
has access to all command line options passed to trickplay. For example, try this:

(code)
system_language="es"
system_country="AR"
(end)

This tells TrickPlay that it should run in Spanish and the country is Argentina.


TODO:
    REFERENCE ALL CONFIGURATION KEYS AND VALUES


Group: Including Files

When one file is not enough. Lua has two functions that let you use code in other
files, "dofile" and "loadfile". Both of these functions take a path to the file as
a string. The big difference when using them with TrickPlay is that the path should
always be relative - because TrickPlay will only let you access files inside your
app bundle. For example:

(code)
dofile("my_files/somefile.lua")
(end)

Will look for a directory called "my_files" in your app bundle, and execute a file
called "somefile.lua" there.

The difference between "dofile" and "loadfile" is that the former actually executes
the file and returns its result, whereas the latter only loads it and returns its
contents as a function that you can call - more than once if you want to.

Since files are wrapped in a function in either case, you can use files to return
values. For example, you could create a file that contains this:

(code)
return {a=1,b=2}
(end)

And then invoke it with "dofile" to get its results.

(code)
local some_table=dofile("the_file_above")
(end)

This technique is very powerful and can be used to localize strings.


Topic: Localized Stuff

TrickPlay helps you localize resources. TrickPlay is aware of two pieces of information,
a language code and a country code. The language code is a two letter, lower case
ISO-639-1 code. See <the complete list here at http://www.loc.gov/standards/iso639-2/php/code_list.php>.
The country code is a two letter, upper case, ISO-3166-1-alpha-2 code.
See <the full list here at http://www.iso.org/iso/country_codes/iso_3166_code_lists/english_country_names_and_code_elements.htm>.

In your app bundle, you can have a special directory called "localized". There,
you can have separate directories for each language and then subdirectories for each
country.

Once that is set-up, you can use "dofile" or "loadfile" to access localized resources
by using the special scheme "localized:", like this:

(code)
local strings=dofile("localized:strings.lua")
(end)

TrickPlay will look for the file "strings.lua" in the following directories,
in order:

(table)
<app>/localized/<language>/<country>/strings.lua
<app>/localized/<language>/strings.lua
<app>/localized/strings.lua
<app>/strings.lua
(end)

This lets you put a generic version of "strings.lua" either at the root of your
app bundle or in the "localized" directory, then add specific versions using the
language and country as translations are added.

You could have a structure
like this:

(diagram)
    <app>
      +--- app
      +--- main.lua
      +--- /localized
            +--- strings.lua
            +--- /es
                  +--- strings.lua
                  +--- /AR
                        +--- strings.lua
(end)

In that case, if the language is "es" and the country is "AR", you get
"localized/es/AR/strings.lua". If the language is "es" and the country is something
other than "AR", you get "localized/es/strings.lua". If the language is anything
other than "es", you get "localized/strings.lua".

An easy way to deal with localized strings is to simply put them in a table and
return them, like this (in "strings.lua", for example):

(code)
return
{
    yes="si",
    no="no"
}
(end)

In your main code, you do something
like this:

(code)
local strings=dofile("localized:strings.lua")
print(strings.yes)
(end)

The "localized:" scheme can also be used for images, which lets you customize your
user interface based on the language and/or country.





