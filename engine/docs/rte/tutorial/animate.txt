Topic: The UIElement animate() Function

The TrickPlay SDK libraries provide several ways to produce animations, from simple, single-object animations to complex animations that choreograph the movements of multiple objects. The Tutorial application will explore two different animation methods: the simple animate() function and the more complex Timeline class.

The animate() function is provided by the SDK library's <UIElement> class. Most of the TrickPlay SDK classes are derived from UIElement and so they recognize the properties and functions that UIElement provides. All the classes used in the Tutorial application (Rectangle, Text, Image and Group) support the UIElement properties and functions.  The Tutorial application has already used some of UIElement's properties, such as position and anchor_point. In this section, we'll look at the animate() function.

The animate() function creates simple animations that modify one or more properties of a single object. The animation is initialized by setting its duration and the ending values for each animated property. Each animated property's starting value is their current value at the time the animation begins. The animation starts with the call to animate() and runs asynchronously and nonstop until it completes. If desired, the animation can loop back to its beginning and run again.

The Tutorial application will use animate() to perform a simple animation on the TrickPlay logo image. Two properties will be animated--scale and z_rotation--and the animation will loop infinitely. All this is accomplished in the single code statement shown below.

	(code)
	-- *** logoAnimation.lua ***
	
	-- Implements Tutorial's animate() animation
	
	-- Perform simple animation on TrickPlay logo
	logoImage:animate( {
				duration   = 3000,            -- 3000 milliseconds = 3 seconds
				loop       = true,            -- loop infinitely
				scale      = { 0, 0 },        -- scale down to nothing
				z_rotation = 360,             -- rotate 360 degrees
              } )
	(end)

The animate() function accepts one table argument containing comma-separated property settings that define the animation. The only required property is duration which specifies the animation's time length in milliseconds. The Tutorial animation runs for 3000 milliseconds, or three seconds.

By setting the loop property to true, the animation will repeat infinitely. A looping animation can be terminated by calling the UIElement's complete_animation() function.

The Tutorial animation animates the logo's scale and z_rotation properties. Other properties of an object can also be animated; the complete list is described in the <UIElement.animate> section of the TrickPlay Engine Reference.

Following good programming practices, we'll organize the Tutorial animations in separate source files. The TrickPlay logo animation will be implemented in a file called "logoAnimation.lua". Add the code shown above to the file and then update the main.lua file to run the file's code by calling dofile() as shown below.

	(code)
	-- *** main.lua ***
	
	-- Animate the TrickPlay logo
	dofile( "logoAnimation.lua" )
	(end)

If you run the application, you'll see the TrickPlay logo animated.

(see images/logoAnimation.gif)

Considering that a single code statement produced the animation, it's pretty impressive, but it could still use some improvements. First, the animation seems to start pretty abruptly and, second, scaling the logo back up to its original size would make the loop seamless. Performing each of these enhancements will also expose us to other useful components of the SDK libraries.

As the animation proceeds, each of the animated properties updates its value in an unchanging, linear progression by default. However, in real life, objects usually start slowly when beginning to move and gradually slow down just before stopping. These characteristics are called "easing in" and "easing out" or simply ease in and ease out. The SDK libraries support ease in and ease out through its <Ease> class. Different Ease transitions implement various rates of ease in/out and whether only ease in is applied, only ease out, or both ease in and out. Animated demos and graphic depictions of each available transition are included in the <Ease> section of the Engine Reference.

The animate() function accepts an optional mode argument that specifies the Ease transition to apply to the animated properties. The mode affects all the properties being animated; with the animate() function, it is not possible to apply the mode to only a single property. If you need to apply different Ease transitions to individual properties, one of the other SDK animation techniques should be used. For the Tutorial's animated logo, we'll apply an ease-in transition so that the logo doesn't start rotating so quickly. This can be accomplished by adding a single mode property to the original animate() call. The complete function call is shown below.

	(code)
	logoImage:animate( {
				duration   = 3000,            -- 3000 milliseconds = 3 seconds
				loop       = true,            -- loop infinitely
				scale      = { 0, 0 },        -- scale down to nothing
				z_rotation = 360,             -- rotate 360 degrees
				mode       = "EASE_IN_QUART",
			  } )

	(end)

If you add the mode property to the animate() call in the logoAnimation.lua file and run the application, you'll see the logo gradually eases into its rotation and scaling movements. The resulting animation is less frenetic. You can try setting some of the other Ease transitions to see the effect they have on the animation.

To make the loop seamless, it needs to scale the logo back up to its original size. This won't be so easy to do with the animate() function. In cases like this where a property's value goes back and forth in a cyclical manner, it is easier to use one of the other SDK library animation methods. But, although awkward, it is still possible to do with animate(), and doing so will get us better acquainted with the animate() function.

The animate() function is limited to property values going in one direction--from their starting values to their ending values. To animate properties back to their starting values, a second animation is required. To provide a seamless loop from starting values to ending values and back again, each animation will begin immediately after the other has finished. To notify the program that the animation has completed, the animate() function supports an optional argument called "on_completed" that accepts a function that will be called when the animation finishes. We will write that function so it starts the other animation.

The required code is a bit more involved than our original single-line animation. The complete logoAnimation.lua source file and the resulting logo animation are shown below. The <logoAnimation.lua> source file is also listed in the <Complete Tutorial Source Code> section.

(see images/logoAnimationFinal.gif)

	(code)
	-- *** logoAnimation.lua ***
	
	-- Implements Tutorial's animate() animation
	
	-- ***********************************************************
	-- Local variables
	
	-- Boolean variable indicating which portion of animate() loop that's running
	local scaling_down = true
	
	-- ***********************************************************
	-- Functions

	-- Scale-down portion of logo animation
	local
	function logoScaleDown()
		logoImage:animate( {
					duration     = 3000,            -- 3000 milliseconds = 3 seconds
					scale        = { 0, 0 },        -- scale down to nothing
					z_rotation   = 360,             -- rotate 360 degrees
					mode         = "EASE_IN_QUART", -- Ease mode
					on_completed = logoCompleted    -- called when finished
				  } )
	end
	
	-- Scale-up portion of logo animation
	local
	function logoScaleUp()
		-- To continue clockwise spinning, reset z_rotation
		logoImage.z_rotation = { -360, 0, 0 }
		
		logoImage:animate( {
					duration     = 3000,
					scale        = { 1, 1 },         -- return to original size
					z_rotation   = 0,                -- return to 0 degree rotation
					mode         = "EASE_OUT_QUART", -- use ease out for this portion
					on_completed = logoCompleted
				  } )
	end

	-- Function called when animate() completes
	function logoCompleted()
		-- Which portion of the animation did we just complete?
		if( scaling_down ) then
			-- Start scaling-up portion
			scaling_down = false
			logoScaleUp()
		else
			-- Start scaling-down portion
			scaling_down = true
			logoScaleDown()
		end
	end

	-- ***********************************************************
	-- Module entry point
	
	-- Start logo animation
	logoScaleDown()
	(end)

There are threee minor things to point out in the final code. First, notice that the loop property has been removed from the animate() table. Instead, the code simulates a loop by cycling through the two separate animations.

Second, when the logo animation scales down, it spins clockwise. If we simply reversed the rotation when scaling back up (by moving in a negative direction from 360 degrees to zero), the logo would spin counter-clockwise. To maintain a clockwise motion, the logoScaleUp() function resets the z_rotation before starting the animation. By moving in a positive direction (from -360 to 0), the logo continues to spin clockwise.

Finally, the functions logoScaleDown() and logoScaleUp() and the boolean variable scaling_down are defined as local elements. They are not called from outside the source file, so they are defined as local to eliminate any possible naming conflicts in other source files. The logoCompleted() function, however, cannot be local because it is called from outside the source file when the animation completes.

In the next section, the two spheres will be animated using an alternative animation technique.

