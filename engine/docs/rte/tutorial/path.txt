Topic: Animating an Object Along a Path

It's possible to have the spheres return to their starting positions by using the same technique shown earlier with the animate() function, i.e., create a second Timeline animation for the return trip and cycle between the two animations. But that solution is a bit awkward, and, with Timeline, unnecessary. A Timeline animation can define a non-linear route for an object to follow by using the SDK library's Path class.

With the <Path> class, the animated object's route is defined by specifying a series of nodes that connect via lines or Bezier curves. When the animation is running, the object's current location along the path is calculated by the Path object's get_position() function. Because the Path object calculates the property's X and Y coordinates, the Interval class, which performed that operation earlier, will no longer be necessary.

Each sphere follows a simple back and forth route, so defining the route's nodes will be a simple matter of calling a few functions provided by the Path class. More complicated routes can call the same functions, but would benefit from defining the route using the alternative SVG-style string syntax that is also supported. Refer to the <Path> documentation in the Engine Reference for complete details.

Each sphere's route has three node points: Start, End, and back to Start. The route definition is started by setting the first node with a call to the Path class's move_to() function. The remaining two nodes are straight lines defined by calls to line_to(). Because the Path class will take care of calculating the in-between positions during the animation, the Interval class is no longer needed. The code statements shown below that set up the Path object should replace the Interval code used earlier.

	(code)
	-- Define sphere animated paths
	sphere1Path = Path()
	sphere1Path:move_to( sphere1StartX, sphere1StartY )
	sphere1Path:line_to( sphere1EndX,   sphere1EndY   )
	sphere1Path:line_to( sphere1StartX, sphere1StartY )
	
	sphere2Path = Path()
	sphere2Path:move_to( sphere2StartX, sphere2StartY )
	sphere2Path:line_to( sphere2EndX,   sphere2EndY   )
	sphere2Path:line_to( sphere2StartX, sphere2StartY )
	(end)

The event handler code is a bit more streamlined with Path than with the Interval because the X and Y coordinates are processed together using the position property rather than individually. For each sphere's position, a single call to the Path object's get_position() function is all that is required. The new event handler code is shown below.

	(code)
	function sphereFrame( sphereTimeline, msecs, progress )
		-- Update each sphere's X and Y coordinates
		sphereImage.position = sphere1Path:get_position( progress )
		sphereClone.position = sphere2Path:get_position( progress )
	end
	(end)

The animation is a bit more complex now. It could still use a final tweak, however, to give it a illusion of depth.

(see images/sphereAnimation2.gif)

