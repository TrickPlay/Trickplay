Topic: Animations Using the Timeline Class

For complex animations, the SDK library's Timeline class may be an appropriate choice. It supports the animation of multiple objects, and property values can change direction and rate of speed as the animation progresses. But unlike the animate() function which runs to completion with no intervention from the program, a Timeline-based animation requires periodic maintenance while the animation is running. To understand this process, the Tutorial will use a Timeline class to animate the two red spheres.

The <Timeline> class shares some functionality with the animate() function. For example, a Timeline object accepts a duration specified in milliseconds and the loop property instructs the animation to loop infinitely. But Timeline is a class, not a function, and so a Timeline object must be created. In the Timeline constructor, a table of property settings can be specified to initialize the animation. The code statement shown below creates a Timeline object and defines the animation's duration and loop properties. (Do not introduce this code into the Tutorial yet; we'll make some changes to it first.)

	(code)
	-- Creation of a Timeline object
	sphereTimeline = Timeline( {
						duration = 1000,
						loop     = true,
					 } )
	(end)

A Timeline-based animation comprises many individual screen frames. Each frame contains a single screen image from the complete animation. For example, if the animation depicts a sphere moving from the left-side of the screen to the right-side, each screen frame would show the sphere in a different location as it made its way from its starting location to its final destination. When the frames are displayed sequentially, they give the impression of movement.

Each screen frame in a TrickPlay animation is created dynamically, immediately before the frame is displayed. Each time a new frame is needed, the application receives notification in the form of a <Timeline.on_new_frame> event. The application can register a handler function that gets invoked whenever the event occurs. The handler function for on_new_frame events should create a new frame that correctly depicts each screen object's position and visual attributes based on the current progress of the animation. This is not as daunting of a task as it may sound because the SDK libraries provide some classes that ease the work required in calculating a property's current value.

To receive notification of each on_new_frame event, we create an event handler function and register it with the event by passing it to the <Timeline.add_onnewframe_listener> function. A skeleton event handler is defined and registered below.

	(code)
	-- Event handler called to update animated properties
	function sphereFrame( sphereTimeline, msecs, progress )
		-- Update animated property values here
	end

	-- Register the on_new_frame event handler
	sphereTimeline:add_onnewframe_listener( sphereFrame )
	(end)

Notice that the event handler receives three arguments: the Timeline object itself, the number of milliseconds that have elapsed from the animation's start, and a progress value between 0 and 1 indicating the percentage of the animation that has completed. The progress argument is the most useful for calculating each animated property's current values.

We'll start building up the Timeline animation by implementing a simple movement of the two spheres. The sphere in the left of the display will move horizontally to the right; the sphere in the center will move vertically to the bottom of the display. The starting and ending X and Y coordinates for each sphere are calculated one time and stored in variables for later access.

	(code)
	-- Calculate sphere starting and ending positions
	-- sphereImage positions
	local sphere1StartX  = demoSpace2.x + 75                       -- left-center X
	local sphere1StartY  = (demoSpace2.height / 2) + demoSpace2.y  -- left-center Y
	local sphere1EndX    = demoSpace2.x + demoSpace2.width - 75    -- right-center X
	local sphere1EndY    = sphere1StartY                           -- right-center Y

	-- sphereClone positions
	-- Note: This sphere starts in the center, but to maintain naming consistency,
	--       we apply Start and End names to the sphere's outer travel boundaries.
	local sphere2StartX  = (demoSpace2.width / 2) + demoSpace2.x   -- top-center X
	local sphere2StartY  = demoSpace2.y + 75                       -- top-center Y
	local sphere2EndX    = sphere2StartX                           -- bottom-center X
	local sphere2EndY    = demoSpace2.y + demoSpace2.height - 75   -- bottom-center Y
	local sphere2CenterX = sphere2StartX                           -- display-center X
	local sphere2CenterY = (demoSpace2.height / 2) + demoSpace2.y  -- display-center Y
	(end)

With the animate() function we used earlier, we passed the ending property values to animate(), and animate() calculated the property's intermediate, or "in-between," values for us. With Timeline, we have to specify the in-between values ourself each time the on_new_frame event handler is called. While it's possible to construct an equation to calculate the in-between values, there is no need to because the SDK library's Interval class will do the work for us.

An <Interval> object is initialized with a range of values, such as the starting and ending values of an animated property. Then whenever an in-between value is needed by the Timeline event handler, the handler can call the Interval object's get_value() function, passing it the progress argument containing the percentage of elapsed animation time. The Interval's get_value() function uses the property's starting and ending values and the percentage of the animation completed to calculate and return the in-between property value.

The code shown below initializes the Interval objects for the X and Y coordinates for the two spheres. It also shows the event handler code that uses the objects to update the animated coordinates. As you can see, the maintenance of each property's in-between values requires no complex calculations.

	(code)
	-- Define Interval objects for spheres
	local sphere1RangeX = Interval( sphere1StartX,  sphere1EndX )
	local sphere1RangeY = Interval( sphere1StartY,  sphere1EndY )
	local sphere2RangeX = Interval( sphere2CenterX, sphere2EndX )
	local sphere2RangeY = Interval( sphere2CenterY, sphere2EndY )

	-- Event handler called to update animated properties
	function sphereFrame( sphereTimeline, msecs, progress )
		-- Update each sphere's X and Y coordinates
		sphereImage.position = { sphere1RangeX:get_value( progress ),
		                         sphere1RangeY:get_value( progress ) }
		sphereClone.position = { sphere2RangeX:get_value( progress ),
		                         sphere2RangeY:get_value( progress ) }
	end
	(end)

The animation is started by calling the Timeline object's start() function, as shown below.

	(code)
	-- Start the animation
	sphereTimeline:start()
	(end)

Finally, the sphereAnimation.lua file must be "linked" with main.lua by running it using the dofile() function.

	(code)
	-- *** main.lua ***

	-- Animate the two spheres
	dofile( "sphereAnimation.lua" )
	(end)

With the addition above, the Tutorial's main.lua file will require no further changes. The complete <main.lua> source file can be seen in the <Complete Tutorial Source Code> section.

The resulting sphere animation is not complex, but it's a start. Next, we'll animate the spheres back to their starting position to make the loop seamless.

(see images/sphereAnimation1.gif)

