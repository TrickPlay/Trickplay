
Title: Animation Overview

The TrickPlay SDK Animation classes provide numerous methods for implementing animations. In the TrickPlay SDK, an animation entails the incremental moving of an object and/or the gradual changing of an object's display characteristics, such as its size or opacity. A wide range of animation complexity is supported, from the very simple--like moving an object steadily across the display in a straight line--to the most sophisticated--including choreographing multiple objects along complex paths at changing speeds based on user input.

For simple animations, the <UIElement.animate> function easily animates multiple properties of a single object. The animation's duration is specified, the animated property's beginning and ending settings are defined, and the animation is started. The animate() function runs the animation asynchronously and calculates all the property's in-between values automatically; no additional program intervention is necessary. Each animated property changes its value gradually, in a steady, linear progression from its beginning to its ending values.

More complex animations are possible with the <Timeline> class. A Timeline-based animation provides finer control over the animation, but at the cost of requiring additional program intervention. While the animation is asynchronously running, the program is periodically informed of its progress by having the on_new_frame() event handler called. In the event handler, the program can change the property values at any desired rate. For example, an object may initially move slowly and progressively speed up as the animation continues.

A Timeline-based animation can optionally utilize some additional TrickPlay Animation classes to add functionality. The <Alpha> class simplifies speed adjustments by specifying rates at which the animation enters (or "eases in" to) and exits (or "eases-out" of) the animation. Easing into and easing out of an animation usually produces more realistic effects than steady linear progressions. A property's value at a specific frame can be calculated automatically by using an <Interval> class. And an animated object can follow a complex, meandering route by using the <Path> class. Finally, multiple Timeline-based animations can be choreographed together by using the <Score> class.

To animate multiple objects in sophisticated animations, the <Animator> class can be used. In Animator-based animations, property values for specific key frames are specified, which enables the value to modify at varying rates from one key frame to another.  By choreographing multiple objects at varying rates, an Animator-base animation can produce animations of infinite complexity.

In some cases, an animation is not intended to run non-stop from start to finish. As an example, an animation to open and close a drop-down menu would run the portion to open the menu, and then wait for user input before eventually running the portion to close the menu. These types of animations can be created using the <AnimationState> class. In an AnimationState-based animation, the animation is defined as a group of states and the animations occur when the transition from one state to another occurs. For example, OpenMenu and CloseMenu could be the two states in the drop-down menu. When transitioning to the OpenMenu state, the portion of the animation to open the drop-down menu runs. Similarly, when transitioning to the CloseMenu state, the appropriate portion of the animation that closes the menu runs. Each transition animation can animate multiple objects and multiple properties, making it possible for AnimationState-based animations to achieve a high level of sophistication.

Because of the many methods available to create TrickPlay animations, multiple techniques to create the same animation will often exist, and no single method may be definitively the best. In such cases, it is up to the programmer to decide upon the preferred method.

