
Title: Animation Overview

The TrickPlay SDK Animation classes provide several methods for implementing animations. An animation involves incrementally moving an object and/or gradually changing an object's display characteristics, such as its size or opacity. Animations can be very simple--like moving an object steadily across the display--or complex--such as choreographing multiple objects along complicated routes at changing speeds based on user input.

For simple animations, the <UIElement.animate> function easily animates multiple properties of a single object. The animation's duration is specified, the animated property's beginning and ending settings are defined, and the animation is started. The animate() function runs the animation asynchronously and calculates all the property's in-between values automatically; no additional program intervention is necessary. Each animated property changes its value gradually, in a steady, linear progression from its beginning to its ending values.

More complex animations are possible with the <Timeline> class. A Timeline-based animation provides finer control over the animation, but at the cost of requiring additional program intervention. While the animation is running, the program is periodically notified of the animation's progress by the firing of an on_new_frame() event handler. In the event handler, the program can set the animating property to any desired value. For example, by adjusting a property's value in small increments in the first half of an animation and then making larger adjustments in the second half, an object will initially move slowly and then speed up as the animation continues.

Some TrickPlay classes provide useful functionality and support to Timeline-based animations. The <Ease> class applies speed adjustments by specifying rates at which the animation starts (or "eases in" to) and finishes (or "eases-out" of) the animation. Easing into and easing out of an animation usually produces more realistic effects than steady linear movements.

The <Interval> class can calculate an animating property's current value in a Timeline:on_new_frame() event handler. The <Path> class enables an animated object to follow a complex, meandering route. And, finally, multiple Timeline-based animations can be choreographed together by using the <Score> class.

To animate multiple objects in sophisticated animations, the <Animator> class can be used. In Animator-based animations, property values for specific key frames are specified, which enables the value to alter at varying rates from one key frame to another.  By choreographing multiple objects at varying rates, an Animator-based animation can produce animations of infinite complexity.

In some cases, an animation is not intended to run non-stop from start to finish. For example, an animation that opens and closes a drop-down menu might run the portion to open the menu, then wait for user input before eventually running the portion to close the menu. These types of animations can be created using the <AnimationState> class. In an AnimationState-based animation, the animation is defined as a group of states and the animations occur when the transition from one state to another occurs. For example, OpenMenu and CloseMenu could be the two states in the drop-down menu animation. AnimationState-based animations can animate multiple objects and multiple properties, making it possible to achieve complex and sophisticated animations.

Because of the many methods available to create TrickPlay animations, an animation may be achievable by using any of several techniques, with no single method being definitively the best. In such cases, the programmer must choose the preferred method.

