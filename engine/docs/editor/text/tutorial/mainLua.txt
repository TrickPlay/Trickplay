Topic: The main.lua File

In the previous section, we defined the focus destinations for each of the button elements in our screen. But when the screen is first displayed, which element will have the focus? This initial focus is assigned outside of the SDK Visual Editor, in one of the source files that the Editor generates called main.lua.

Note: The following discussion assumes a familiarity with the Lua programming language. Refer to a Lua language reference if you need information about this programming language.

During part of the SDK Visual Editor's processing, it converts the UI elements on the screen to Lua source code. This source code is eventually executed by the Trickplay Engine when the application is run. It is possible for you to write the source code that the Editor generates yourself, but having the Editor generate it for you is a more convenient process.

The Editor-generated source code is saved to various files. Recall that we previously saved our screen in the language.lua file. Another file which is generated automatically by the Editor is called main.lua. The main.lua file is created and updated every time you save your current screen. It is also updated automatically every 10 seconds by the SDK Visual Editor, so it is not necessary for you to save the main.lua file yourself.

The main.lua file contains Lua source code that performs various screen maintenance and manipulation operations. Also, event handlers, such as program responses to user keyboard and mouse input, are defined in main.lua. You should never have to modify your screen Lua source files, but you will most likely need to insert your own code and event handlers to main.lua, so let's look at its contents now.

If you open the main.lua file in a text editor, the first few lines will look something like this-

>-- GLOBAL SECTION
>ui_element = dofile("/lib/ui_element.lua") --Load widget helper library
>layout = {} --Table containing all the UIElements that make up each screen
>groups = {} --Table of groups of the UIElements of each screen, each of which can then be ui_element.screen_add()ed
>-- END GLOBAL SECTION

The first and last lines are simply comments and they perform no operation. The first line of executable code invokes the Lua dofile() function to load and execute the /lib/ui_element.lua library. This library implements most of the UI elements (also known as "widgets") supported by the SDK Visual Editor, such as the Button element we have been using. (The other elements we have used so far--the Rectangle, Image, and Text elements--are implemented in the core Trickplay Engine.) Loading and running this library enables all the Editor's widgets, making them available for use.

The next two lines of code create two Lua tables: groups and layout. The groups table is a Trickplay Engine <Group> object. The layout table is simply a Lua table. Each is initialized in subsequent lines in main.lua shown below.

>--  LANGUAGE SECTION
>groups["language"] = Group() -- Create a Group for this screen
>layout["language"] = {}
>loadfile("/screens/language.lua")(groups["language"]) -- Load all the elements for this screen
>ui_element.populate_to(groups["language"],layout["language"]) -- Populate the elements into the Group

