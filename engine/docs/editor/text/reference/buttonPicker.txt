Class: ButtonPicker

A ButtonPicker enables the user to make a selection by scrolling through a list of available settings. Scrolling direction can be either horizontal or vertical. Items in the list can be added and removed dynamically.



Constructor: buttonPicker( properties )

The buttonPicker() function creates a new ButtonPicker UI element. Property settings can be set by the properties argument; default settings are used for any property not set explicitly.

*Prototype:*

	(code)
	bpGroup buttonPicker( properties )
	(end)

*Argument:*

properties - table of ButtonPicker property settings

The properties table contains a comma-separated list of property settings for the new ButtonPicker. If a property is not explicitly set, its default value is used.

*Return Value:* Returns a Group object that contains the new ButtonPicker and related support objects. The Group object should be used to access the ButtonPicker's properties and functions.

*Example:* Create a new ButtonPicker, specifying some properties

(code)
-- Load the UI Elements library
ui_element = dofile( "/lib/ui_element.lua" )

-- Create a new ButtonPicker, setting some of its ButtonPicker-specific properties
local colorPicker = ui_element.buttonPicker{ items = { "Red", "Green", "Blue", "B&W" },
                                             direction = "vertical",
                                             ui_width = 400 }

-- Set some of the buttonPicker's UIElement properties
colorPicker.name = "ColorPicker"
colorPicker.position = { 700, 500, 0 }

-- Add a color to the scrollable list
colorPicker:insertItem( "Yellow" )
(end)



Property: ui_width

The ui_width property is an integer value specifying the ButtonPicker's width in pixels.

*Default Setting:* 180

*See Also:* the <ui_height> property



Property: ui_height

The ui_height property is an integer specifying the ButtonPicker's height in pixels.

*Default Setting:* 60

*See Also:* the <ui_width> property



Property: ui_position

The ui_position property is a table of integer values specifying the object's screen coordinates: X, Y and Z, respectively.

*Default Setting:* { 300, 300, 0 }

*See Also:* the <ui_width> and <ui_height> properties



Property: items

The items property is a table of strings where each string specifies one item in the ButtonPicker's scrollable list.

*Default Setting:* { "item1", "item2", "item3" }

*See Also:* the <selected_item> and <direction> properties



Property: selected_item

The selected_item property is the integer index into the items table for the currently-selected item. The first item in the items list is at index 1.

You can set the selected_item property to initialize the starting item in the list or to force a particular item to be the current item. Setting the selected_item property updates the display automatically.

You can retrieve the selected_item property to determine which item has been selected/is current.

*Default Setting:* 1

*See Also:* the <items> property



Property: direction

The direction property is a string specifying the scrolling direction of the ButtonPicker's list.

Appropriate arrow scroll-graphics are automatically added to the displayed ButtonPicker. For example, a horizontally-scrolling ButtonPicker will have arrow scroll-graphics added to its right and left sides.

Supported direction settings are shown below.

"horizontal" - scroll horizontally/left<-->right (default)
"vertical" - scroll vertically/up<-->down

*Default Setting:* "horizontal"

*See Also:* the <items> property



Property: text_font

The text_font property is a string specifying the ButtonPicker's font when the object does not have the input focus. The font string's format is described in the Text.font section at <file:../../../apps/files/bindings/clutter_text-lb.html#Text.font>.

*Default Setting:* "DejaVu Sans 30px"

*See Also:* the <focus_text_font> and <text_color> properties



Property: focus_text_font

The focus_text_font property is a string specifying the ButtonPicker's font when the object has the input focus. The font string's format is described in the Text.font section at <file:../../../apps/files/bindings/clutter_text-lb.html#Text.font>.

*Default Setting:* "DejaVu Sans 30px"

*See Also:* the <focus_text_color> and <text_font> properties



Property: skin

The skin property is a string that specifies the display appearance of the ButtonPicker. The skin functionality is under active development.

Predefined skins are provided, and the developer may define a custom skin. The following skin appearances are supported.

*Supported Settings:* The skin property is case-sensitive.

"default" - a utilitarian and sedate skin
"CarbonCandy" - an alternative skin. Flashy, attracts attention
"custom" - the skin is defined by the developer

When the "custom" skin is selected, the developer must define the <text_color>, <fill_color> and <border_color> properties of the ButtonPicker object for its focused and unfocused states.

*Default Setting:* "default"

*See Also:* the <text_color>, <fill_color> and <border_color> properties



Property: text_color 

The text_color property is a table of integer RGB (Red/Green/Blue) and alpha(transparent/opaque) settings specifying the ButtonPicker's text color when the object does not have the input focus.

The format of the RGB and alpha settings is described in the section RGB/Alpha Color Formats at <file:../../../apps/files/bindings/clutter_rectangle-lb.html#RGB/Alpha_Color_Formats>.

*Default Setting:* {255, 255, 255, 255} (white and completely opaque)

*See Also:* the <focus_text_color> and <text_font> properties



Property: focus_text_color

The focus_text_color property is a table of integer RGB and alpha settings specifying the ButtonPicker's text color when the object has the input focus.

The format of the RGB and alpha settings is described in the section RGB/Alpha Color Formats at <file:../../../apps/files/bindings/clutter_rectangle-lb.html#RGB/Alpha_Color_Formats>.

*Default Setting:* {255, 255, 255, 255} (white and completely opaque)

*See Also:* the <focus_text_font> and <text_color> properties



Property: fill_color

The fill_color property is a table of integer RGB and alpha settings specifying the ButtonPicker's fill color when the object does not have the input focus.

The format of the RGB and alpha settings is described in the section RGB/Alpha Color Formats at <file:../../../apps/files/bindings/clutter_rectangle-lb.html#RGB/Alpha_Color_Formats>.

*Default Setting:* {255, 255, 255, 0} (white and transparent)

*See Also:* the <focus_fill_color> and <border_color> properties



Property: focus_fill_color

The focus_fill_color property is a table of integer RGB and alpha settings specifying the ButtonPicker's fill color when the object has the input focus.

The format of the RGB and alpha settings is described in the section RGB/Alpha Color Formats at <file:../../../apps/files/bindings/clutter_rectangle-lb.html#RGB/Alpha_Color_Formats>.

*Default Setting:* {0, 255, 0, 0} (green and transparent)

*See Also:* the <focus_color> and <focus_text_color> properties



Property: border_color

The border_color property is a table of integer RGB and alpha settings specifying the ButtonPicker's border color when the object does not have the input focus.

The format of the RGB and alpha settings is described in the section RGB/Alpha Color Formats at <file:../../../apps/files/bindings/clutter_rectangle-lb.html#RGB/Alpha_Color_Formats>.

*Default Setting:* {255, 255, 255, 255} (white and opaque)

*See Also:* the <focus_color> property



Property: focus_color

The focus_color is a table of integer RGB and alpha settings specifying the ButtonPicker's border color when the object has the input focus.

The format of the RGB and alpha settings is described in the section RGB/Alpha Color Formats at <file:../../../apps/files/bindings/clutter_rectangle-lb.html#RGB/Alpha_Color_Formats>.

*Default Setting:* {0, 255, 0, 255} (green and opaque)

*See Also:* the <border_color> property



Function: insert_item

The insert_item() function adds an item to the end of the scrollable list contained in the ButtonPicker's items property.

*Prototype:* insert_item( item )

*Argument:*

item - the item to add to the list.

Typically, the item argument is a string, but it can be any type of data that you wish, including a table. Note, however, that a table gets added to the list as a single table item; the items in the table are not added as separate entries. For example, if you insert a table that contains three strings, the last item in the list will be the single table element; the three strings are not directly added to the list and will not be displayed as the list is scrolled. This is the case, even if the table contains only a single string.

*Return Value:* None.

*See Also:* the <items> property



Function: remove_item

The remove_item() function removes the last item from the scrollable list contained in the ButtonPicker's items property.

*Prototype:* remove_item()

*Return Value:* None.

*See Also:* the <items> property



Function: press_left

The press_left() function causes the ButtonPicker's scrollable list to scroll to the previous item in the list. The setting of the ButtonPicker's direction property has no effect on this function; even with a vertically-scrolling list, a call to press_left() moves to the list's previous item.

The press_up() function can be called to perform the same operation; the two functions are identical.

The scrolling operation occurs asynchronously. If a second scrolling operation is invoked before the first operation has finished, the first operation jumps immediately to its final state, and the second scrolling operation begins.



*Prototype:* press_left()

*Return Value:* None.

*See Also:* the <items> property, the <press_up> and <press_right> functions



Function: press_right

The press_right() function causes the ButtonPicker's scrollable list to scroll to the next item in the list. The setting of the ButtonPicker's direction property has no effect on this function; even with a vertically-scrolling list, a call to press_right() moves to the list's next item.

The press_down() function can be called to perform the same operation; the two functions are identical.

The scrolling operation occurs asynchronously. If a second scrolling operation is invoked before the first operation has finished, the first operation jumps immediately to its final state, and the second scrolling operation begins.



*Prototype:* press_right()

*Return Value:* None.

*See Also:* the <items> property, the <press_down> and <press_left> functions



Function: press_up

The press_up() function causes the ButtonPicker's scrollable list to scroll to the previous item in the list. The setting of the ButtonPicker's direction property has no effect on this function; even with a horizontally-scrolling list, a call to press_up() moves to the list's previous item.

The press_left() function can be called to perform the same operation; the two functions are identical.

The scrolling operation occurs asynchronously. If a second scrolling operation is invoked before the first operation has finished, the first operation jumps immediately to its final state, and the second scrolling operation begins.



*Prototype:* press_up()

*Return Value:* None.

*See Also:* the <items> property, the <press_left> and <press_down> functions



Function: press_down

The press_down() function causes the ButtonPicker's scrollable list to scroll to the next item in the list. The setting of the ButtonPicker's direction property has no effect on this function; even with a horizontally-scrolling list, a call to press_down() moves to the list's next item.

The press_right() function can be called to perform the same operation; the two functions are identical.

The scrolling operation occurs asynchronously. If a second scrolling operation is invoked before the first operation has finished, the first operation jumps immediately to its final state, and the second scrolling operation begins.

*Prototype:* press_down()

*Return Value:* None.

*See Also:* the <items> property, the <press_right> and <press_up> functions



Function: on_focus_in

The on_focus_in() function forces the key focus to the ButtonPicker. To accurately understand what this function does, think of it as get_focus().

*Prototype:* on_focus_in()

*Return Value:* None.

*See Also:* the <on_focus_out> function



Function: on_focus_out

The on_focus_out() function releases the key focus from the ButtonPicker. To accurately understand what this function does, think of it as remove_focus().

After calling on_focus_out(), no screen element has the input focus.

*Prototype:* on_focus_out()

*Arguments:* None.

*Return Value:* None.

*See Also:* the <on_focus_in> function



Event Handler: rotate_func

The rotate_func() event handler is called whenever the current item in the ButtonPicker changes. The item may change due to either a user having scrolled the button or because a program had set the <selected_item> property or called the directional <press_left>, <press_right>, <press_up> or <press_down> functions. Based upon the list's current item, the program can perform appropriate operations, such as displaying or hiding display elements.

If the user presses the button or if a program calls one of the directional press_xxx() functions, the ButtonPicker scrolls to the new item. If a program explicitly sets the selected_item property, the ButtonPicker jumps directly to the new item, without scrolling.

The scrolling operation occurs asynchronously. It is possible for a user or program to change the current item a second time before the first scrolling operation completes.  If a second scrolling operation is invoked before the first scroll operation has finished, the first operation jumps immediately to its final state, which includes invoking the rotate_func. Thus, the rotate_func is guaranteed to be called, even if the scrolling operation is aborted early.

*Prototype:* rotate_func( current_item_index )

*Argument:*

current_item_index - integer index referencing the current item in the ButtonPicker's items property. The first item in the items list is at index 1.

*Return Value:* None.

*Default Setting:* nil

*See Also:* the <items> and <selected_item> properties

