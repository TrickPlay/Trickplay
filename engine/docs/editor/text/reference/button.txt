Class: Button

A Button is a standard user interface button. In addition to Button-specific properties, Buttons also provide all the properties, events, and functions implemented by the TrickPlay SDK Engine's UIElement at <file:../../../apps/files/bindings/clutter_actor-lb.html#UIElement> interface.



Function: button( properties )

The button() function creates a new Button UI Element. Property settings can be set by the properties argument; default settings are used for any property not set explicitly.

*Argument:*

properties - table of Button property settings

The properties table contains a comma-separated list of property settings for the new Button. If a property is not explicitly set, its default value is used.

*Return Value:* Returns a Group object that contains the new Button

*Example:* Create a new button, specifying some properties

(code)
-- Create all the UI Elements
ui_element = dofile( "/lib/ui_element.lua" )

-- Create a new button, setting some of its Button-specific properties
local myButton = ui_element.button{ label = "myButton", ui_width = 400 }

-- Set some of the button's UIElement properties
myButton.name = "myButton"
myButton.position = { 700, 300, 0 }
(end)



Property: ui_width 

The ui_width property is an integer value specifying the button's width in pixels.

*Default Setting:* 180

*See Also:* the <ui_height> property



Property: ui_height

The ui_height property is an integer specifying the button's height in pixels.

*Default Setting:* 60

*See Also:* the <ui_width> property



Property: label

The label property is a string to display within the button.

*Default Setting:* "Button"

*See Also:* the <text_font> and the <text_color> properties



Property: text_font

The text_font property is a string specifying the Button's font. The font string's format is described in the Text.font section at <file:../../../apps/files/bindings/clutter_text-lb.html#Text.font>.

*Default Setting:* "DejaVu Sans 30px"

*See Also:* the <label> and <text_color> properties



Property: text_color 

The text_color property is a table of integer RGB (Red/Green/Blue) and alpha(transparent/opaque) settings. The format of the RGB and alpha settings is described in the section RGB/Alpha Color Formats at <file:../../../apps/files/bindings/clutter_rectangle-lb.html#RGB/Alpha_Color_Formats>.

*Default Setting:* {255, 255, 255, 255} (white and completely opaque)

*See Also:* the <label> and <text_font> properties



Property: skin

The skin property is a string specifying the button's skin. NEED MORE INFORMATION ABOUT THIS.

*Default Setting:* "default"



Property: fill_color

The fill_color property is a table of integer RGB and alpha settings specifying the button's fill color. The format of the RGB and alpha settings is described in the section RGB/Alpha Color Formats at <file:../../../apps/files/bindings/clutter_rectangle-lb.html#RGB/Alpha_Color_Formats>.

*Default Setting:* {255, 255, 255, 0} (white and transparent)

*See Also:* the <focus_fill_color> property



Property: border_width

The border_width property is an integer specifying button's border width in pixels.

*Default Setting:* 1

*See Also:* the <border_corner_radius> and <border_color> properties



Property: border_corner_radius

The border_corner_radius property is an integer specifying the radius of the button's corner in pixels. NEED MORE INFORMATION ON THIS.

*Default Setting:* 12

*See Also:* the <border_width> and <border_color> properties



Property: border_color

The border_color property is a table of integer RGB and alpha settings specifying the button border's color. The format of the RGB and alpha settings is described in the section RGB/Alpha Color Formats at <file:../../../apps/files/bindings/clutter_rectangle-lb.html#RGB/Alpha_Color_Formats>.

*Default Setting:* {255, 255, 255, 255} (white and opaque)

*See Also:* the <border_width> and <border_corner_radius> properties



Property: focus_color

The focus_color is a table of integer RGB and alpha settings specifying the button's color when it has focus. The format of the RGB and alpha settings is described in the section RGB/Alpha Color Formats at <file:../../../apps/files/bindings/clutter_rectangle-lb.html#RGB/Alpha_Color_Formats>.

*Default Setting:* {27, 145, 27, 255}

*See Also:* the <focus_fill_color> and <focus_text_color> properties



Property: focus_fill_color

The focus_fill_color property is a table of integer RGB and alpha settings specifying the button's fill color when it has focus. The format of the RGB and alpha settings is described in the section RGB/Alpha Color Formats at <file:../../../apps/files/bindings/clutter_rectangle-lb.html#RGB/Alpha_Color_Formats>.

NEED MORE INFORMATION ON THIS: What is the difference between the focus_color and the focus_fill_color?

*Default Setting:* {27, 145, 27, 0}

*See Also:* the <focus_color> and <focus_text_color> properties



Property: focus_text_color

The focus_text_color property is a table of integer RGB and alpha settings specifying the button's text color when it has input focus. The format of the RGB and alpha settings is described in the section RGB/Alpha Color Formats at <file:../../../apps/files/bindings/clutter_rectangle-lb.html#RGB/Alpha_Color_Formats>.

*Default Setting:* {255, 255, 255, 255} (white and completely opaque)

*See Also:* the <focus_color> and <focus_fill_color> properties



Property: focus_image

The focus_image property is a string specifying the file that contains the image displayed in the button. NEED MORE INFORMATION ABOUT THIS.

*Default Setting:* nil

*See Also:* the <button_image> property



Property: button_image

The button_image property is a string specifying the file that contains the image displayed in the button. NEED MORE INFORMATION ABOUT THIS.

*Default Setting:* nil

*See Also:* the <focus_image> property



Property: text_has_shadow

The text_has_shadow property is a boolean value indicating whether or not the button text displays a shadow (true=has shadow).

*Default Setting:* true



Property: single_button

The single_button property is a boolean value indicating ???. NEED FURTHER INFORMATION ABOUT THIS.

*Default Setting:* false



Event: focused

The focused() event handler is called whenever the button receives the input focus.

A skeleton focused() event handler is generated automatically by the TrickPlay SDK Visual Editor for every button it creates. The handler is written to the project's main.lua file. Insert your own code to the empty skeleton handler to implement the desired operations when the button receives the input focus.

*Default Setting:* nil or references an empty skeleton handler, i.e., focus-in events are ignored.

*See Also:* the <on_focus_in> function, the <released> event handler



Event: released

The released() event handler is called whenever the button loses the input focus.

A skeleton released() event handler is generated automatically by the TrickPlay SDK Visual Editor for every button it creates. The handler is written to the project's main.lua file. Insert your own code to the empty skeleton handler to implement the desired operations when the button loses the input focus.

*Default Setting:* nil or references an empty skeleton handler, i.e., focus-out events are ignored.

*See Also:* the <on_focus_out> function, the <focused> event handler



Event: pressed

The pressed() event handler is called whenever the button is pressed.

A skeleton pressed() event handler is generated automatically by the TrickPlay SDK Visual Editor for every button it creates. The handler is written to the project's main.lua file. Insert your own code to the empty skeleton handler to implement the desired operations when the user presses the button.

*Default Setting:* nil or references an empty skeleton handler, i.e., button-press events are ignored.

*Example:* When button is pressed, transition to another screen

(code)
-- Assume we have two screens: FirstScreen and NextScreen.
-- We are currently in the FirstScreen, which contains a button with its name property set to "GoToNextScreen".
-- When the GoToNextScreen button is pressed, its pressed() event handler below is called.

-- The TrickPlay SDK Visual Editor automatically generates the handler skeleton and saves it in the
-- project's main.lua file. You can also write the handler definition yourself if you don't use the Editor.
layout["FirstScreen"].GoToNextScreen.pressed = function() -- Handler for GoToNextScreen.pressed in this screen
  -- We add this code...
  -- Transition to NextScreen using a fade-out/fade-in effect
  ui_element.transit_to( groups["FirstScreen"], groups["NextScreen"], "fade" )
end


(end)



Function: on_focus_in

The on_focus_in() function forces the input focus to the button. Calling on_focus_in() also causes the focused() event handler to be called. If the function's key argument is set to keys.Return then the button's pressed() event handler is also invoked.

*Prototype:* on_focus_in( key )

*Arguments:*

key - NEED FURTHER INFORMATION ABOUT THIS ARGUMENT; If key is equal to keys.Return, the pressed() event handler is called. What is the keys table?

*Return Value:* None.



Function: on_focus_out

The on_focus_out() function releases the input focus from the button. Calling on_focus_out() also causes the released() event handler to be called. NEED MORE INFORMATION ABOUT THIS FUNCTION: Where does the input focus go to? Which element?

*Prototype:* on_focus_out( key )

*Arguments:*

key - Currently, this argument is not used.

*Return Value:* None.

