
Topic: Connect UI Elements to Code

In <The main.lua File>, it was mentioned that empty event handlers are defined for each of the Button elements in the screen. When certain events occur to a button, such as when the user clicks the button with the mouse or when the button receives or loses the input focus, the system notifies our application of the event by "firing" or calling the appropriate event handler. Our application can either ignore the event by doing nothing or it can perform whatever operation it deems appropriate by executing its own custom handling code.

By default, the Visual Editor defines three empty event handlers for each Button element created in a screen. The three handlers--focused(), pressed(), and released()--are shown below for the ButtonEnglish button. Similar empty handlers are defined for each of the other buttons on our screen.

(code)
-- LANGUAGE.BUTTONENGLISH SECTION
layout["language"].ButtonEnglish.focused = function() -- Handler for ButtonEnglish.focused in this screen
end
layout["language"].ButtonEnglish.pressed = function() -- Handler for ButtonEnglish.pressed in this screen
end
layout["language"].ButtonEnglish.released = function() -- Handler for ButtonEnglish.released in this screen
end
-- END LANGUAGE.BUTTONENGLISH SECTION
(end)

Each of these handlers is "fired" or called when the following events occur.

focused() - fired when the button gains the input focus
pressed() - fired when the button is clicked by the mouse or the <Enter> key is pressed when the button has focus
released() - fired when the button loses the input focus

By default, each handler is empty, so if the application is run and the event handler is fired, the event is essentially ignored. To see these event handlers in action, let's add some simple code to two of the buttons. When the English button is pressed, we'll display a text string onscreen. When the Spanish button is pressed, we'll erase the string.

Open main.lua in a text editor. To the ButtonEnglish.pressed() handler, add the following Lua code statements to create and display the string.

(code)
layout["language"].ButtonEnglish.pressed = function() -- Handler for ButtonEnglish.pressed in this screen
  -- Create a Text element with our desired string
  testStr = Text{ text = "English button pressed() event handler!",
                  position = { 800, 100 },
                  font = "DejaVu Sans 50px",
                  color = { 255, 255, 255, 255 }
                }
  -- Display the string
  screen:add( testStr )
end
(end)

To the ButtonSpanish.pressed() handler, add code to erase and destroy the string.

(code)
layout["language"].ButtonSpanish.pressed = function() -- Handler for ButtonSpanish.pressed in this screen
  if testStr ~= nil then
    -- Erase the string from the display
    screen:remove( testStr )
    -- Destroy the string
    testStr = nil
  end
end
(end)

Save the modified main.lua file.

To run our application and test the event handler code, go to the Tutorial project's directory at ~/trickplay-editor/Tutorial. Run the TrickPlay Engine with the following command line. The Engine will automatically run our Tutorial application.

(code)
~/trickplay-engine/Tutorial$ trickplay .
(end)

Press the English and Spanish buttons to verify that the appropriate event handlers are being fired.

