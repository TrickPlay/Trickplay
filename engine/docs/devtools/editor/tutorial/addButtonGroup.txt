Topic: Add Button Group

Our demonstration program will enable the user to select a desired language by clicking an appropriate button. First we'll define the buttons, then we'll arrange and align them into a clean design, and finally, we'll define focus navigation routes so users can use the keyboard to move to the desired button.

Define the Buttons:
We'll organize the buttons by grouping them within their own area of the screen. Using the same technique that we used to define the screen layout using Rectangle elements, we will use another Rectangle element to group the buttons.

Create a Rectangle element that is placed roughly in the center of the main display area. This will be the area where we store our buttons. Right-click the rectangle to display its Inspector dialog. Set the properties to the following values.

- Object Name: RectButtonGroup
- X, Y, Z: 600, 250, 0
- W, H: 700, 500
- Fill Color RGBA: 255, 255, 255, 100

Next create a button by selecting the Edit->Insert UI Element menu item and clicking the item marked Button in the displayed dialog box. A new button element will be created in the Editor workspace. Drag the new button so that it is contained within the rectangle you just created.

We will need a total of five buttons, but each will share some common property values, such as their size. If we set these common properties now, we'll be able to carry them over to the new buttons when they are created, thereby saving us some time setting properties in the Inspector. Here is the process: First, right-click the button to display its Inspector. Then set the common properties that each of the subsequent buttons will share.

- W, H: 500, 60
- Skin: OOBE
- Text Font: DejaVu Sans 40px

Click the OK button to accept the settings. Then, with the button selected, press the <D> key to duplicate the element. A new button will be created that will have the same property settings as the original button.

With a button selected, press <D> again until you have a total of five buttons. Position four of the buttons vertically, one above the other, within the button rectangle area, and place the fifth button outside of the button area, below all the other buttons. The buttons do not need to be precisely aligned; we'll have the Editor align them accurately later.

Your screen should look similar to the figure shown below.

(see images/EdButtonGroupRaw.png)

Each of the four buttons in the button area will specify a different language that the user will be able to choose. Right-click the top button to display its Inspector. We will set each button's Object Name and Label to unique and meaningful values. The object name will be used to reference the button programatically; we'll set how this is done a little later in this tutorial. We've been setting the Object Name field for the Rectangle UI elements, so this field is already familiar. The label is the text displayed within the button. The Label field is located in the Inspector's More tab near the top of the Inspector dialog. For the English button, set its following properties.

- Object Name: ButtonEnglish
- Label: English

Perform the same task for each of the remaining buttons in the button area, assigning a unique name and label/language for each. Suggested values for each button are shown below.

Spanish language button
- Object Name: ButtonSpanish
- Label: Spanish

Chinese language button
- Object Name: ButtonChinese
- Label: Chinese

Korean language button
- Object Name: ButtonKorean
- Label: Korean

The fifth button outside of the button area, will be used to enable the user to accept the selected language and continue on to the next screen. Appropriate settings for this button are shown below.

- ObjectName: ButtonContinue
- Label: Continue

Your buttons should look something like this.

(see images/EdButtonGroupLabeled.png)


Align the Buttons:
The buttons exist, but they are not placed nicely on the screen. We'll use the Visual Editor to align them for us. To do this, we'll manually position the top and bottom buttons within the button area and then instruct the Editor to align the remaining buttons using the top and bottom buttons as "anchors."

First, click-and-drap the top English button to its desired position. The button should be located near the top of the button area with an equal amount of space on its left and right sides so that it appears centered. Alternatively, you can position the button by setting its X, Y, and Z coordinates in the Inspector dialog.

The English button will be used as our top anchor; all the remaining buttons should be located below this button. If they are not, re-position them now. Do not spend time precisely locating the other buttons; simply move them so they are all below the English button and in their desired order from top to bottom.

We will use the English button as our left anchor, as well. To accomplish this, all the remaining buttons, including the Continue button, should be positioned to the right of the English button.

Next, click-and-drag the bottom Korean button so that it is the desired distance from the bottom of the button area. This will be our bottom anchor.

Finally, position the Continue button outside of the button area. It should be centered roughly between the bottom of the button area and the top of the lower display area. The left-most edge of the Continue button should be noticeably to the right of the left edge of our left-anchor English button.

The screen should look similar to that shown below. The important button positions are

- the top anchor English button. All other buttons must be below the top anchor.
- the bottom anchor Korean button. All the other language buttons (but not the Continue button) must be above the bottom anchor.
- the left anchor English button. All other buttons (including the Continue button) must be to the right of the left anchor.

(see images/EdButtonGroupAnchors.png)

We will now align the four language buttons within the button area. First, select all four buttons by <Shift>-Clicking each one so they are multiply selected. Then, from the menu, select Arrange->Distribute:Vertically. The buttons will be equally distributed between the top anchor/English button and the bottom anchor/Korean button.

(see images/EdButtonGroupDistribVert.png)

Next, let's align the buttons along our left anchor, the English button.  When selecting multiple elements by clicking on them, the Editor will use the first-selected element as the anchor. Therefore, starting with no elements selected, <Shift>-Click the English button, followed by the remaining buttons, including the Continue button. Because the English button was selected first, the Editor will use it as the anchor. With all the buttons selected, click the Arrange->Align:Left menu item. All the buttons will align along the left edge of the anchor, the English button.

(see images/EdButtonGroupAligned.png)

Multiple Selection Using Click-and-Drag:
In the previous section, you selected multiple elements by <Shift>-Clicking each item. It's also possible to select multiple items by clicking and dragging the mouse to create a selection region. When you select multiple items by clicking and dragging, the entire element must be contained within the dragged selection region; if any part of an item is not within the selection area, the item will not be selected.

You can try now to select the four language buttons by clicking and dragging, but you will immediately encounter a problem. If you click on the rectangle that defines the button area, it becomes selected, and any subsequent dragging moves it. Similarly, if you click-and-drag on an area outside the button rectangle, you end up selecting and moving the background image which covers the entire display area. There seems to be no place on the screen to click-and-drag that doesn't select some element. If this is the case, how can click-and-drag be used to select multiple items?

The solution lies in making space available on the screen by removing the background image. But this causes another problem because the rectangles we created to lay out the different sections of the display are semi-transparent and depend upon the color of the background image to be able to see their true visual effect. Thus, the complete solution lies not just in removing the background image, but also in replacing it with a temporary, working version that cannot be selected by mouse clicks.

Before we make any further changes, save the current version of the screen by selecting File->Save. The modifications we will perform here will be for demonstration purposes only, so we'll save the current screen, make some changes to walk through the process, and when we're finished, we'll back out of our changes by restoring the saved screen.

The current background image can be deleted by first clicking on it to select it, and then either pressing the <Backspace> key or selecting the Edit->Delete menu item. Then we can place the same background image back on the display, but as a temporary, working version that will not be selectable when it is clicked on. This can be achieved by selecting the View->Background:Image... menu item. An Open File dialog is displayed and the original background.jpg file can be selected. The background image is displayed, and the screen should appear the same now as it did before we removed the background image. The difference is that we are now able to click-and-drag to select multiple items. Verify this by clicking and dragging to select all the language buttons and the Continue button. Remember that the entire button must be contained within the selection region for it to be selected.

The temporary, working background image is active while working in the Visual Editor only; it is not stored as part of the screen, so if the application is run in the TrickPlay Engine, the application will not have a background image. Thus, we'll have to restore our original background image (via the Edit->Insert UI Element... menu item) before the screen can be considered finished.

When elements are selected by clicking and dragging a selection region, the Editor determines the anchor element in a different manner than when elements are selected by <Shift>-Clicking. Recall that when multiple elements are selected by <Shift>-Clicking, the first selected element is the anchor. When multiple selection occurs by the click-and-drag method, the type of alignment operation performed determines the anchor element. For example, if you left-align the elements, the anchor will be the element with the left-most edge; all other elements will align with it. This is why it was important when positioning the language buttons that the anchoring English button be the left-most button. Although we ended up using <Shift>-Click to select multiple buttons, we had arranged the buttons so that we could have successfully used the click-and-drag method, as well.

The anchor element that the Editor uses for each of the supported alignment operations are listed below.

_Alignment_Anchors_

Left alignment - anchor is the element with the left-most edge
Right alignment - anchor is the element with the right-most edge
Top alignment - anchor is the element with the top-most edge
Bottom alignment - anchor is the element with the bottom-most edge
Horizontal-Center alignment - anchor is the first element that was created
Vertical-Center alignment - anchor is the first element that was created

Notice that the determining factor when deciding on the anchor for Horizontal-Center and Vertical-Center alignments is the element that was created first among the selected elements. Unless you happen to remember the order in which you created each element, the first-created element may not always be known. This can result in an unintended alignment. For this reason, when you intend to perform a Horizontal-Center or Vertical-Center alignment, using the <Shift>-Click method to select multiple elements, where the first-selected element is the anchor, will often result in more predictable alignments.

Now that we understand the Editor's two methods for selecting multiple elements, let's restore our screen to its last saved position by selecting the File->Open menu item and reloading the saved language.lua screen.

Define Input Focus Navigation:
As the user travels through a screen's UI elements, the input focus, i.e., the element that will receive user input, migrates from one element to another. The order in which elements receive focus can be defined within the Visual Editor. Each element can explicitly specify the next element that will receive focus depending upon the key or button the user presses. This focus navigation can be defined in an element's Inspector dialog.

Select the English button, right-click to display its Inspector dialog, and click on the "Focus" tab at the top of the dialog. This tab presents a visual facsimile of a TV remote control's navigation buttons (Up, Down, Left, and Right), and enables you to define the UI element that receives focus when the user presses each of the keys.

(see images/EdButtonGroupFocus.png)

To assign focus, first click on one of the Inspector's arrow keys in the Focus tab. Then to specify which element is to receive focus when the user presses that key, click on the appropriate element in the Visual Editor workspace. For example, in the Inspector dialog for the English button, when the user presses a <DownArrow> arrow key, we want the focus to shift from the English button to the button immediately below it, the Spanish button. Thus, in the Focus tab of the English button's Inspector, press the <DownArrow> key. It will display with a red border, indicating that it is the selected. Then in the Visual Editor's workspace, click the Spanish button. The Object Name of the Spanish button, ButtonSpanish, is automatically displayed in the Inspector's <DownArrow> button to indicate that the element has been assigned to the key. Similarly, the <UpArrow> can be defined to shift focus to the Continue button. First press the <UpArrow> button in the Inspector and then click on the Continue button in the Editor workspace. Assign focus destinations to any other keys that you wish. When you have finished, click the Apply button to close the Inspector dialog.

Appropriate focus destinations should be defined for each of the remaining buttons (Spanish, Chinese, Korean, and Continue) so that a user can cycle through all the focusable elements contained in the screen.

