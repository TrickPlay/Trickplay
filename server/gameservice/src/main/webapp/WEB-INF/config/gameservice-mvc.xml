<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd     
 		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
 		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd">

	<!-- JSR-303 support will be detected on classpath and enabled automatically -->
	<mvc:annotation-driven />
	<mvc:default-servlet-handler />
	<!-- Creates the JSR-303 Validator -->
	<bean id="validator"
		class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean" />
	<!-- - This bean resolves specific types of exceptions to corresponding 
		logical - view names for error views. The default behaviour of DispatcherServlet 
		- is to propagate all exceptions to the servlet container: this will happen 
		- here with all other types of exceptions. -->
	<bean
		class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
		<property name="exceptionMappings">
			<props>
				<prop key=".DataAccessException">dataAccessFailure</prop>
				<prop key=".lang.Exception">uncaughtException</prop>
				<prop key=".AuthenticationCredentialsNotFoundException">login</prop>
				<prop key=".AccessDeniedException">login</prop>
			</props>
		</property>
	</bean>


	<bean
		class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver"
		p:order="1">
		<property name="mediaTypes">
			<map>
				<entry key="xml" value="application/xml" />
				<entry key="json" value="application/json" />
			</map>
		</property>
		<property name="defaultViews">
			<list>
				<bean class="org.springframework.web.servlet.view.xml.MarshallingView">
					<property name="marshaller">
						<bean class="org.springframework.oxm.xstream.XStreamMarshaller"
							p:autodetectAnnotations="true" />
					</property>
				</bean>
				<bean
					class="org.springframework.web.servlet.view.json.MappingJacksonJsonView" />
			</list>
		</property>
	</bean>

	<bean id="viewResolver"
		class="org.springframework.web.servlet.view.InternalResourceViewResolver"
		p:prefix="/WEB-INF/jsp/" p:suffix=".jsp" p:order="2" />

	<!-- Maps request paths to @Controller classes; e.g. a path of /user looks 
		for a controller named UserController -->
	<bean
		class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping">
		<property name="order" value="1" />
	</bean>

	<!-- Dispatches requests mapped to POJO @Controllers implementations -->
	<bean
		class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
		<property name="messageConverters">
			<list>
				<ref bean="marshallingHttpMessageConverter" />
				<ref bean="jsonConverter" />
			</list>
		</property>
		<property name="webBindingInitializer">
			<!-- Configures Spring MVC DataBinder instances -->
			<bean
				class="org.springframework.web.bind.support.ConfigurableWebBindingInitializer">
				<property name="validator" ref="validator" />
			</bean>
		</property>
	</bean>
	<bean id="jsonConverter"
		class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter">
		<property name="supportedMediaTypes" value="application/json" />
	</bean>
	<bean id="marshallingHttpMessageConverter"
		class="org.springframework.http.converter.xml.MarshallingHttpMessageConverter"
		p:marshaller-ref="jaxb2Marshaller" p:unmarshaller-ref="jaxb2Marshaller" />

	<bean id="jaxb2Marshaller" class="com.trickplay.gameservice.controllers.MyJaxb2Marshaller">
		<property name="classesToBeBound">
			<list>
				<value>com.trickplay.gameservice.transferObj.UserTO</value>
				<value>com.trickplay.gameservice.transferObj.UserBuddiesTO</value>
			</list>
		</property>
	</bean>

    <bean id="dbPurgeService"
        class="com.trickplay.gameservice.service.impl.DBPurgeServiceImpl">
        <property name="dataSource" ref="dataSource" />
    </bean>

</beans>
