.TH stitcher 1

.SH NAME

stitcher - a tool to stitch together many source sprites into a single spritesheet

.SH SYNOPSIS

stitcher /path/to/input ... [-h] [-bcmr] [-i [int] [filter] ...] [-j path ...] [-o [int] [path] ...]

.SH INPUTS
stitcher will accept a list of directories ang/or images, and things that might be convertible to images (ie. SVG). Experiment to see what input formats work for your case.

.SH EXAPLES

.TP 5

stitcher assets/ui
Will pick up all of the images in the directory assets/ui and create two files, assets/ui.png (one PNG of all the input images packed together) and assets/ui.json, a JSON map to each of the packed images. Load this map into TrickPlay as:
    ui = SpriteSheet { map = 'assets/ui.json' }
.br
Then create sprites from it:
    sprite = Sprite { sheet = ui, id = 'button-press.png' }
.br
Sprites behave just as if they were loaded from the original image.

.TP

stitcher assets/ui special-image.jpg -i *.png nav/bg-?.jpg 256
Load all PNGs plus JPGs whose filenames match 'nav/bg-?.jpg', and filter out images bigger than 256 pixels on a side. 'special-image.jpg' doesn't match either filter, but will be included since it was named directly.

.TP

stitcher assets/ui -o sprites/ui 512 -m
Output the JSON map as sprites/ui.json. In addition, spritesheets created will not be larger than 512 x 512 pixels; instead, extra images will flow to second and third spritesheets. 
.br
(NOTE: -m is not yet supported on the TrickPlay side.)

.TP

stitcher assets/ui -i 256 -o 512 -bcm
-b creates a 1-pixel buffer around each sprite to prevent scaling problems, while -c copies over all images that fail the input size filter, 256, as stand-alone single-image spritesheets.

.TP

stitcher assets/ui -j assets/old-ui-1.json assets/old-ui-2.json
-j merges existing spritesheets into the output. This can be used when a previously created spritesheet, for example, needs to be updated.

.TP

stitcher path/image1.png path/image2.png ... -j assets/ui.json -f unused-image.png -o assets/ui
Merge a list of new assets into a current spritesheet, and forget an image that's no longer used.

.SH OPTIONS

.TP 5

-h
Show this man page and exit.

.TP

-b
Place buffer pixels around sprite edges. Add this flag if scaled sprites are having issues around their borders.

.TP

-c
Copy files that fail the size filter over as single-image spritesheets (if they fit within the maximum output size). This option must be used in conjunction with -m.

.TP

-f [id] ...
Skip or forget specific image ids (an image's path within its source directory). This is most useful when you want to merge entire spritesheets except for certain images. See -j.

.TP

-i [int] [filter] ...
Filter which files to include. Name filters can use the wildcards * (zero or more chars) and ? (one char). Multiple space-seperated name filters can be passed. Files will be included if they match at least one filter. One integer size filter can also be passed, such as 256, to prevent large images from being included in a spritesheet.

.TP

-j path ...
Name the .json files of existing spritesheets to be merged with the new images.

.TP

-m
Divide sprites among multiple spritesheets if they don't fit within the maximum output dimensions.
.br
(NOTE: -m is not yet supported on the TrickPlay side.)

.TP

-o [int] [path] ...
Set the path of the output files, which will have sequential numbers and a .png or .json extension appended. Without this option, the path of the first input will be used. You can also pass an integer like 4096 to set the maximum .png size.

.TP

-r
Recursively include subdirectories.