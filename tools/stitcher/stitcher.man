.TH stitcher 1

.SH NAME

stitcher - a tool to stitch together many source sprites into a single spritesheet

.SH SYNOPSIS

stitcher /path/to/input ... [-h] [-BCMR] [-i FILTER] [-j PATH] [-o PATH] [-s INT] [-S INT]

.SH INPUTS
stitcher will accept a list of directories and/or images, and things that might be convertible to images (ie. SVG). Experiment to see what input formats work for your case.

.SH EXAPLES

.TP 5

stitcher assets/ui
Will pick up all of the images in the directory assets/ui and create two files, assets/ui.png (one PNG of all the input images packed together) and assets/ui.json, a JSON map to each of the packed images. Load this map into TrickPlay as:
    ui = SpriteSheet { map = 'assets/ui.json' }
.br
Then create sprites from it:
    sprite = Sprite { sheet = ui, id = 'button-press.png' }
.br
Sprites behave just as if they were loaded from the original image.

.TP

stitcher assets/ui special-image.jpg -i *.png nav/bg-?.jpg -s 256
Load all PNGs plus JPGs whose filenames match 'nav/bg-?.jpg', and filter out images bigger than 256 pixels on a side. 'special-image.jpg' doesn't match either filter, but will be included since it was named directly.

.TP

stitcher assets/ui -o sprites/ui -S 512
Output the JSON map as sprites/ui.json, and ensure that the spritesheets created will not be larger than 512 x 512 pixels.

.TP

stitcher assets/ui -s 256 -C
-C prevents images that fail the input size filter, 256, from being copied over as stand-alone images.

.TP

stitcher assets/ui -j assets/old-ui-1.json -j assets/old-ui-2.json
-j merges an existing spritesheet into the output. This can be used when a previously created spritesheet, for example, needs to be updated.

.TP

stitcher path/image1.png path/image2.png ... -j assets/ui.json -f unused-image.png -o assets/ui
Merge a list of new assets into a current spritesheet, and forget an image that's no longer used.

.SH OPTIONS

.TP 5

-h, --help
Show option help and exit.

.TP

-B, --no-buffer-pixels
Do not place buffer pixels around sprite edges.

.TP

-C, --no-copy
Do not copy over files that fail the size filter over as single-image spritesheets (if they fit within the maximum output size).

.TP

-f ID, --forget=ID
Id of a sprite (ie., its path within its original source directory) to skip or forget; this is most useful when you want to merge entire spritesheets except for certain images (see -j)

.TP

-i FILTER, --input-filter=FILTER
Inclusive wildcard (?, *) filter for files within input directories (default: *); multiple filters can be passed, in which case files will be included if they match at least one filter

.TP

-j PATH, --merge-json=PATH
Path to the JSON file of a spritesheet to merge into this one

.TP

-M, --no-multiple
Do not allow the tool to output multiple images; tool will exit if it can't fit all of the images within the output dimensions (see -S)

.TP

-o PATH, --output-path=PATH
Output path for the files *.json and *.png (default: first input path)

.TP

-R, --no-recursive
Do not recursively include subdirectories.

.TP

-s INT, --input-size=INT
Limit on the maximum size of input images (default 512)

.TP

-S INT, --output-size=INT
Limit on the maximum size of output images (default: 4096)
