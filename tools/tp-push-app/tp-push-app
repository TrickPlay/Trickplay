#!/usr/bin/env python

# TODO: The paths sent will be in this system's format. If you run this on
# Windows, the server will receive windows paths.

import os
import json
import sys
import hashlib
import socket

file_list = []

for root , dirs , files in os.walk( os.getcwd() ):

    for file in files:
        
        file_list.append( os.path.join( root , file ) )
        
        
prefix = os.path.commonprefix( file_list )

if len( prefix ) == 0:
    sys.exit( "Invalid file list prefix" )

try:    

    app_index = file_list.index( os.path.join( prefix , "app" ) )
    
except:
    
    sys.exit( "Missing 'app' file" )

app_file = open( file_list[ app_index ] )
app_data = app_file.read()
app_file.close()

messages = []

messages.append( "APP %d %s\n" % ( len( file_list ) , app_data.replace( "\n" , " " ).replace( "\r" , " " ) ) )


for file in file_list:
    
    f = open( file )
    m = hashlib.md5()
    m.update( f.read() )
    m = m.hexdigest()
    f.close()
    
    messages.append( "%s %s\n" % ( m , file[ len( prefix ) : ] ) )
    
    
        

try:
    
    print( "Connecting..." )
    s = socket.create_connection( ( "localhost" , 8888 ) )
    s.setblocking(1)
    
except:
    
    sys.exit( "Connection failed" )


try:
    
    print( "Sending file list..." )
    s.sendall( "".join( messages ) )
    
except:
    
    sys.exit( "Failed to send file list" )
    

try:
    
    print( "Waiting for response..." )
    server = s.makefile()
    parts = server.readline().strip().split()
    
except:
    
    sys.exit( "Failed to read response" )


if len(parts) == 0:
    sys.exit( "Invalid response" )
if parts[0] == "DONE":
    print( "Nothing to update" )
else:
    to_send = []
    if parts[0]=="SENDALL":
        to_send = [i for i in range(0,len(file_list))]
    else:
        del parts[0:1]
        to_send = [int(s) for s in parts]
        
    for i in to_send:
        file = open( file_list[ i ] )
        data = file.read()
        file.close()
        print( "Sending %s" % file_list[ i ][ len( prefix ) : ] )
        server.write( "%d\n" % len( data ) )
        server.write( data )
        server.flush()

        
        





    



        


