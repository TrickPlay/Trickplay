module local_hash;

[[
#include "storage.h"
#include "glib.h"
]]

class LocalHash [[Storage::LocalHash*]]
{
	LocalHash(string name="DEFAULT_DB")
		[[
				*self = new Storage::LocalHash();
            if (lua_gettop(L)==2 && lua_istable(L,-2))
            {
                lua_pushvalue(L,-2);
                lb_set_props_from_table(L);
                lua_pop(L,1);
            }
				else
				{
					g_debug("Name is: %p (%s)",name,name);
					(*self)->name = name;
				}

				(*self)->connect();
		]];

	~LocalHash()
		[[
			delete self;
		]];

	readonly int count
		[[
			count = self->count();
		]];

	lstring get(lstring key)
		[[
			Storage::String theKey( key , key_len );
			Storage::String value = self->get(theKey);
			result = value.data();
			result_len = value.length();
		]];

	put(lstring key, lstring value)
		[[
			Storage::String theKey( key , key_len );
			Storage::String theValue( value , value_len );
			self->put(theKey, theValue);
		]];

	del(lstring key)
		[[
			Storage::String theKey( key , key_len );
			self->del(theKey);
		]];

	nuke()
		[[
			self->nuke();
		]];

	begin()
		[[
			self->begin();
		]];

	commit()
		[[
			self->commit();
		]];

	abort()
		[[
			self->abort();
		]];

	flush()
		[[
			self->flush();
		]];
}
